////////////////////////////////////////////////////////
// Прокси класс WEB-Моделей
// Сгенерирован из файла C:\Users\keiqsa\Projects\model-first-backend-plugin\models.xml  в 10/21/2022 12:54:28
////////////////////////////////////////////////////////

using System;
using System.ComponentModel.DataAnnotations;
using UCP.Common.Plugin;
using System.Runtime.Serialization;
using UCP.Common.Plugin.Attributes;
using Newtonsoft.Json;

namespace Bss.Entities
{
#region [Accounts]
  ///<summary>
///The Accounts entity provides a standardized mechanism for the management of billing and settlement accounts, as well as for financial accounting (account receivable) either in B2B or B2B2C contexts.
///
///GET method allows retrieval of account information either in a B2B2C relationship context (a mass market customer billing account within a “Billing on Behalf of” process for example) or in a B2B context (a billing/settlement account for a partner or B2B customer).
///
///It also allows the query of bill items allowing partners or B2B customer to check their invoice.
///
///The API allows manages the following data resources:
///- AccountTaxes
///- BankDetails
///- PaymentDocuments
///- CustomerPayments
///- Adjustments
///- BillingTasks
///and support no any Actions
///</summary>
    
    ///<remarks>GET &lt;host&gt;[:&lt;port&gt;]/api/v1/bss/Accounts
///</remarks>
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Accounts_Request_GET",Namespace = "")]
	public class Accounts_Request_GET : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// Идентификатор клиента (узла типа Customers)
	    ///<list type='bullet'>
///<item>
///	<description>CLNT_ID из справочника CLIENT_HISTORIES</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("ParentID")]
        [DataMember(Name="ParentID",EmitDefaultValue = false)]
		[JsonRestrictedByValue("<empty>")]

	public global::System.Int32? ParentID 	{
		get 
		{ 
			if(emptyId.Equals(this.ParentId))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.ParentId, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.ParentId = value.ToString(); }
	}
              /// <summary>
        /// Идентификатор лицевого счета (соответствует CustomerID)
	    ///<list type='bullet'>
///<item>
///	<description>CLNT_ID из справочника CLIENT_HISTORIES</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("ID")]
        [DataMember(Name="ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? ID 	{
		get 
		{ 
			if(emptyId.Equals(this.Id))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.Id, out result))
				return result; 
			else
            {
return 0;
            }
		}
		set { this.Id = value.ToString(); }
	}
              /// <summary>
        /// Идентификатор категории Лицевого счета
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - Предоплатный</description>
///</item>
///<item>
///	<term>2 </term>
///	<description> - Кредитный (справочник Client_cats)</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("CategoryID")]
        [DataMember(Name="CategoryID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? CategoryID  { get; set; } = 0;
              /// <summary>
        /// Идентификатор категории регистрации
	    ///<list type='bullet'>
///<item>
///	<term>9 </term>
///	<description> - без регистрации ( Registr_Cats )</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("RegistrCatID")]
        [DataMember(Name="RegistrCatID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? RegistrCatID  { get; set; } = 0;
              /// <summary>
        /// Идентификатор класса Лицевого счета
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - Нормальный и т.д. (справочник Client_classes)</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ClassID")]
        [DataMember(Name="ClassID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? ClassID  { get; set; } = 0;
              /// <summary>
        /// Идентификатор типа лицевого счета
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - Коммерческий и т.д. (справочник Client_types)</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("TypeID")]
        [DataMember(Name="TypeID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? TypeID  { get; set; } = 0;
              /// <summary>
        /// Идентификатор типа платежа лицевого счета
	    ///<list type='bullet'>
///<item>
///	<term>2 </term>
///	<description> - Гривны</description>
///</item>
///<item>
///	<term>3 </term>
///	<description> - Запрещены ( Client_pay_types )</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("PayTypeID")]
        [DataMember(Name="PayTypeID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? PayTypeID  { get; set; } = 0;
              /// <summary>
        /// Номер лицевого счета
	    ///<list type='bullet'>
///<item>
///	<description>ACCOUNT из справочника CLIENT_HISTORIES</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("Number")]
        [DataMember(Name="Number",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Number  { get; set; }
              /// <summary>
        /// Указание языка для набора multi-language данных 
	    ///<list type='bullet'>
///<item>
///	<term>'uk' </term>
///	<description> -украинский</description>
///</item>
///<item>
///	<term>'ru' </term>
///	<description> -руский </description>
///</item>
///<item>
///	<term>'en' </term>
///	<description> -английский</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("lang")]
        [DataMember(Name="lang",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
			[JsonIgnore]
	public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
              /// <summary>
        /// Признак передачи внешнего значения ID
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - внешний ID (для BIS всегда устанавливаем в 1)</description>
///</item>
///<item>
///	<term>0 </term>
///	<description> - внутренний ID</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 1</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("IDType")]
        [DataMember(Name="IDType",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? IDType  { get; set; } = 1;
              /// <summary>
        /// Дата модификации для http-тега If-Modified-Since
	    ///<list type='bullet'>
///<item>
///	<description>Зарезервировано</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("CacheControlDate")]
        [DataMember(Name="CacheControlDate",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? CacheControlDate  { get; set; }
              /// <summary>
        /// Номер страницы (server paging)
	    ///<list type='bullet'>
///<item>
///	<description>Зарезервировано</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 1</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("pageIndex")]
        [DataMember(Name="pageIndex",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? PageIndex  { get; set; } = 1;
              /// <summary>
        /// Кол-во записей на странице (server paging)
	    ///<list type='bullet'>
///<item>
///	<description>Зарезервировано</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 50</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("PageSize")]
        [DataMember(Name="PageSize",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? PageSize  { get; set; } = 50;
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("Dls_ID")]
        [DataMember(Name="Dls_ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? Dls_ID  { get; set; } = 0;
              /// <summary>
        /// Формат вывода ошибки
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : xml</para>
///<para>Max length : 25</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("ErrFormat")]
        [DataMember(Name="ErrFormat",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ErrFormat     {
		get { return Format ?? "xml"; }
		set { this.Format = value; }
	}
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "PARENTID": return ParentID;
				    case "ID": return ID;
				    case "CATEGORYID": return CategoryID;
				    case "REGISTRCATID": return RegistrCatID;
				    case "CLASSID": return ClassID;
				    case "TYPEID": return TypeID;
				    case "PAYTYPEID": return PayTypeID;
				    case "NUMBER": return Number;
				    case "LANG": return lang;
				    case "IDTYPE": return IDType;
				    case "CACHECONTROLDATE": return CacheControlDate;
				    case "PAGEINDEX": return PageIndex;
				    case "PAGESIZE": return PageSize;
				    case "DLS_ID": return Dls_ID;
				    case "ERRFORMAT": return ErrFormat;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "PARENTID":if (value == null)ParentID=null;else ParentID=Convert.ToInt32(value);break;
                case "ID":if (value == null)ID=null;else ID=Convert.ToInt32(value);break;
                case "CATEGORYID":if (value == null)CategoryID=null;else CategoryID=Convert.ToInt32(value);break;
                case "REGISTRCATID":if (value == null)RegistrCatID=null;else RegistrCatID=Convert.ToInt32(value);break;
                case "CLASSID":if (value == null)ClassID=null;else ClassID=Convert.ToInt32(value);break;
                case "TYPEID":if (value == null)TypeID=null;else TypeID=Convert.ToInt32(value);break;
                case "PAYTYPEID":if (value == null)PayTypeID=null;else PayTypeID=Convert.ToInt32(value);break;
                case "NUMBER":Number=(string)value;break;
                case "LANG":lang=(string)value;break;
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                case "CACHECONTROLDATE":if (value == null)CacheControlDate=null;else CacheControlDate=Convert.ToDateTime(value);break;
                case "PAGEINDEX":if (value == null)PageIndex=null;else PageIndex=Convert.ToInt32(value);break;
                case "PAGESIZE":if (value == null)PageSize=null;else PageSize=Convert.ToInt32(value);break;
                case "DLS_ID":if (value == null)Dls_ID=null;else Dls_ID=Convert.ToInt32(value);break;
                case "ERRFORMAT":ErrFormat=(string)value;break;
                }
            }
		}
		#endregion
	}
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Accounts_Response_GET",Namespace = "")]
	public class Accounts_Response_GET: BaseEntity, IModifiedTag
	{
         #region [Properties]
			/// <summary>
			/// Указание языка для набора multi-language данных 
			/// <para/>
			/// Lang
			/// </summary>
			///<remarks>
			///Указание языка для набора multi-language данных 
			///</remarks>
			[JsonProperty("lang")]
			[DataMember(Name="lang", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
			[JsonIgnore]
            public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
			/// <summary>
			/// Признак передачи внешнего значения ID
			/// <para/>
			/// IsExternalID
			/// </summary>
			///<remarks>
			///Признак передачи внешнего значения ID
			///</remarks>
			[JsonProperty("IDType")]
			[DataMember(Name="IDType", EmitDefaultValue = false)]
			/*norestr*/

            public global::System.Int32? IDType  { get; set; } = 1;
			/// <summary>
			/// Дата модификации для http-тега If-Modified-Since
			/// <para/>
			/// IfModifiedSinceDate
			/// </summary>
			///<remarks>
			///Дата модификации для http-тега If-Modified-Since
			///</remarks>
			[JsonProperty("CacheControlDate")]
			[DataMember(Name="CacheControlDate", EmitDefaultValue = false)]
			/*norestr*/

            public global::System.DateTime? CacheControlDate  { get; set; }
         #endregion
        [JsonIgnore]
	    public DateTime? If_Modified_Since { get {return CacheControlDate;}}
        #region [IDateModified]
        [JsonIgnore]
	    public DateTime? LastModified { get { return If_Modified_Since;}}
        #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "LANG": return lang;
				    case "IDTYPE": return IDType;
				    case "CACHECONTROLDATE": return CacheControlDate;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "LANG":lang=(string)value;break;
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                case "CACHECONTROLDATE":if (value == null)CacheControlDate=null;else CacheControlDate=Convert.ToDateTime(value);break;
                }
            }
		}
		#endregion
    }
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Accounts_Response_GET_OUTPUT",Namespace = "")]
	public class Accounts_Response_GET_OUTPUT : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// Код Валюты
	    ///<list type='bullet'>
///<item>
///	<description>UAH (Справочник Currencies)</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("CurrencyCode")]
        [DataMember(Name="CurrencyCode",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String CurrencyCode  { get; set; }
              /// <summary>
        /// Идентификатор клиента (узла типа Customers)
	    ///<list type='bullet'>
///<item>
///	<description>CLNT_ID из справочника CLIENT_HISTORIES</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("CustomerID")]
        [DataMember(Name="CustomerID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? CustomerID  { get; set; }
              /// <summary>
        /// Идентификатор категории Лицевого счета
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - Предоплатный</description>
///</item>
///<item>
///	<term>2 </term>
///	<description> - Кредитный (справочник Client_cats)</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("CategoryID")]
        [DataMember(Name="CategoryID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? CategoryID  { get; set; }
              /// <summary>
        /// Идентификатор категории регистрации
	    ///<list type='bullet'>
///<item>
///	<term>9 </term>
///	<description> - без регистрации ( Registr_Cats )</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("RegistrCatID")]
        [DataMember(Name="RegistrCatID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? RegistrCatID  { get; set; }
              /// <summary>
        /// Идентификатор класса Лицевого счета
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - Нормальный и т.д. (справочник Client_classes)</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ClassID")]
        [DataMember(Name="ClassID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? ClassID  { get; set; }
              /// <summary>
        /// Идентификатор типа лицевого счета
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - Коммерческий и т.д. (справочник Client_types)</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("TypeID")]
        [DataMember(Name="TypeID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? TypeID  { get; set; }
              /// <summary>
        /// Идентификатор типа платежа лицевого счета
	    ///<list type='bullet'>
///<item>
///	<term>2 </term>
///	<description> - Гривны</description>
///</item>
///<item>
///	<term>3 </term>
///	<description> - Запрещены ( Client_pay_types )</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("PayTypeID")]
        [DataMember(Name="PayTypeID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? PayTypeID  { get; set; }
              /// <summary>
        /// Наименование категории лицевого счета (multi-language)
	    ///<list type='bullet'>
///<item>
///	<description>Название из справочника Client_cats</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("CategoryName")]
        [DataMember(Name="CategoryName",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String CategoryName  { get; set; }
              /// <summary>
        /// Наименование категории регистрации (multi-language)
	    ///<list type='bullet'>
///<item>
///	<description>Наименование из Registr_Cats</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("RegistrCatName")]
        [DataMember(Name="RegistrCatName",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String RegistrCatName  { get; set; }
              /// <summary>
        /// Наименование класса лицевых счетов (multi-language)
	    ///<list type='bullet'>
///<item>
///	<description>Наименование из Client_classes</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ClassName")]
        [DataMember(Name="ClassName",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String ClassName  { get; set; }
              /// <summary>
        /// Наименование типа лицевого счета  (multi-language)
	    ///<list type='bullet'>
///<item>
///	<description>Наименование из Client_types</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("TypeName")]
        [DataMember(Name="TypeName",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String TypeName  { get; set; }
              /// <summary>
        /// Наименование типа платежай (multi-language)
	    ///<list type='bullet'>
///<item>
///	<term>2 </term>
///	<description> - Гривны</description>
///</item>
///<item>
///	<term>3 </term>
///	<description> - Запрещены ( Client_pay_types )</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("PayTypeName")]
        [DataMember(Name="PayTypeName",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String PayTypeName  { get; set; }
              /// <summary>
        /// Номер лицевого счета
	    ///<list type='bullet'>
///<item>
///	<description>ACCOUNT из справочника CLIENT_HISTORIES</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Number")]
        [DataMember(Name="Number",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String Number  { get; set; }
              /// <summary>
        /// Общее количество записей (server paging)
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("TotalCount")]
        [DataMember(Name="TotalCount",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? TotalCount  { get; set; }
              /// <summary>
        /// Идентификатор лицевого счета (соответствует CustomerID)
	    ///<list type='bullet'>
///<item>
///	<description>CLNT_ID из справочника CLIENT_HISTORIES</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("AccountID")]
        [DataMember(Name="AccountID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? AccountID  { get; set; }
              /// <summary>
        /// Указание языка для набора multi-language данных 
	    ///<list type='bullet'>
///<item>
///	<term>'uk' </term>
///	<description> -украинский</description>
///</item>
///<item>
///	<term>'ru' </term>
///	<description> -руский </description>
///</item>
///<item>
///	<term>'en' </term>
///	<description> -английский</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 'uk'</para>
///<para>Max length : 3</para>
///<para>Mandatory : Yes</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("lang")]
        [DataMember(Name="lang",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
			[JsonIgnore]
	public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
              /// <summary>
        /// Признак передачи внешнего значения ID
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - внешний ID (для BIS всегда устанавливаем в 1)</description>
///</item>
///<item>
///	<term>0 </term>
///	<description> - внутренний ID</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 1</para>
///<para>Mandatory : Yes</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("IDType")]
        [DataMember(Name="IDType",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? IDType  { get; set; } = 1;
              /// <summary>
        /// Вычисляемое: Значение/сумма актуального баланса
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abc_Amount")]
        [DataMember(Name="abc_Amount",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Decimal? abc_Amount  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abc_DateCharge")]
        [DataMember(Name="abc_DateCharge",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.DateTime? abc_DateCharge  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("acnt_CreateDate")]
        [DataMember(Name="acnt_CreateDate",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? acnt_CreateDate  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("acnt_ExternalID")]
        [DataMember(Name="acnt_ExternalID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? acnt_ExternalID  { get; set; }
              /// <summary>
        /// IP-адрес/имя копьютера, с которого производилось изменение записи
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("acnt_ModifiedFrom")]
        [DataMember(Name="acnt_ModifiedFrom",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String acnt_ModifiedFrom  { get; set; }
              /// <summary>
        /// Комментарий к лицевому счету (статичный внешний). Изменять не планируется. Комментировать изменения следует в изменяемых сущностях
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("acnt_Remark")]
        [DataMember(Name="acnt_Remark",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String acnt_Remark  { get; set; }
              /// <summary>
        /// Код доставки (возможно, номер доставочного участка и т.п.)
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("adlsb_Code")]
        [DataMember(Name="adlsb_Code",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? adlsb_Code  { get; set; }
              /// <summary>
        /// Идентификатор способа доставки
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("dls_ID")]
        [DataMember(Name="dls_ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? dls_ID  { get; set; }
              /// <summary>
        /// Наименование cпособа доставки (локальное)
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("dlsd_Name")]
        [DataMember(Name="dlsd_Name",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String dlsd_Name  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedBy")]
        [DataMember(Name="ModifiedBy",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedBy  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedDate")]
        [DataMember(Name="ModifiedDate",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? ModifiedDate  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("TaxProfileEnable")]
        [DataMember(Name="TaxProfileEnable",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? TaxProfileEnable  { get; set; }
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "CURRENCYCODE": return CurrencyCode;
				    case "CUSTOMERID": return CustomerID;
				    case "CATEGORYID": return CategoryID;
				    case "REGISTRCATID": return RegistrCatID;
				    case "CLASSID": return ClassID;
				    case "TYPEID": return TypeID;
				    case "PAYTYPEID": return PayTypeID;
				    case "CATEGORYNAME": return CategoryName;
				    case "REGISTRCATNAME": return RegistrCatName;
				    case "CLASSNAME": return ClassName;
				    case "TYPENAME": return TypeName;
				    case "PAYTYPENAME": return PayTypeName;
				    case "NUMBER": return Number;
				    case "TOTALCOUNT": return TotalCount;
				    case "ACCOUNTID": return AccountID;
				    case "LANG": return lang;
				    case "IDTYPE": return IDType;
				    case "ABC_AMOUNT": return abc_Amount;
				    case "ABC_DATECHARGE": return abc_DateCharge;
				    case "ACNT_CREATEDATE": return acnt_CreateDate;
				    case "ACNT_EXTERNALID": return acnt_ExternalID;
				    case "ACNT_MODIFIEDFROM": return acnt_ModifiedFrom;
				    case "ACNT_REMARK": return acnt_Remark;
				    case "ADLSB_CODE": return adlsb_Code;
				    case "DLS_ID": return dls_ID;
				    case "DLSD_NAME": return dlsd_Name;
				    case "MODIFIEDBY": return ModifiedBy;
				    case "MODIFIEDDATE": return ModifiedDate;
				    case "TAXPROFILEENABLE": return TaxProfileEnable;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "CURRENCYCODE":CurrencyCode=(string)value;break;
                case "CUSTOMERID":if (value == null)CustomerID=null;else CustomerID=Convert.ToInt32(value);break;
                case "CATEGORYID":if (value == null)CategoryID=null;else CategoryID=Convert.ToInt32(value);break;
                case "REGISTRCATID":if (value == null)RegistrCatID=null;else RegistrCatID=Convert.ToInt32(value);break;
                case "CLASSID":if (value == null)ClassID=null;else ClassID=Convert.ToInt32(value);break;
                case "TYPEID":if (value == null)TypeID=null;else TypeID=Convert.ToInt32(value);break;
                case "PAYTYPEID":if (value == null)PayTypeID=null;else PayTypeID=Convert.ToInt32(value);break;
                case "CATEGORYNAME":CategoryName=(string)value;break;
                case "REGISTRCATNAME":RegistrCatName=(string)value;break;
                case "CLASSNAME":ClassName=(string)value;break;
                case "TYPENAME":TypeName=(string)value;break;
                case "PAYTYPENAME":PayTypeName=(string)value;break;
                case "NUMBER":Number=(string)value;break;
                case "TOTALCOUNT":if (value == null)TotalCount=null;else TotalCount=Convert.ToInt32(value);break;
                case "ACCOUNTID":if (value == null)AccountID=null;else AccountID=Convert.ToInt32(value);break;
                case "LANG":lang=(string)value;break;
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                case "ABC_AMOUNT":if (value == null)abc_Amount=null;else abc_Amount=Convert.ToDecimal(value);break;
                case "ABC_DATECHARGE":if (value == null)abc_DateCharge=null;else abc_DateCharge=Convert.ToDateTime(value);break;
                case "ACNT_CREATEDATE":if (value == null)acnt_CreateDate=null;else acnt_CreateDate=Convert.ToDateTime(value);break;
                case "ACNT_EXTERNALID":if (value == null)acnt_ExternalID=null;else acnt_ExternalID=Convert.ToInt32(value);break;
                case "ACNT_MODIFIEDFROM":acnt_ModifiedFrom=(string)value;break;
                case "ACNT_REMARK":acnt_Remark=(string)value;break;
                case "ADLSB_CODE":if (value == null)adlsb_Code=null;else adlsb_Code=Convert.ToInt32(value);break;
                case "DLS_ID":if (value == null)dls_ID=null;else dls_ID=Convert.ToInt32(value);break;
                case "DLSD_NAME":dlsd_Name=(string)value;break;
                case "MODIFIEDBY":ModifiedBy=(string)value;break;
                case "MODIFIEDDATE":if (value == null)ModifiedDate=null;else ModifiedDate=Convert.ToDateTime(value);break;
                case "TAXPROFILEENABLE":if (value == null)TaxProfileEnable=null;else TaxProfileEnable=Convert.ToInt32(value);break;
                }
            }
		}
		#endregion
	}
  ///<summary>
///The Accounts entity provides a standardized mechanism for the management of billing and settlement accounts, as well as for financial accounting (account receivable) either in B2B or B2B2C contexts.
///
///POST method allows the creation of account information either in a B2B2C relationship context (creation of mass market customer billing account within a “Billing on Behalf of” process for example) or in a B2B context (creation of a billing/settlement account for a partner or B2B customer).
///
///It also allows the creation of bill items allowing partners or B2B customer to check their invoice.
///
///The API allows manages the following data resources:
///- AccountTaxes
///- BankDetails
///- PaymentDocuments
///- CustomerPayments
///- Adjustments
///- BillingTasks
///and support no any Actions
///</summary>
    
    ///<remarks>POST &lt;host&gt;[:&lt;port&gt;]/api/v1/bss/customers/[parentid]/accounts
///</remarks>
    ///Customers
    [EntitySubentity("Customers")]

	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Accounts_Request_SET",Namespace = "")]
	public class Accounts_Request_SET : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// Идентификатор Доставочного участка
	    ///<list type='bullet'>
///<item>
///	<description>значения DLV AREA</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("DeliverZone")]
        [DataMember(Name="DeliverZone",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? DeliverZone  { get; set; }
              /// <summary>
        /// Идентификатор Типа доставки
	    ///<list type='bullet'>
///<item>
///	<description>значения ID из справочника DeliveryTypes</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("DeliveryID")]
        [DataMember(Name="DeliveryID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? DeliveryID  { get; set; }
              /// <summary>
        /// Пользователь данного изменения
	    ///<list type='bullet'>
///<item>
///	<term>Username </term>
///	<description> - пользователь из контекста</description>
///</item>
///<item>
///	<term>NULL </term>
///	<description> -если неизвестен</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedBy")]
        [DataMember(Name="ModifiedBy",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedBy  { get; set; }
              /// <summary>
        /// Источник данного изменения
	    ///<list type='bullet'>
///<item>
///	<term>IP </term>
///	<description> -адрес/имя компьютера</description>
///</item>
///<item>
///	<term>NULL </term>
///	<description> - если неизвестен</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedFrom")]
        [DataMember(Name="ModifiedFrom",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedFrom  { get; set; }
              /// <summary>
        /// Код Валюты
	    ///<list type='bullet'>
///<item>
///	<description>UAH (Справочник Currencies)</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("CurrencyCode")]
        [DataMember(Name="CurrencyCode",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String CurrencyCode  { get; set; }
              /// <summary>
        /// Комментарий изменения
	    ///<list type='bullet'>
///<item>
///	<description>Заполняем причину изменений для истории</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Remark")]
        [DataMember(Name="Remark",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Remark  { get; set; }
              /// <summary>
        /// Идентификатор категории Лицевого счета
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - Предоплатный</description>
///</item>
///<item>
///	<term>2 </term>
///	<description> - Кредитный (справочник Client_cats)</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("CategoryID")]
        [DataMember(Name="CategoryID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? CategoryID  { get; set; }
              /// <summary>
        /// Идентификатор класса Лицевого счета
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - Нормальный и т.д. (справочник Client_classes)</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ClassID")]
        [DataMember(Name="ClassID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? ClassID  { get; set; }
              /// <summary>
        /// Дата применения изменений
	    ///<list type='bullet'>
///<item>
///	<description>Зарезервировано</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("EffectiveDate")]
        [DataMember(Name="EffectiveDate",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? EffectiveDate  { get; set; }
              /// <summary>
        /// Идентификатор типа платежа лицевого счета
	    ///<list type='bullet'>
///<item>
///	<term>2 </term>
///	<description> - Гривны</description>
///</item>
///<item>
///	<term>3 </term>
///	<description> - Запрещены ( Client_pay_types )</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("PayTypeID")]
        [DataMember(Name="PayTypeID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? PayTypeID  { get; set; }
              /// <summary>
        /// Идентификатор категории регистрации
	    ///<list type='bullet'>
///<item>
///	<term>9 </term>
///	<description> - без регистрации ( Registr_Cats )</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("RegistrCatID")]
        [DataMember(Name="RegistrCatID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? RegistrCatID  { get; set; }
              /// <summary>
        /// Идентификатор типа лицевого счета (multi-language)
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - Коммерческий и т.д. ( Client_types )</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("TypeID")]
        [DataMember(Name="TypeID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? TypeID  { get; set; }
              /// <summary>
        /// Признак передачи внешнего значения ID
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - внешний ID (для BIS всегда устанавливаем в 1)</description>
///</item>
///<item>
///	<term>0 </term>
///	<description> - внутренний ID</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 1</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("IDType")]
        [DataMember(Name="IDType",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? IDType  { get; set; } = 1;
              /// <summary>
        /// Номер лицевого счета
	    ///<list type='bullet'>
///<item>
///	<description>ACCOUNT из справочника CLIENT_HISTORIES</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Number")]
        [DataMember(Name="Number",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Number  { get; set; }
              /// <summary>
        /// Признак анонимности Лицевого счета
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - анонимный</description>
///</item>
///<item>
///	<term>0 </term>
///	<description> - обычный</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("IsAnonymous")]
        [DataMember(Name="IsAnonymous",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? IsAnonymous  { get; set; } = 0;
              /// <summary>
        /// Код внешней системы - инициатора запроса
	    ///<list type='bullet'>
///<item>
///	<description>зарезервировано</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Header
        /// </remarks>
        [JsonProperty("System")]
        [DataMember(Name="System",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String System  { get; set; }
              /// <summary>
        /// Название сущности REST, для которой выполняется POST операция
	    ///<list type='bullet'>
///<item>
///	<description>зарезервировано</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("EntityName")]
        [DataMember(Name="EntityName",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String EntityName { get; set; } = "<empty>";
              /// <summary>
        /// Идентификатор лицевого счета (соответствует CustomerID)
	    ///<list type='bullet'>
///<item>
///	<description>CLNT_ID из справочника CLIENT_HISTORIES</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("ID")]
        [DataMember(Name="ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? ID 	{
		get 
		{ 
			if(emptyId.Equals(this.Id))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.Id, out result))
				return result; 
			else
            {
return 0;
            }
		}
		set { this.Id = value.ToString(); }
	}
              /// <summary>
        /// Идентификатор клиента (узла типа Customers)
	    ///<list type='bullet'>
///<item>
///	<description>CLNT_ID из справочника CLIENT_HISTORIES</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("ParentID")]
        [DataMember(Name="ParentID",EmitDefaultValue = false)]
		[JsonRestrictedByValue("<empty>")]

[SecondaryKey("Customers_Request_SET","ID")]/*SET*/
	public global::System.Int32? ParentID 	{
		get 
		{ 
			if(emptyId.Equals(this.ParentId))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.ParentId, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.ParentId = value.ToString(); }
	}
              /// <summary>
        /// Указание языка для набора multi-language данных 
	    ///<list type='bullet'>
///<item>
///	<term>'uk' </term>
///	<description> -украинский</description>
///</item>
///<item>
///	<term>'ru' </term>
///	<description> -руский </description>
///</item>
///<item>
///	<term>'en' </term>
///	<description> -английский</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 'uk'</para>
///<para>Max length : 3</para>
///<para>Mandatory : Yes</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("lang")]
        [DataMember(Name="lang",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
			[JsonIgnore]
	public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
              /// <summary>
        /// Формат вывода ошибки
	    ///<list type='bullet'>
///<item>
///	<description>'json'</description>
///</item>
///<item>
///	<description>'xml'</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : xml</para>
///<para>Max length : 25</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ErrFormat")]
        [DataMember(Name="ErrFormat",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ErrFormat     {
		get { return Format ?? "xml"; }
		set { this.Format = value; }
	}
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "DELIVERZONE": return DeliverZone;
				    case "DELIVERYID": return DeliveryID;
				    case "MODIFIEDBY": return ModifiedBy;
				    case "MODIFIEDFROM": return ModifiedFrom;
				    case "CURRENCYCODE": return CurrencyCode;
				    case "REMARK": return Remark;
				    case "CATEGORYID": return CategoryID;
				    case "CLASSID": return ClassID;
				    case "EFFECTIVEDATE": return EffectiveDate;
				    case "PAYTYPEID": return PayTypeID;
				    case "REGISTRCATID": return RegistrCatID;
				    case "TYPEID": return TypeID;
				    case "IDTYPE": return IDType;
				    case "NUMBER": return Number;
				    case "ISANONYMOUS": return IsAnonymous;
				    case "SYSTEM": return System;
				    case "ENTITYNAME": return EntityName;
				    case "ID": return ID;
				    case "PARENTID": return ParentID;
				    case "LANG": return lang;
				    case "ERRFORMAT": return ErrFormat;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "DELIVERZONE":if (value == null)DeliverZone=null;else DeliverZone=Convert.ToInt32(value);break;
                case "DELIVERYID":if (value == null)DeliveryID=null;else DeliveryID=Convert.ToInt32(value);break;
                case "MODIFIEDBY":ModifiedBy=(string)value;break;
                case "MODIFIEDFROM":ModifiedFrom=(string)value;break;
                case "CURRENCYCODE":CurrencyCode=(string)value;break;
                case "REMARK":Remark=(string)value;break;
                case "CATEGORYID":if (value == null)CategoryID=null;else CategoryID=Convert.ToInt32(value);break;
                case "CLASSID":if (value == null)ClassID=null;else ClassID=Convert.ToInt32(value);break;
                case "EFFECTIVEDATE":if (value == null)EffectiveDate=null;else EffectiveDate=Convert.ToDateTime(value);break;
                case "PAYTYPEID":if (value == null)PayTypeID=null;else PayTypeID=Convert.ToInt32(value);break;
                case "REGISTRCATID":if (value == null)RegistrCatID=null;else RegistrCatID=Convert.ToInt32(value);break;
                case "TYPEID":if (value == null)TypeID=null;else TypeID=Convert.ToInt32(value);break;
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                case "NUMBER":Number=(string)value;break;
                case "ISANONYMOUS":if (value == null)IsAnonymous=null;else IsAnonymous=Convert.ToInt32(value);break;
                case "SYSTEM":System=(string)value;break;
                case "ENTITYNAME":EntityName=(string)value;break;
                case "ID":if (value == null)ID=null;else ID=Convert.ToInt32(value);break;
                case "PARENTID":if (value == null)ParentID=null;else ParentID=Convert.ToInt32(value);break;
                case "LANG":lang=(string)value;break;
                case "ERRFORMAT":ErrFormat=(string)value;break;
                }
            }
		}
		#endregion
	}
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Accounts_Response_SET",Namespace = "")]
	public class Accounts_Response_SET: BaseEntity, IModifiedTag
	{
         #region [Properties]
			/// <summary>
			/// Номер лицевого счета
			/// <para/>
			/// Acnt_Number
			/// </summary>
			///<remarks>
			///Номер лицевого счета
			///</remarks>
			[JsonProperty("Number")]
			[DataMember(Name="Number", EmitDefaultValue = false)]
			/*norestr*/

            public global::System.String Number  { get; set; }
			/// <summary>
			/// Идентификатор лицевого счета (соответствует CustomerID)
			/// <para/>
			/// Acnt_ID
			/// </summary>
			///<remarks>
			///Идентификатор лицевого счета (соответствует CustomerID)
			///</remarks>
			[JsonProperty("ID")]
			[DataMember(Name="ID", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
            public global::System.Int32? ID 	{
		get 
		{ 
			if(emptyId.Equals(this.Id))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.Id, out result))
				return result; 
			else
            {
return 0;
            }
		}
		set { this.Id = value.ToString(); }
	}
			/// <summary>
			/// Признак передачи внешнего значения ID
			/// <para/>
			/// IsExternalID
			/// </summary>
			///<remarks>
			///Признак передачи внешнего значения ID
			///</remarks>
			[JsonProperty("IDType")]
			[DataMember(Name="IDType", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
            public global::System.Int32? IDType  { get; set; } = 1;
			/// <summary>
			/// Указание языка для набора multi-language данных 
			/// <para/>
			/// Lang
			/// </summary>
			///<remarks>
			///Указание языка для набора multi-language данных 
			///</remarks>
			[JsonProperty("lang")]
			[DataMember(Name="lang", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
			[JsonIgnore]
            public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
         #endregion
        [JsonIgnore]
	    public DateTime? If_Modified_Since { get {return null;}}
        #region [IDateModified]
        [JsonIgnore]
	    public DateTime? LastModified { get { return If_Modified_Since;}}
        #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "NUMBER": return Number;
				    case "ID": return ID;
				    case "IDTYPE": return IDType;
				    case "LANG": return lang;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "NUMBER":Number=(string)value;break;
                case "ID":if (value == null)ID=null;else ID=Convert.ToInt32(value);break;
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                case "LANG":lang=(string)value;break;
                }
            }
		}
		#endregion
    }
#endregion
#region [Accounts/CustomerAccounts]
  
    
    ///<remarks>GET &lt;host&gt;[:&lt;port&gt;]/api/v1/bss/Customers/CustomerAccounts
///</remarks>
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Accounts_CustomerAccounts_Request_GET",Namespace = "")]
	public class Accounts_CustomerAccounts_Request_GET : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("isExternalSearch")]
        [DataMember(Name="isExternalSearch",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? isExternalSearch  { get; set; } = 0;
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("abn_LastFM")]
        [DataMember(Name="abn_LastFM",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String abn_LastFM  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("abn_WorkPlace")]
        [DataMember(Name="abn_WorkPlace",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String abn_WorkPlace  { get; set; }
              /// <summary>
        /// Идентификатор лицевого счета (соответствует CustomerID)
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ID")]
        [DataMember(Name="ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? ID 	{
		get 
		{ 
			if(emptyId.Equals(this.Id))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.Id, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.Id = value.ToString(); }
	}
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("acnt_Number")]
        [DataMember(Name="acnt_Number",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String acnt_Number  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("actp_ID")]
        [DataMember(Name="actp_ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? actp_ID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("bll_Number")]
        [DataMember(Name="bll_Number",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String bll_Number  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("cntr_Name")]
        [DataMember(Name="cntr_Name",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String cntr_Name  { get; set; }
              /// <summary>
        /// Формат вывода ошибки
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : xml</para>
///<para>Max length : 25</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ErrFormat")]
        [DataMember(Name="ErrFormat",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ErrFormat     {
		get { return Format ?? "xml"; }
		set { this.Format = value; }
	}
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ext_ExtNum")]
        [DataMember(Name="ext_ExtNum",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ext_ExtNum  { get; set; }
              /// <summary>
        /// Признак передачи внешнего значения ID
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 1</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("IDType")]
        [DataMember(Name="IDType",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? IDType  { get; set; } = 1;
              /// <summary>
        /// Указание языка для набора multi-language данных 
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("lang")]
        [DataMember(Name="lang",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
			[JsonIgnore]
	public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 1</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("PageNumber")]
        [DataMember(Name="PageNumber",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? PageNumber  { get; set; } = 1;
              /// <summary>
        /// Кол-во записей на странице (server paging)
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 50</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("PageSize")]
        [DataMember(Name="PageSize",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? PageSize  { get; set; } = 50;
              /// <summary>
        /// Код внешней системы
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Header
        /// </remarks>
        [JsonProperty("System")]
        [DataMember(Name="System",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String System  { get; set; }
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "ISEXTERNALSEARCH": return isExternalSearch;
				    case "ABN_LASTFM": return abn_LastFM;
				    case "ABN_WORKPLACE": return abn_WorkPlace;
				    case "ID": return ID;
				    case "ACNT_NUMBER": return acnt_Number;
				    case "ACTP_ID": return actp_ID;
				    case "BLL_NUMBER": return bll_Number;
				    case "CNTR_NAME": return cntr_Name;
				    case "ERRFORMAT": return ErrFormat;
				    case "EXT_EXTNUM": return ext_ExtNum;
				    case "IDTYPE": return IDType;
				    case "LANG": return lang;
				    case "PAGENUMBER": return PageNumber;
				    case "PAGESIZE": return PageSize;
				    case "SYSTEM": return System;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "ISEXTERNALSEARCH":if (value == null)isExternalSearch=null;else isExternalSearch=Convert.ToInt32(value);break;
                case "ABN_LASTFM":abn_LastFM=(string)value;break;
                case "ABN_WORKPLACE":abn_WorkPlace=(string)value;break;
                case "ID":if (value == null)ID=null;else ID=Convert.ToInt32(value);break;
                case "ACNT_NUMBER":acnt_Number=(string)value;break;
                case "ACTP_ID":if (value == null)actp_ID=null;else actp_ID=Convert.ToInt32(value);break;
                case "BLL_NUMBER":bll_Number=(string)value;break;
                case "CNTR_NAME":cntr_Name=(string)value;break;
                case "ERRFORMAT":ErrFormat=(string)value;break;
                case "EXT_EXTNUM":ext_ExtNum=(string)value;break;
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                case "LANG":lang=(string)value;break;
                case "PAGENUMBER":if (value == null)PageNumber=null;else PageNumber=Convert.ToInt32(value);break;
                case "PAGESIZE":if (value == null)PageSize=null;else PageSize=Convert.ToInt32(value);break;
                case "SYSTEM":System=(string)value;break;
                }
            }
		}
		#endregion
	}
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Accounts_CustomerAccounts_Response_GET",Namespace = "")]
	public class Accounts_CustomerAccounts_Response_GET: BaseEntity, IModifiedTag
	{
         #region [Properties]
			/// <summary>
			/// Признак передачи внешнего значения ID
			/// <para/>
			/// IsExternalID
			/// </summary>
			///<remarks>
			///Признак передачи внешнего значения ID
			///</remarks>
			[JsonProperty("IDType")]
			[DataMember(Name="IDType", EmitDefaultValue = false)]
			/*norestr*/

            public global::System.Int32? IDType  { get; set; } = 1;
			/// <summary>
			/// Указание языка для набора multi-language данных 
			/// <para/>
			/// Lang
			/// </summary>
			///<remarks>
			///Указание языка для набора multi-language данных 
			///</remarks>
			[JsonProperty("lang")]
			[DataMember(Name="lang", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
			[JsonIgnore]
            public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
         #endregion
        [JsonIgnore]
	    public DateTime? If_Modified_Since { get {return null;}}
        #region [IDateModified]
        [JsonIgnore]
	    public DateTime? LastModified { get { return If_Modified_Since;}}
        #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "IDTYPE": return IDType;
				    case "LANG": return lang;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                case "LANG":lang=(string)value;break;
                }
            }
		}
		#endregion
    }
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Accounts_CustomerAccounts_Response_GET_OUTPUT",Namespace = "")]
	public class Accounts_CustomerAccounts_Response_GET_OUTPUT : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_ExternalID")]
        [DataMember(Name="abn_ExternalID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? abn_ExternalID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_ID")]
        [DataMember(Name="abn_ID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? abn_ID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_LastFM")]
        [DataMember(Name="abn_LastFM",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String abn_LastFM  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_WorkPlace")]
        [DataMember(Name="abn_WorkPlace",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String abn_WorkPlace  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("acnt_ID")]
        [DataMember(Name="acnt_ID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? acnt_ID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("acnt_Number")]
        [DataMember(Name="acnt_Number",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String acnt_Number  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("actpd_Name")]
        [DataMember(Name="actpd_Name",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String actpd_Name  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("cntr_Name")]
        [DataMember(Name="cntr_Name",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String cntr_Name  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("extCount")]
        [DataMember(Name="extCount",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? extCount  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("isClosed")]
        [DataMember(Name="isClosed",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? isClosed  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Total")]
        [DataMember(Name="Total",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? Total  { get; set; }
              /// <summary>
        /// Признак передачи внешнего значения ID
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("IDType")]
        [DataMember(Name="IDType",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? IDType  { get; set; } = 0;
              /// <summary>
        /// Указание языка для набора multi-language данных 
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("lang")]
        [DataMember(Name="lang",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
			[JsonIgnore]
	public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
              /// <summary>
        /// Идентификатор результирующей таблицы, например, pkt_ID для Packets...
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ID")]
        [DataMember(Name="ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? ID 	{
		get 
		{ 
			if(emptyId.Equals(this.Id))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.Id, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.Id = value.ToString(); }
	}
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("IsSyncEnable")]
        [DataMember(Name="IsSyncEnable",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? IsSyncEnable  { get; set; }
              /// <summary>
        /// Номер MSISDN
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("msisdn")]
        [DataMember(Name="msisdn",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String msisdn  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ParentID")]
        [DataMember(Name="ParentID",EmitDefaultValue = false)]
		[JsonRestrictedByValue("<empty>")]

			[Required]
	public global::System.Int32? ParentID 	{
		get 
		{ 
			if(emptyId.Equals(this.ParentId))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.ParentId, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.ParentId = value.ToString(); }
	}
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "ABN_EXTERNALID": return abn_ExternalID;
				    case "ABN_ID": return abn_ID;
				    case "ABN_LASTFM": return abn_LastFM;
				    case "ABN_WORKPLACE": return abn_WorkPlace;
				    case "ACNT_ID": return acnt_ID;
				    case "ACNT_NUMBER": return acnt_Number;
				    case "ACTPD_NAME": return actpd_Name;
				    case "CNTR_NAME": return cntr_Name;
				    case "EXTCOUNT": return extCount;
				    case "ISCLOSED": return isClosed;
				    case "TOTAL": return Total;
				    case "IDTYPE": return IDType;
				    case "LANG": return lang;
				    case "ID": return ID;
				    case "ISSYNCENABLE": return IsSyncEnable;
				    case "MSISDN": return msisdn;
				    case "PARENTID": return ParentID;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "ABN_EXTERNALID":if (value == null)abn_ExternalID=null;else abn_ExternalID=Convert.ToInt32(value);break;
                case "ABN_ID":if (value == null)abn_ID=null;else abn_ID=Convert.ToInt32(value);break;
                case "ABN_LASTFM":abn_LastFM=(string)value;break;
                case "ABN_WORKPLACE":abn_WorkPlace=(string)value;break;
                case "ACNT_ID":if (value == null)acnt_ID=null;else acnt_ID=Convert.ToInt32(value);break;
                case "ACNT_NUMBER":acnt_Number=(string)value;break;
                case "ACTPD_NAME":actpd_Name=(string)value;break;
                case "CNTR_NAME":cntr_Name=(string)value;break;
                case "EXTCOUNT":if (value == null)extCount=null;else extCount=Convert.ToInt32(value);break;
                case "ISCLOSED":if (value == null)isClosed=null;else isClosed=Convert.ToInt32(value);break;
                case "TOTAL":if (value == null)Total=null;else Total=Convert.ToInt32(value);break;
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                case "LANG":lang=(string)value;break;
                case "ID":if (value == null)ID=null;else ID=Convert.ToInt32(value);break;
                case "ISSYNCENABLE":if (value == null)IsSyncEnable=null;else IsSyncEnable=Convert.ToInt32(value);break;
                case "MSISDN":msisdn=(string)value;break;
                case "PARENTID":if (value == null)ParentID=null;else ParentID=Convert.ToInt32(value);break;
                }
            }
		}
		#endregion
	}
#endregion
#region [AccountTaxes]
  
    
    ///<remarks>POST &lt;host&gt;[:&lt;port&gt;]/api/v1/bss/accounts/[parentid]/accounttaxes
///</remarks>
    ///Accounts
    [EntitySubentity("Accounts")]

	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="AccountTaxes_Request_SET",Namespace = "")]
	public class AccountTaxes_Request_SET : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// Признак включения - выключения
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - установить налог на Лицевой счет</description>
///</item>
///<item>
///	<term>0 </term>
///	<description> - отключить налог от лицевого счета. Не используется при наличии налогового профиля</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Enable")]
        [DataMember(Name="Enable",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? Enable  { get; set; }
              /// <summary>
        /// Идентификатор налога
	    ///<list type='bullet'>
///<item>
///	<description>значения TAX_ID</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("TaxesID")]
        [DataMember(Name="TaxesID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? TaxesID  { get; set; }
              /// <summary>
        /// Дата окончания действия
	    ///<list type='bullet'>
///<item>
///	<term>безсрочно </term>
///	<description> - 31.12.2999 23:59:59</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("DateEnd")]
        [DataMember(Name="DateEnd",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? DateEnd  { get; set; }
              /// <summary>
        /// Дата начала действия
	    ///<list type='bullet'>
///<item>
///	<description>дата изменения (время 0:00:00)</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("DateStart")]
        [DataMember(Name="DateStart",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? DateStart  { get; set; }
              /// <summary>
        /// Дата применения изменений
	    ///<list type='bullet'>
///<item>
///	<description>Зарезервировано</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("EffectiveDate")]
        [DataMember(Name="EffectiveDate",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? EffectiveDate  { get; set; }
              /// <summary>
        /// Источник данного изменения
	    ///<list type='bullet'>
///<item>
///	<term>IP </term>
///	<description> -адрес/имя компьютера</description>
///</item>
///<item>
///	<term>NULL </term>
///	<description> - если неизвестен</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedFrom")]
        [DataMember(Name="ModifiedFrom",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedFrom  { get; set; }
              /// <summary>
        /// Пользователь данного изменения
	    ///<list type='bullet'>
///<item>
///	<term>Username </term>
///	<description> - пользователь из контекста</description>
///</item>
///<item>
///	<term>NULL </term>
///	<description> -если неизвестен</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedBy")]
        [DataMember(Name="ModifiedBy",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedBy  { get; set; }
              /// <summary>
        /// Комментарий изменения
	    ///<list type='bullet'>
///<item>
///	<description>Заполняем причину изменений для истории</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Remark")]
        [DataMember(Name="Remark",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Remark  { get; set; }
              /// <summary>
        /// Признак передачи внешнего значения ID
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - внешний ID (для BIS всегда устанавливаем в 1)</description>
///</item>
///<item>
///	<term>0 </term>
///	<description> - внутренний ID</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 1</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("IDType")]
        [DataMember(Name="IDType",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? IDType  { get; set; } = 1;
              /// <summary>
        /// Идентификатор клиента
	    ///<list type='bullet'>
///<item>
///	<description>CLNT_ID из справочника CLIENT_HISTORIES</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("ParentID")]
        [DataMember(Name="ParentID",EmitDefaultValue = false)]
		[JsonRestrictedByValue("<empty>")]

[SecondaryKey("Accounts_Request_SET","ID")]/*SET*/
	public global::System.Int32? ParentID 	{
		get 
		{ 
			if(emptyId.Equals(this.ParentId))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.ParentId, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.ParentId = value.ToString(); }
	}
              /// <summary>
        /// Идентификатор истории налогов лицевого счета
	    ///<list type='bullet'>
///<item>
///	<description>используется для правки</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("ID")]
        [DataMember(Name="ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? ID 	{
		get 
		{ 
			if(emptyId.Equals(this.Id))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.Id, out result))
				return result; 
			else
            {
return 0;
            }
		}
		set { this.Id = value.ToString(); }
	}
              /// <summary>
        /// Формат вывода ошибки
	    ///<list type='bullet'>
///<item>
///	<description>'json'</description>
///</item>
///<item>
///	<description>'xml'</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : xml</para>
///<para>Max length : 25</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ErrFormat")]
        [DataMember(Name="ErrFormat",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ErrFormat     {
		get { return Format ?? "xml"; }
		set { this.Format = value; }
	}
    //Base Attrribute '' skipped
         #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "ENABLE": return Enable;
				    case "TAXESID": return TaxesID;
				    case "DATEEND": return DateEnd;
				    case "DATESTART": return DateStart;
				    case "EFFECTIVEDATE": return EffectiveDate;
				    case "MODIFIEDFROM": return ModifiedFrom;
				    case "MODIFIEDBY": return ModifiedBy;
				    case "REMARK": return Remark;
				    case "IDTYPE": return IDType;
				    case "PARENTID": return ParentID;
				    case "ID": return ID;
				    case "ERRFORMAT": return ErrFormat;
				    case "LANG": return Lang;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "ENABLE":if (value == null)Enable=null;else Enable=Convert.ToInt32(value);break;
                case "TAXESID":if (value == null)TaxesID=null;else TaxesID=Convert.ToInt32(value);break;
                case "DATEEND":if (value == null)DateEnd=null;else DateEnd=Convert.ToDateTime(value);break;
                case "DATESTART":if (value == null)DateStart=null;else DateStart=Convert.ToDateTime(value);break;
                case "EFFECTIVEDATE":if (value == null)EffectiveDate=null;else EffectiveDate=Convert.ToDateTime(value);break;
                case "MODIFIEDFROM":ModifiedFrom=(string)value;break;
                case "MODIFIEDBY":ModifiedBy=(string)value;break;
                case "REMARK":Remark=(string)value;break;
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                case "PARENTID":if (value == null)ParentID=null;else ParentID=Convert.ToInt32(value);break;
                case "ID":if (value == null)ID=null;else ID=Convert.ToInt32(value);break;
                case "ERRFORMAT":ErrFormat=(string)value;break;
                case "LANG":Lang=(string)value;break;
                }
            }
		}
		#endregion
	}
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="AccountTaxes_Response_SET",Namespace = "")]
	public class AccountTaxes_Response_SET: BaseEntity, IModifiedTag
	{
         #region [Properties]
			/// <summary>
			/// Идентификатор истории налогов лицевого счета
			/// <para/>
			/// Actxb_ID
			/// </summary>
			///<remarks>
			///Идентификатор истории налогов лицевого счета
			///</remarks>
			[JsonProperty("ID")]
			[DataMember(Name="ID", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
            public global::System.Int32? ID 	{
		get 
		{ 
			if(emptyId.Equals(this.Id))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.Id, out result))
				return result; 
			else
            {
return 0;
            }
		}
		set { this.Id = value.ToString(); }
	}
			/// <summary>
			/// Признак передачи внешнего значения ID
			/// <para/>
			/// IsExternalID
			/// </summary>
			///<remarks>
			///Признак передачи внешнего значения ID
			///</remarks>
			[JsonProperty("IDType")]
			[DataMember(Name="IDType", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
            public global::System.Int32? IDType  { get; set; } = 1;
//Base Attrribute '' skipped
         #endregion
        [JsonIgnore]
	    public DateTime? If_Modified_Since { get {return null;}}
        #region [IDateModified]
        [JsonIgnore]
	    public DateTime? LastModified { get { return If_Modified_Since;}}
        #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "ID": return ID;
				    case "IDTYPE": return IDType;
				    case "LANG": return Lang;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "ID":if (value == null)ID=null;else ID=Convert.ToInt32(value);break;
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                case "LANG":Lang=(string)value;break;
                }
            }
		}
		#endregion
    }
#endregion
#region [Addresses]
  
    
    ///<remarks>POST &lt;host&gt;[:&lt;port&gt;]/api/v1/bss/associations/[parentid]/addresses
///POST &lt;host&gt;[:&lt;port&gt;]/api/v1/bss/customers/[parentid]/addresses
///POST &lt;host&gt;[:&lt;port&gt;]/api/v1/bss/subscribers/[parentid]/addresses
///</remarks>
    ///Associations,Customers,Subscribers
    [EntitySubentity("Associations")]
    [EntitySubentity("Customers")]
    [EntitySubentity("Subscribers")]

	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Addresses_Request_SET",Namespace = "")]
	public class Addresses_Request_SET : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// Идентификатор улицы
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("StreetID")]
        [DataMember(Name="StreetID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? StreetID  { get; set; } = 0;
              /// <summary>
        /// Номер почтового индекса (текст)
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ZipName")]
        [DataMember(Name="ZipName",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ZipName  { get; set; }
              /// <summary>
        /// Комментарий изменения
	    ///<list type='bullet'>
///<item>
///	<description>Заполняем причину изменений для истории</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Remark")]
        [DataMember(Name="Remark",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Remark  { get; set; }
              /// <summary>
        /// Дата применения изменений
	    ///<list type='bullet'>
///<item>
///	<description>Зарезервировано</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("EffectiveDate")]
        [DataMember(Name="EffectiveDate",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? EffectiveDate  { get; set; }
              /// <summary>
        /// Признак передачи внешнего значения ID
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - внешний ID (для BIS всегда устанавливаем в 1)</description>
///</item>
///<item>
///	<term>0 </term>
///	<description> - внутренний ID</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("IDType")]
        [DataMember(Name="IDType",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? IDType  { get; set; } = 0;
              /// <summary>
        /// Идентификатор дома
	    ///<list type='bullet'>
///<item>
///	<description>справочник HOUSE_ID</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("HouseID")]
        [DataMember(Name="HouseID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? HouseID  { get; set; } = 0;
              /// <summary>
        /// Номер квартиры
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Appartment")]
        [DataMember(Name="Appartment",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Appartment  { get; set; }
              /// <summary>
        /// Название населеннго пункта
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("CityName")]
        [DataMember(Name="CityName",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String CityName  { get; set; }
              /// <summary>
        /// Контактный Email
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Email")]
        [DataMember(Name="Email",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Email  { get; set; }
              /// <summary>
        /// Контактный Номер факса
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Fax")]
        [DataMember(Name="Fax",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Fax  { get; set; }
              /// <summary>
        /// Контактный Номер телефона
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Phone")]
        [DataMember(Name="Phone",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Phone  { get; set; }
              /// <summary>
        /// Корпус
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Corpus")]
        [DataMember(Name="Corpus",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Corpus  { get; set; }
              /// <summary>
        /// Название страны
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("CountryName")]
        [DataMember(Name="CountryName",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String CountryName  { get; set; }
              /// <summary>
        /// Название района
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("DistictName")]
        [DataMember(Name="DistictName",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String DistictName  { get; set; }
              /// <summary>
        /// Название дома
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("HouseName")]
        [DataMember(Name="HouseName",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String HouseName  { get; set; }
              /// <summary>
        /// Название области
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ProvinceName")]
        [DataMember(Name="ProvinceName",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ProvinceName  { get; set; }
              /// <summary>
        /// Название улицы
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("StreetName")]
        [DataMember(Name="StreetName",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String StreetName  { get; set; }
              /// <summary>
        /// Адресная константа для печати, например в Налоговых накладных
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("TextConst")]
        [DataMember(Name="TextConst",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String TextConst  { get; set; }
              /// <summary>
        /// Идентификатор почтового индекса
	    ///<list type='bullet'>
///<item>
///	<description>справочник ZIP_ID</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ZipID")]
        [DataMember(Name="ZipID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? ZipID  { get; set; } = 0;
              /// <summary>
        /// Идентификатор населенного пункта
	    ///<list type='bullet'>
///<item>
///	<description>справочник CIT_ID</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("CityID")]
        [DataMember(Name="CityID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? CityID  { get; set; } = 0;
              /// <summary>
        /// Идентификатор области
	    ///<list type='bullet'>
///<item>
///	<description>справочник PROV_ID</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ProvinceID")]
        [DataMember(Name="ProvinceID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? ProvinceID  { get; set; } = 0;
              /// <summary>
        /// Идентификатор района
	    ///<list type='bullet'>
///<item>
///	<description>справочник PRODS_ID</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("DistrictID")]
        [DataMember(Name="DistrictID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? DistrictID  { get; set; } = 0;
              /// <summary>
        /// Идентификатор страны
	    ///<list type='bullet'>
///<item>
///	<description>справочник COU_ID</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 1</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("CountyID")]
        [DataMember(Name="CountyID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? CountyID  { get; set; } = 1;
              /// <summary>
        /// Идентификатор типа адреса
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - Юридический</description>
///</item>
///<item>
///	<term>2 </term>
///	<description> - Доставки</description>
///</item>
///<item>
///	<term>3 </term>
///	<description> - Абонента</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("AddressTypeID")]
        [DataMember(Name="AddressTypeID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? AddressTypeID  { get; set; }
              /// <summary>
        /// Идентификатор типа населенного пункта
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("CityTypeID")]
        [DataMember(Name="CityTypeID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? CityTypeID  { get; set; } = 0;
              /// <summary>
        /// Идентификатор типа улицы
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("StreetTypeID")]
        [DataMember(Name="StreetTypeID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? StreetTypeID  { get; set; } = 0;
              /// <summary>
        /// Идентификатор типа адреса
	    ///<list type='bullet'>
///<item>
///	<term>0 </term>
///	<description> -без ограничений</description>
///</item>
///<item>
///	<term>1 </term>
///	<description> - абонентский ящик</description>
///</item>
///<item>
///	<term>2 </term>
///	<description> - гео обьект</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("AddressFormat")]
        [DataMember(Name="AddressFormat",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? AddressFormat  { get; set; } = 0;
              /// <summary>
        /// Код внешней системы - инициатора запроса
	    ///<list type='bullet'>
///<item>
///	<description>зарезервировано</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Header
        /// </remarks>
        [JsonProperty("System")]
        [DataMember(Name="System",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String System  { get; set; }
              /// <summary>
        /// Название сущности REST, для которой выполняется POST операция
	    ///<list type='bullet'>
///<item>
///	<description>зарезервировано</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("EntityName")]
        [DataMember(Name="EntityName",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String EntityName { get; set; } = "<empty>";
              /// <summary>
        /// Идентификатор истории адреса абонента
	    ///<list type='bullet'>
///<item>
///	<description>используется для правки</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("ID")]
        [DataMember(Name="ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? ID 	{
		get 
		{ 
			if(emptyId.Equals(this.Id))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.Id, out result))
				return result; 
			else
            {
return 0;
            }
		}
		set { this.Id = value.ToString(); }
	}
              /// <summary>
        /// Идентификатор вышестоящего узла дерева
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> -корень дерева учета</description>
///</item>
///<item>
///	<term>SUBS_ID </term>
///	<description> -справочник SUBSCRIBERS</description>
///</item>
///<item>
///	<term>CLNT_ID </term>
///	<description> -справочник CLIENT_HISTORIES</description>
///</item>
///<item>
///	<term>ASSC_ID </term>
///	<description> -справочник ASSOCIATIONS</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("ParentID")]
        [DataMember(Name="ParentID",EmitDefaultValue = false)]
		[JsonRestrictedByValue("<empty>")]

[SecondaryKey("Associations_Request_SET","ID")]/*SET*/
[SecondaryKey("Subscribers_Request_SET","ID")]/*SET*/
[SecondaryKey("Customers_Request_SET","ID")]/*SET*/
	public global::System.Int32? ParentID 	{
		get 
		{ 
			if(emptyId.Equals(this.ParentId))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.ParentId, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.ParentId = value.ToString(); }
	}
              /// <summary>
        /// Формат вывода ошибки
	    ///<list type='bullet'>
///<item>
///	<description>'json'</description>
///</item>
///<item>
///	<description>'xml'</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : xml</para>
///<para>Max length : 25</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ErrFormat")]
        [DataMember(Name="ErrFormat",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ErrFormat     {
		get { return Format ?? "xml"; }
		set { this.Format = value; }
	}
              /// <summary>
        /// Указание языка для набора multi-language данных 
	    ///<list type='bullet'>
///<item>
///	<term>'uk' </term>
///	<description> -украинский</description>
///</item>
///<item>
///	<term>'ru' </term>
///	<description> -руский </description>
///</item>
///<item>
///	<term>'en' </term>
///	<description> -английский</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 'uk'</para>
///<para>Max length : 3</para>
///<para>Mandatory : Yes</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("lang")]
        [DataMember(Name="lang",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
			[JsonIgnore]
	public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "STREETID": return StreetID;
				    case "ZIPNAME": return ZipName;
				    case "REMARK": return Remark;
				    case "EFFECTIVEDATE": return EffectiveDate;
				    case "IDTYPE": return IDType;
				    case "HOUSEID": return HouseID;
				    case "APPARTMENT": return Appartment;
				    case "CITYNAME": return CityName;
				    case "EMAIL": return Email;
				    case "FAX": return Fax;
				    case "PHONE": return Phone;
				    case "CORPUS": return Corpus;
				    case "COUNTRYNAME": return CountryName;
				    case "DISTICTNAME": return DistictName;
				    case "HOUSENAME": return HouseName;
				    case "PROVINCENAME": return ProvinceName;
				    case "STREETNAME": return StreetName;
				    case "TEXTCONST": return TextConst;
				    case "ZIPID": return ZipID;
				    case "CITYID": return CityID;
				    case "PROVINCEID": return ProvinceID;
				    case "DISTRICTID": return DistrictID;
				    case "COUNTYID": return CountyID;
				    case "ADDRESSTYPEID": return AddressTypeID;
				    case "CITYTYPEID": return CityTypeID;
				    case "STREETTYPEID": return StreetTypeID;
				    case "ADDRESSFORMAT": return AddressFormat;
				    case "SYSTEM": return System;
				    case "ENTITYNAME": return EntityName;
				    case "ID": return ID;
				    case "PARENTID": return ParentID;
				    case "ERRFORMAT": return ErrFormat;
				    case "LANG": return lang;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "STREETID":if (value == null)StreetID=null;else StreetID=Convert.ToInt32(value);break;
                case "ZIPNAME":ZipName=(string)value;break;
                case "REMARK":Remark=(string)value;break;
                case "EFFECTIVEDATE":if (value == null)EffectiveDate=null;else EffectiveDate=Convert.ToDateTime(value);break;
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                case "HOUSEID":if (value == null)HouseID=null;else HouseID=Convert.ToInt32(value);break;
                case "APPARTMENT":Appartment=(string)value;break;
                case "CITYNAME":CityName=(string)value;break;
                case "EMAIL":Email=(string)value;break;
                case "FAX":Fax=(string)value;break;
                case "PHONE":Phone=(string)value;break;
                case "CORPUS":Corpus=(string)value;break;
                case "COUNTRYNAME":CountryName=(string)value;break;
                case "DISTICTNAME":DistictName=(string)value;break;
                case "HOUSENAME":HouseName=(string)value;break;
                case "PROVINCENAME":ProvinceName=(string)value;break;
                case "STREETNAME":StreetName=(string)value;break;
                case "TEXTCONST":TextConst=(string)value;break;
                case "ZIPID":if (value == null)ZipID=null;else ZipID=Convert.ToInt32(value);break;
                case "CITYID":if (value == null)CityID=null;else CityID=Convert.ToInt32(value);break;
                case "PROVINCEID":if (value == null)ProvinceID=null;else ProvinceID=Convert.ToInt32(value);break;
                case "DISTRICTID":if (value == null)DistrictID=null;else DistrictID=Convert.ToInt32(value);break;
                case "COUNTYID":if (value == null)CountyID=null;else CountyID=Convert.ToInt32(value);break;
                case "ADDRESSTYPEID":if (value == null)AddressTypeID=null;else AddressTypeID=Convert.ToInt32(value);break;
                case "CITYTYPEID":if (value == null)CityTypeID=null;else CityTypeID=Convert.ToInt32(value);break;
                case "STREETTYPEID":if (value == null)StreetTypeID=null;else StreetTypeID=Convert.ToInt32(value);break;
                case "ADDRESSFORMAT":if (value == null)AddressFormat=null;else AddressFormat=Convert.ToInt32(value);break;
                case "SYSTEM":System=(string)value;break;
                case "ENTITYNAME":EntityName=(string)value;break;
                case "ID":if (value == null)ID=null;else ID=Convert.ToInt32(value);break;
                case "PARENTID":if (value == null)ParentID=null;else ParentID=Convert.ToInt32(value);break;
                case "ERRFORMAT":ErrFormat=(string)value;break;
                case "LANG":lang=(string)value;break;
                }
            }
		}
		#endregion
	}
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Addresses_Response_SET",Namespace = "")]
	public class Addresses_Response_SET: BaseEntity, IModifiedTag
	{
         #region [Properties]
			/// <summary>
			/// Идентификатор истории адреса абонента
			/// <para/>
			/// Aadb_ID
			/// </summary>
			///<remarks>
			///Идентификатор истории адреса абонента
			///</remarks>
			[JsonProperty("ID")]
			[DataMember(Name="ID", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
            public global::System.Int32? ID 	{
		get 
		{ 
			if(emptyId.Equals(this.Id))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.Id, out result))
				return result; 
			else
            {
return 0;
            }
		}
		set { this.Id = value.ToString(); }
	}
			/// <summary>
			/// Указание языка для набора multi-language данных 
			/// <para/>
			/// Lang
			/// </summary>
			///<remarks>
			///Указание языка для набора multi-language данных 
			///</remarks>
			[JsonProperty("lang")]
			[DataMember(Name="lang", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
			[JsonIgnore]
            public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
			/// <summary>
			/// Признак передачи внешнего значения ID
			/// <para/>
			/// IsExternalID
			/// </summary>
			///<remarks>
			///Признак передачи внешнего значения ID
			///</remarks>
			[JsonProperty("IDType")]
			[DataMember(Name="IDType", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
            public global::System.Int32? IDType  { get; set; } = 0;
         #endregion
        [JsonIgnore]
	    public DateTime? If_Modified_Since { get {return null;}}
        #region [IDateModified]
        [JsonIgnore]
	    public DateTime? LastModified { get { return If_Modified_Since;}}
        #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "ID": return ID;
				    case "LANG": return lang;
				    case "IDTYPE": return IDType;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "ID":if (value == null)ID=null;else ID=Convert.ToInt32(value);break;
                case "LANG":lang=(string)value;break;
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                }
            }
		}
		#endregion
    }
#endregion
#region [Addresses/Sync]

	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Addresses_Sync_Request_ACTION",Namespace = "")]
	public class Addresses_Sync_Request_ACTION : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("DateEndSync")]
        [DataMember(Name="DateEndSync",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? DateEndSync  { get; set; }
              /// <summary>
        /// Формат вывода ошибки
	    ///<list type='bullet'>
///<item>
///	<description>'json'</description>
///</item>
///<item>
///	<description>'xml'</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : xml</para>
///<para>Max length : 25</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ErrFormat")]
        [DataMember(Name="ErrFormat",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ErrFormat     {
		get { return Format ?? "xml"; }
		set { this.Format = value; }
	}
              /// <summary>
        /// Указание языка для набора multi-language данных 
	    ///<list type='bullet'>
///<item>
///	<term>'uk' </term>
///	<description> -украинский</description>
///</item>
///<item>
///	<term>'ru' </term>
///	<description> -руский </description>
///</item>
///<item>
///	<term>'en' </term>
///	<description> -английский</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("lang")]
        [DataMember(Name="lang",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
			[JsonIgnore]
	public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
              /// <summary>
        /// Пользователь, изменивший запись
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("wev_User")]
        [DataMember(Name="wev_User",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String wev_User  { get; set; }
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "DATEENDSYNC": return DateEndSync;
				    case "ERRFORMAT": return ErrFormat;
				    case "LANG": return lang;
				    case "WEV_USER": return wev_User;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "DATEENDSYNC":if (value == null)DateEndSync=null;else DateEndSync=Convert.ToDateTime(value);break;
                case "ERRFORMAT":ErrFormat=(string)value;break;
                case "LANG":lang=(string)value;break;
                case "WEV_USER":wev_User=(string)value;break;
                }
            }
		}
		#endregion
	}
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Addresses_Sync_Response_ACTION",Namespace = "")]
	public class Addresses_Sync_Response_ACTION: BaseEntity, IModifiedTag
	{
         #region [Properties]
			/// <summary>
			/// Указание языка для набора multi-language данных 
			/// <para/>
			/// Lang
			/// </summary>
			///<remarks>
			///Указание языка для набора multi-language данных 
			///</remarks>
			[JsonProperty("lang")]
			[DataMember(Name="lang", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
			[JsonIgnore]
            public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
         #endregion
        [JsonIgnore]
	    public DateTime? If_Modified_Since { get {return null;}}
        #region [IDateModified]
        [JsonIgnore]
	    public DateTime? LastModified { get { return If_Modified_Since;}}
        #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                }
            }
		}
		#endregion
    }
#endregion
#region [Adjustments]
  
    
    ///<remarks>POST &lt;host&gt;[:&lt;port&gt;]/api/v1/bss/accounts/[parentid]/adjustments
///</remarks>
    ///Accounts
    [EntitySubentity("Accounts")]

	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Adjustments_Request_SET",Namespace = "")]
	public class Adjustments_Request_SET : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// Идентификатор другого лицевого счета-назначения для корректировки баланса С... НА... (Target Customer ID)
	    ///<list type='bullet'>
///<item>
///	<description>CLNT_ID из справочника CLIENT_HISTORIES</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("TransferTo")]
        [DataMember(Name="TransferTo",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? TransferTo  { get; set; }
              /// <summary>
        /// Сумма корректировки, включая налоги
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Amount")]
        [DataMember(Name="Amount",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Decimal? Amount  { get; set; }
              /// <summary>
        /// Признак аннулирования корректировки (1 - да, 0 - нет)
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - да</description>
///</item>
///<item>
///	<term>0 </term>
///	<description> - нет</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Annul")]
        [DataMember(Name="Annul",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? Annul  { get; set; }
              /// <summary>
        /// Идентификатор биллингового счета для корректировки 
	    ///<list type='bullet'>
///<item>
///	<description>BILL_ID из справочника BILLS</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("BillID")]
        [DataMember(Name="BillID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int64? BillID  { get; set; }
              /// <summary>
        /// Дата корректировки (по умолчанию - текущая дата)
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("EffectiveDate")]
        [DataMember(Name="EffectiveDate",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? EffectiveDate  { get; set; }
              /// <summary>
        /// Дата документа-основания для корректировки
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("DocDate")]
        [DataMember(Name="DocDate",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? DocDate  { get; set; }
              /// <summary>
        /// Номер документа-основания для корректировки
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("DocNum")]
        [DataMember(Name="DocNum",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String DocNum  { get; set; }
              /// <summary>
        /// Комментарий для корректировки
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Remark")]
        [DataMember(Name="Remark",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Remark  { get; set; }
              /// <summary>
        /// Идентификатор причины корректировки
	    ///<list type='bullet'>
///<item>
///	<description>AJRS_ID из справочника Adjust_reasons</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ReasonID")]
        [DataMember(Name="ReasonID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? ReasonID  { get; set; }
              /// <summary>
        /// Идентификатор типа корректировки
	    ///<list type='bullet'>
///<item>
///	<description>AJTP_ID из справочника Adjust_types</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("TypeID")]
        [DataMember(Name="TypeID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? TypeID  { get; set; }
              /// <summary>
        /// Идентификатор платежа для корректировки платежа клиента
	    ///<list type='bullet'>
///<item>
///	<description>PAY_ID из справочника PAYMENTS</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("PaymentID")]
        [DataMember(Name="PaymentID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int64? PaymentID  { get; set; }
              /// <summary>
        /// Признак передачи внешнего значения ID
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - внешний ID (для BIS всегда устанавливаем в 1)</description>
///</item>
///<item>
///	<term>0 </term>
///	<description> - внутренний ID</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 1</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("IDType")]
        [DataMember(Name="IDType",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? IDType  { get; set; } = 1;
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("TransferReasonID")]
        [DataMember(Name="TransferReasonID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? TransferReasonID  { get; set; }
              /// <summary>
        /// Пользователь данного изменения
	    ///<list type='bullet'>
///<item>
///	<term>Username </term>
///	<description> - пользователь из контекста</description>
///</item>
///<item>
///	<term>NULL </term>
///	<description> -если неизвестен</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedBy")]
        [DataMember(Name="ModifiedBy",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedBy  { get; set; }
              /// <summary>
        /// Источник данного изменения
	    ///<list type='bullet'>
///<item>
///	<term>IP </term>
///	<description> -адрес/имя компьютера</description>
///</item>
///<item>
///	<term>NULL </term>
///	<description> - если неизвестен</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedFrom")]
        [DataMember(Name="ModifiedFrom",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedFrom  { get; set; }
              /// <summary>
        /// Идентификатор начисления для корректировки начисления
	    ///<list type='bullet'>
///<item>
///	<description>CHRG_ID из справочника CHARGES</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ChargeID")]
        [DataMember(Name="ChargeID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int64? ChargeID  { get; set; }
              /// <summary>
        /// Идентификатор детали счета для корректировки начисления
	    ///<list type='bullet'>
///<item>
///	<description>DETG_ID из справочника DETAIL_GROUPS</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("DetailID")]
        [DataMember(Name="DetailID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? DetailID  { get; set; }
              /// <summary>
        /// Идентификатор лицевого счета (соответствует CustomerID)
	    ///<list type='bullet'>
///<item>
///	<description>CLNT_ID из справочника CLIENT_HISTORIES</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("ParentID")]
        [DataMember(Name="ParentID",EmitDefaultValue = false)]
		[JsonRestrictedByValue("<empty>")]

[SecondaryKey("Accounts_Request_SET","ID")]/*SET*/
	public global::System.Int32? ParentID 	{
		get 
		{ 
			if(emptyId.Equals(this.ParentId))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.ParentId, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.ParentId = value.ToString(); }
	}
              /// <summary>
        /// Уникальный идентификатор корректировки
	    ///<list type='bullet'>
///<item>
///	<description>AJMT_ID из справочника ADJUSTMENTS</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("ID")]
        [DataMember(Name="ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? ID 	{
		get 
		{ 
			if(emptyId.Equals(this.Id))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.Id, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.Id = value.ToString(); }
	}
              /// <summary>
        /// Название сущности REST, для которой выполняется POST операция
	    ///<list type='bullet'>
///<item>
///	<description>зарезервировано</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("EntityName")]
        [DataMember(Name="EntityName",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String EntityName { get; set; } = "<empty>";
              /// <summary>
        /// Формат вывода ошибки
	    ///<list type='bullet'>
///<item>
///	<description>'json'</description>
///</item>
///<item>
///	<description>'xml'</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : xml</para>
///<para>Max length : 25</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ErrFormat")]
        [DataMember(Name="ErrFormat",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ErrFormat     {
		get { return Format ?? "xml"; }
		set { this.Format = value; }
	}
              /// <summary>
        /// Указание языка для набора multi-language данных 
	    ///<list type='bullet'>
///<item>
///	<term>'uk' </term>
///	<description> -украинский</description>
///</item>
///<item>
///	<term>'ru' </term>
///	<description> -руский </description>
///</item>
///<item>
///	<term>'en' </term>
///	<description> -английский</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("lang")]
        [DataMember(Name="lang",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
			[JsonIgnore]
	public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
              /// <summary>
        /// Внешний идентификатор
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("aadj_ExternalID")]
        [DataMember(Name="aadj_ExternalID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? aadj_ExternalID  { get; set; }
              /// <summary>
        /// Идентификатор динамического типа
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("dnm_id")]
        [DataMember(Name="dnm_id",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? dnm_id  { get; set; }
              /// <summary>
        /// Идентификатор скидки
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("dsc_id")]
        [DataMember(Name="dsc_id",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? dsc_id  { get; set; }
              /// <summary>
        /// Идентификатор примененного порога скидки. Ссылка на DiscountValues
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("dsv_id")]
        [DataMember(Name="dsv_id",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? dsv_id  { get; set; }
              /// <summary>
        /// Идентификатор Extentions (Номера MSISDN)
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ExtentionID")]
        [DataMember(Name="ExtentionID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? ExtentionID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 1</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("NeedCheckPermission")]
        [DataMember(Name="NeedCheckPermission",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? NeedCheckPermission  { get; set; } = 1;
              /// <summary>
        /// Идентификатор устройства
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("NumberATS")]
        [DataMember(Name="NumberATS",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? NumberATS  { get; set; }
              /// <summary>
        /// Идентификатор пакета (биллинговый цикл)
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("pkt_ID")]
        [DataMember(Name="pkt_ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? pkt_ID  { get; set; }
              /// <summary>
        /// Идентификатор представления
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("rpr_id")]
        [DataMember(Name="rpr_id",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? rpr_id  { get; set; }
              /// <summary>
        /// Идентификатор технической услуги ""выписка счета
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ServiceID")]
        [DataMember(Name="ServiceID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? ServiceID  { get; set; }
              /// <summary>
        /// Идентификатор SourceString (ETLCDR) 
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ss_id")]
        [DataMember(Name="ss_id",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int64? ss_id  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Subscriber_ID")]
        [DataMember(Name="Subscriber_ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? Subscriber_ID  { get; set; }
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "TRANSFERTO": return TransferTo;
				    case "AMOUNT": return Amount;
				    case "ANNUL": return Annul;
				    case "BILLID": return BillID;
				    case "EFFECTIVEDATE": return EffectiveDate;
				    case "DOCDATE": return DocDate;
				    case "DOCNUM": return DocNum;
				    case "REMARK": return Remark;
				    case "REASONID": return ReasonID;
				    case "TYPEID": return TypeID;
				    case "PAYMENTID": return PaymentID;
				    case "IDTYPE": return IDType;
				    case "TRANSFERREASONID": return TransferReasonID;
				    case "MODIFIEDBY": return ModifiedBy;
				    case "MODIFIEDFROM": return ModifiedFrom;
				    case "CHARGEID": return ChargeID;
				    case "DETAILID": return DetailID;
				    case "PARENTID": return ParentID;
				    case "ID": return ID;
				    case "ENTITYNAME": return EntityName;
				    case "ERRFORMAT": return ErrFormat;
				    case "LANG": return lang;
				    case "AADJ_EXTERNALID": return aadj_ExternalID;
				    case "DNM_ID": return dnm_id;
				    case "DSC_ID": return dsc_id;
				    case "DSV_ID": return dsv_id;
				    case "EXTENTIONID": return ExtentionID;
				    case "NEEDCHECKPERMISSION": return NeedCheckPermission;
				    case "NUMBERATS": return NumberATS;
				    case "PKT_ID": return pkt_ID;
				    case "RPR_ID": return rpr_id;
				    case "SERVICEID": return ServiceID;
				    case "SS_ID": return ss_id;
				    case "SUBSCRIBER_ID": return Subscriber_ID;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "TRANSFERTO":if (value == null)TransferTo=null;else TransferTo=Convert.ToInt32(value);break;
                case "AMOUNT":if (value == null)Amount=null;else Amount=Convert.ToDecimal(value);break;
                case "ANNUL":if (value == null)Annul=null;else Annul=Convert.ToInt32(value);break;
                case "BILLID":if (value == null)BillID=null;else BillID=Convert.ToInt64(value);break;
                case "EFFECTIVEDATE":if (value == null)EffectiveDate=null;else EffectiveDate=Convert.ToDateTime(value);break;
                case "DOCDATE":if (value == null)DocDate=null;else DocDate=Convert.ToDateTime(value);break;
                case "DOCNUM":DocNum=(string)value;break;
                case "REMARK":Remark=(string)value;break;
                case "REASONID":if (value == null)ReasonID=null;else ReasonID=Convert.ToInt32(value);break;
                case "TYPEID":if (value == null)TypeID=null;else TypeID=Convert.ToInt32(value);break;
                case "PAYMENTID":if (value == null)PaymentID=null;else PaymentID=Convert.ToInt64(value);break;
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                case "TRANSFERREASONID":if (value == null)TransferReasonID=null;else TransferReasonID=Convert.ToInt32(value);break;
                case "MODIFIEDBY":ModifiedBy=(string)value;break;
                case "MODIFIEDFROM":ModifiedFrom=(string)value;break;
                case "CHARGEID":if (value == null)ChargeID=null;else ChargeID=Convert.ToInt64(value);break;
                case "DETAILID":if (value == null)DetailID=null;else DetailID=Convert.ToInt32(value);break;
                case "PARENTID":if (value == null)ParentID=null;else ParentID=Convert.ToInt32(value);break;
                case "ID":if (value == null)ID=null;else ID=Convert.ToInt32(value);break;
                case "ENTITYNAME":EntityName=(string)value;break;
                case "ERRFORMAT":ErrFormat=(string)value;break;
                case "LANG":lang=(string)value;break;
                case "AADJ_EXTERNALID":if (value == null)aadj_ExternalID=null;else aadj_ExternalID=Convert.ToInt32(value);break;
                case "DNM_ID":if (value == null)dnm_id=null;else dnm_id=Convert.ToInt32(value);break;
                case "DSC_ID":if (value == null)dsc_id=null;else dsc_id=Convert.ToInt32(value);break;
                case "DSV_ID":if (value == null)dsv_id=null;else dsv_id=Convert.ToInt32(value);break;
                case "EXTENTIONID":if (value == null)ExtentionID=null;else ExtentionID=Convert.ToInt32(value);break;
                case "NEEDCHECKPERMISSION":if (value == null)NeedCheckPermission=null;else NeedCheckPermission=Convert.ToInt32(value);break;
                case "NUMBERATS":if (value == null)NumberATS=null;else NumberATS=Convert.ToInt32(value);break;
                case "PKT_ID":if (value == null)pkt_ID=null;else pkt_ID=Convert.ToInt32(value);break;
                case "RPR_ID":if (value == null)rpr_id=null;else rpr_id=Convert.ToInt32(value);break;
                case "SERVICEID":if (value == null)ServiceID=null;else ServiceID=Convert.ToInt32(value);break;
                case "SS_ID":if (value == null)ss_id=null;else ss_id=Convert.ToInt64(value);break;
                case "SUBSCRIBER_ID":if (value == null)Subscriber_ID=null;else Subscriber_ID=Convert.ToInt32(value);break;
                }
            }
		}
		#endregion
	}
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Adjustments_Response_SET",Namespace = "")]
	public class Adjustments_Response_SET: BaseEntity, IModifiedTag
	{
         #region [Properties]
			/// <summary>
			/// Уникальный идентификатор корректировки
			/// <para/>
			/// Aadj_ID
			/// </summary>
			///<remarks>
			///Уникальный идентификатор корректировки
			///</remarks>
			[JsonProperty("ID")]
			[DataMember(Name="ID", EmitDefaultValue = false)]
			/*norestr*/

            public global::System.Int32? ID 	{
		get 
		{ 
			if(emptyId.Equals(this.Id))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.Id, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.Id = value.ToString(); }
	}
			/// <summary>
			/// Указание языка для набора multi-language данных 
			/// <para/>
			/// Lang
			/// </summary>
			///<remarks>
			///Указание языка для набора multi-language данных 
			///</remarks>
			[JsonProperty("lang")]
			[DataMember(Name="lang", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
			[JsonIgnore]
            public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
         #endregion
        [JsonIgnore]
	    public DateTime? If_Modified_Since { get {return null;}}
        #region [IDateModified]
        [JsonIgnore]
	    public DateTime? LastModified { get { return If_Modified_Since;}}
        #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "ID": return ID;
				    case "LANG": return lang;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "ID":if (value == null)ID=null;else ID=Convert.ToInt32(value);break;
                case "LANG":lang=(string)value;break;
                }
            }
		}
		#endregion
    }
#endregion
#region [Agreements]
  
    
    ///<remarks>POST &lt;host&gt;[:&lt;port&gt;]/api/v1/bss/subscribers/[id]/agreements
///</remarks>
    ///Subscribers
    [EntitySubentity("Subscribers")]

	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Agreements_Request_SET",Namespace = "")]
	public class Agreements_Request_SET : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// Эффективная дата для изменения подписки на Тарифный План, используется как DateSet для новых изменений подписки - смены Тарифного плана
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("EffectiveDate")]
        [DataMember(Name="EffectiveDate",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? EffectiveDate  { get; set; }
              /// <summary>
        /// Дополнительные параметры для provisioning (для каждой услуги отдельно)
	    ///<list type='bullet'>
///<item>
///	<description>json</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("TasksJsonData")]
        [DataMember(Name="TasksJsonData",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String TasksJsonData  { get; set; }
              /// <summary>
        /// Признак проверки достаточности баланса
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - подключать ТП только при наличии полной суммы АП</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("IsCheckBallance")]
        [DataMember(Name="IsCheckBallance",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? IsCheckBallance  { get; set; } = 0;
              /// <summary>
        /// Идентификатор шаблона
	    ///<list type='bullet'>
///<item>
///	<description>справочник PACK_ID</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("TemplateIDs")]
        [DataMember(Name="TemplateIDs",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? TemplateIDs  { get; set; } = 0;
              /// <summary>
        /// Идентификатор представления (техническая связка Agreements)
	    ///<list type='bullet'>
///<item>
///	<description>зарезервировано</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("RepresentationID")]
        [DataMember(Name="RepresentationID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? RepresentationID  { get; set; }
              /// <summary>
        /// Дата начала действия
	    ///<list type='bullet'>
///<item>
///	<description>дата начала действия (время 0:00:00)</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("DateStart")]
        [DataMember(Name="DateStart",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? DateStart  { get; set; }
              /// <summary>
        /// Пользователь данного изменения
	    ///<list type='bullet'>
///<item>
///	<term>Username </term>
///	<description> - пользователь из контекста</description>
///</item>
///<item>
///	<term>NULL </term>
///	<description> -если неизвестен</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedBy")]
        [DataMember(Name="ModifiedBy",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedBy  { get; set; }
              /// <summary>
        /// Источник данного изменения
	    ///<list type='bullet'>
///<item>
///	<term>IP </term>
///	<description> -адрес/имя компьютера</description>
///</item>
///<item>
///	<term>NULL </term>
///	<description> - если неизвестен</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedFrom")]
        [DataMember(Name="ModifiedFrom",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedFrom  { get; set; }
              /// <summary>
        /// Комментарий
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Remark")]
        [DataMember(Name="Remark",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Remark  { get; set; }
              /// <summary>
        /// Зарезервировано для Response
	    ///<list type='bullet'>
///<item>
///	<description>зарезервировано</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Entities")]
        [DataMember(Name="Entities",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Entities  { get; set; }
              /// <summary>
        /// Дата окончания действия
	    ///<list type='bullet'>
///<item>
///	<term>безсрочно </term>
///	<description> - 31.12.2999 23:59:59</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("DateEnd")]
        [DataMember(Name="DateEnd",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? DateEnd  { get; set; }
              /// <summary>
        /// Идентификатор тарифного плана
	    ///<list type='bullet'>
///<item>
///	<description>справочник RTPL_ID</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("PlanGroupID")]
        [DataMember(Name="PlanGroupID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? PlanGroupID  { get; set; }
              /// <summary>
        /// Признак передачи внешнего значения ID
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - внешний ID (для BIS всегда устанавливаем в 1)</description>
///</item>
///<item>
///	<term>0 </term>
///	<description> - внутренний ID</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 1</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("IDType")]
        [DataMember(Name="IDType",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? IDType  { get; set; } = 1;
              /// <summary>
        /// Идентификатор Абонента
	    ///<list type='bullet'>
///<item>
///	<description>SUBS_ID из справочника SUBSCRIBERS</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("ParentID")]
        [DataMember(Name="ParentID",EmitDefaultValue = false)]
		[JsonRestrictedByValue("<empty>")]

[SecondaryKey("Extentions_Request_SET","ID")]/*SET*/
	public global::System.Int32? ParentID 	{
		get 
		{ 
			if(emptyId.Equals(this.ParentId))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.ParentId, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.ParentId = value.ToString(); }
	}
              /// <summary>
        /// Идентификатор соглашения
	    ///<list type='bullet'>
///<item>
///	<description>используется для смены ТП</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("ID")]
        [DataMember(Name="ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? ID 	{
		get 
		{ 
			if(emptyId.Equals(this.Id))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.Id, out result))
				return result; 
			else
            {
return 0;
            }
		}
		set { this.Id = value.ToString(); }
	}
    //Base Attrribute '' skipped
          /// <summary>
        /// Формат вывода ошибки
	    ///<list type='bullet'>
///<item>
///	<description>'json'</description>
///</item>
///<item>
///	<description>'xml'</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : xml</para>
///<para>Max length : 25</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ErrFormat")]
        [DataMember(Name="ErrFormat",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ErrFormat     {
		get { return Format ?? "xml"; }
		set { this.Format = value; }
	}
              /// <summary>
        /// Сценарий подключения пакетов
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Activate")]
        [DataMember(Name="Activate",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Activate  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Agr_ID_Old")]
        [DataMember(Name="Agr_ID_Old",EmitDefaultValue = false)]
		/*norestr*/
[DocIgnore]

	public global::System.Int32? Agr_ID_Old  { get; set; }
              /// <summary>
        /// Сценарий отключения пакетов
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Cancel")]
        [DataMember(Name="Cancel",EmitDefaultValue = false)]
		/*norestr*/
[DocIgnore]

	public global::System.String Cancel  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Grt_ID_New")]
        [DataMember(Name="Grt_ID_New",EmitDefaultValue = false)]
		/*norestr*/
[DocIgnore]

	public global::System.Int32? Grt_ID_New  { get; set; }
              /// <summary>
        /// Режим подключения Пакетов и услуг
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Mode")]
        [DataMember(Name="Mode",EmitDefaultValue = false)]
		/*norestr*/
[DocIgnore]

	public global::System.String Mode  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Rtb_IDs")]
        [DataMember(Name="Rtb_IDs",EmitDefaultValue = false)]
		/*norestr*/
[DocIgnore]

	public global::System.String Rtb_IDs  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Services")]
        [DataMember(Name="Services",EmitDefaultValue = false)]
		/*norestr*/
[DocIgnore]

	public global::System.String Services  { get; set; }
              /// <summary>
        /// Признак первичной активации или изменения существующей подписки
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("TariffBegin")]
        [DataMember(Name="TariffBegin",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? TariffBegin  { get; set; }
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "EFFECTIVEDATE": return EffectiveDate;
				    case "TASKSJSONDATA": return TasksJsonData;
				    case "ISCHECKBALLANCE": return IsCheckBallance;
				    case "TEMPLATEIDS": return TemplateIDs;
				    case "REPRESENTATIONID": return RepresentationID;
				    case "DATESTART": return DateStart;
				    case "MODIFIEDBY": return ModifiedBy;
				    case "MODIFIEDFROM": return ModifiedFrom;
				    case "REMARK": return Remark;
				    case "ENTITIES": return Entities;
				    case "DATEEND": return DateEnd;
				    case "PLANGROUPID": return PlanGroupID;
				    case "IDTYPE": return IDType;
				    case "PARENTID": return ParentID;
				    case "ID": return ID;
				    case "LANG": return Lang;
				    case "ERRFORMAT": return ErrFormat;
				    case "ACTIVATE": return Activate;
				    case "AGR_ID_OLD": return Agr_ID_Old;
				    case "CANCEL": return Cancel;
				    case "GRT_ID_NEW": return Grt_ID_New;
				    case "MODE": return Mode;
				    case "RTB_IDS": return Rtb_IDs;
				    case "SERVICES": return Services;
				    case "TARIFFBEGIN": return TariffBegin;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "EFFECTIVEDATE":if (value == null)EffectiveDate=null;else EffectiveDate=Convert.ToDateTime(value);break;
                case "TASKSJSONDATA":TasksJsonData=(string)value;break;
                case "ISCHECKBALLANCE":if (value == null)IsCheckBallance=null;else IsCheckBallance=Convert.ToInt32(value);break;
                case "TEMPLATEIDS":if (value == null)TemplateIDs=null;else TemplateIDs=Convert.ToInt32(value);break;
                case "REPRESENTATIONID":if (value == null)RepresentationID=null;else RepresentationID=Convert.ToInt32(value);break;
                case "DATESTART":if (value == null)DateStart=null;else DateStart=Convert.ToDateTime(value);break;
                case "MODIFIEDBY":ModifiedBy=(string)value;break;
                case "MODIFIEDFROM":ModifiedFrom=(string)value;break;
                case "REMARK":Remark=(string)value;break;
                case "ENTITIES":Entities=(string)value;break;
                case "DATEEND":if (value == null)DateEnd=null;else DateEnd=Convert.ToDateTime(value);break;
                case "PLANGROUPID":if (value == null)PlanGroupID=null;else PlanGroupID=Convert.ToInt32(value);break;
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                case "PARENTID":if (value == null)ParentID=null;else ParentID=Convert.ToInt32(value);break;
                case "ID":if (value == null)ID=null;else ID=Convert.ToInt32(value);break;
                case "LANG":Lang=(string)value;break;
                case "ERRFORMAT":ErrFormat=(string)value;break;
                case "ACTIVATE":Activate=(string)value;break;
                case "AGR_ID_OLD":if (value == null)Agr_ID_Old=null;else Agr_ID_Old=Convert.ToInt32(value);break;
                case "CANCEL":Cancel=(string)value;break;
                case "GRT_ID_NEW":if (value == null)Grt_ID_New=null;else Grt_ID_New=Convert.ToInt32(value);break;
                case "MODE":Mode=(string)value;break;
                case "RTB_IDS":Rtb_IDs=(string)value;break;
                case "SERVICES":Services=(string)value;break;
                case "TARIFFBEGIN":if (value == null)TariffBegin=null;else TariffBegin=Convert.ToInt32(value);break;
                }
            }
		}
		#endregion
	}
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Agreements_Response_SET",Namespace = "")]
	public class Agreements_Response_SET: BaseEntity, IModifiedTag
	{
         #region [Properties]
			/// <summary>
			/// Идентификатор соглашения
			/// <para/>
			/// Agr_ID
			/// </summary>
			///<remarks>
			///Идентификатор соглашения
			///</remarks>
			[JsonProperty("ID")]
			[DataMember(Name="ID", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
            public global::System.Int32? ID 	{
		get 
		{ 
			if(emptyId.Equals(this.Id))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.Id, out result))
				return result; 
			else
            {
return 0;
            }
		}
		set { this.Id = value.ToString(); }
	}
			/// <summary>
			/// Список сущностей, созданных в результате выполнения операции
			/// <para/>
			/// Entities
			/// </summary>
			///<remarks>
			///Список сущностей, созданных в результате выполнения операции
			///</remarks>
			[JsonProperty("Entities")]
			[DataMember(Name="Entities", EmitDefaultValue = false)]
			/*norestr*/

            public global::System.String Entities  { get; set; }
			/// <summary>
			/// Признак передачи внешнего значения ID
			/// <para/>
			/// IsExternalID
			/// </summary>
			///<remarks>
			///Признак передачи внешнего значения ID
			///</remarks>
			[JsonProperty("IDType")]
			[DataMember(Name="IDType", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
            public global::System.Int32? IDType  { get; set; } = 1;
//Base Attrribute '' skipped
         #endregion
        [JsonIgnore]
	    public DateTime? If_Modified_Since { get {return null;}}
        #region [IDateModified]
        [JsonIgnore]
	    public DateTime? LastModified { get { return If_Modified_Since;}}
        #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "ID": return ID;
				    case "ENTITIES": return Entities;
				    case "IDTYPE": return IDType;
				    case "LANG": return Lang;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "ID":if (value == null)ID=null;else ID=Convert.ToInt32(value);break;
                case "ENTITIES":Entities=(string)value;break;
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                case "LANG":Lang=(string)value;break;
                }
            }
		}
		#endregion
    }
#endregion
#region [Agreements/ChangeTariffs]

	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Agreements_ChangeTariffs_Request_ACTION",Namespace = "")]
	public class Agreements_ChangeTariffs_Request_ACTION : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// Сценарий подключения пакетов
	    ///<list type='bullet'>
///<item>
///	<description>JSON</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Activate")]
        [DataMember(Name="Activate",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Activate  { get; set; }
              /// <summary>
        /// Сценарий отключения пакетов
	    ///<list type='bullet'>
///<item>
///	<description>JSON</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Cancel")]
        [DataMember(Name="Cancel",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Cancel  { get; set; }
              /// <summary>
        /// Дата окончания подписки новых пакетов и услуг
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("DateEnd")]
        [DataMember(Name="DateEnd",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? DateEnd  { get; set; }
              /// <summary>
        /// Дата смены подписки старых пакетов на новые пакеты
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("DateStart")]
        [DataMember(Name="DateStart",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? DateStart  { get; set; }
              /// <summary>
        /// Дата начала подписок при подключении акционных пакетов ""задним"" числом
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("EffectiveDate")]
        [DataMember(Name="EffectiveDate",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? EffectiveDate  { get; set; }
              /// <summary>
        /// Зарезервировано 
	    ///<list type='bullet'>
///<item>
///	<description>зарезервировано</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Entities")]
        [DataMember(Name="Entities",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Entities  { get; set; }
              /// <summary>
        /// Формат вывода ошибки
	    ///<list type='bullet'>
///<item>
///	<description>'json'</description>
///</item>
///<item>
///	<description>'xml'</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : xml</para>
///<para>Max length : 25</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ErrFormat")]
        [DataMember(Name="ErrFormat",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ErrFormat     {
		get { return Format ?? "xml"; }
		set { this.Format = value; }
	}
              /// <summary>
        /// Признак передачи внешнего значения ID
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - внешний ID (для BIS всегда устанавливаем в 1)</description>
///</item>
///<item>
///	<term>0 </term>
///	<description> - внутренний ID</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 1</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("IDType")]
        [DataMember(Name="IDType",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? IDType  { get; set; } = 1;
              /// <summary>
        /// Признак проверки баланса при подключении Пакетов
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - проверять достаточность баланса</description>
///</item>
///<item>
///	<term>0 </term>
///	<description> - не проверять</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("IsCheckBallance")]
        [DataMember(Name="IsCheckBallance",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? IsCheckBallance  { get; set; } = 0;
              /// <summary>
        /// Указание языка для набора multi-language данных 
	    ///<list type='bullet'>
///<item>
///	<term>'uk' </term>
///	<description> -украинский</description>
///</item>
///<item>
///	<term>'ru' </term>
///	<description> -руский </description>
///</item>
///<item>
///	<term>'en' </term>
///	<description> -английский</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 'uk'</para>
///<para>Max length : 3</para>
///<para>Mandatory : Yes</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("lang")]
        [DataMember(Name="lang",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
			[JsonIgnore]
	public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
              /// <summary>
        /// Режим подключения Пакетов и услуг
	    ///<list type='bullet'>
///<item>
///	<description>Доступные значение: Replace</description>
///</item>
///<item>
///	<description>Add (по умолчанию)</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Mode")]
        [DataMember(Name="Mode",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Mode  { get; set; }
              /// <summary>
        /// Пользователь данного изменения
	    ///<list type='bullet'>
///<item>
///	<term>Username </term>
///	<description> - пользователь из контекста</description>
///</item>
///<item>
///	<term>NULL </term>
///	<description> -если неизвестен</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedBy")]
        [DataMember(Name="ModifiedBy",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedBy  { get; set; }
              /// <summary>
        /// Источник данного изменения
	    ///<list type='bullet'>
///<item>
///	<term>IP </term>
///	<description> -адрес/имя компьютера</description>
///</item>
///<item>
///	<term>NULL </term>
///	<description> - если неизвестен</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedFrom")]
        [DataMember(Name="ModifiedFrom",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedFrom  { get; set; }
              /// <summary>
        /// Идентификатор соглашения с абонентом
	    ///<list type='bullet'>
///<item>
///	<description>идентификатор AGR_ID</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("ParentID")]
        [DataMember(Name="ParentID",EmitDefaultValue = false)]
		[JsonRestrictedByValue("<empty>")]

			[Required]
[SecondaryKey("Agreements_Request_SET","ID")]/*ACTION*/
	public global::System.Int32? ParentID 	{
		get 
		{ 
			if(emptyId.Equals(this.ParentId))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.ParentId, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.ParentId = value.ToString(); }
	}
              /// <summary>
        /// Идентификатор Тарифного Плана
	    ///<list type='bullet'>
///<item>
///	<description>идентификатор RTPL_ID из справочника RATE_PLANS</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("PlanGroupID")]
        [DataMember(Name="PlanGroupID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? PlanGroupID  { get; set; }
              /// <summary>
        /// Комментарий изменения
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Remark")]
        [DataMember(Name="Remark",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Remark  { get; set; }
              /// <summary>
        /// Признак применения тарифных условий
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - применять Тарифы активации</description>
///</item>
///<item>
///	<term>0 </term>
///	<description> - применять Тарифы замены Паткетов</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("TariffBegin")]
        [DataMember(Name="TariffBegin",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? TariffBegin  { get; set; }
              /// <summary>
        /// Дополнительные параметры провижилнинга услуг
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("TasksJsonData")]
        [DataMember(Name="TasksJsonData",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String TasksJsonData  { get; set; }
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "ACTIVATE": return Activate;
				    case "CANCEL": return Cancel;
				    case "DATEEND": return DateEnd;
				    case "DATESTART": return DateStart;
				    case "EFFECTIVEDATE": return EffectiveDate;
				    case "ENTITIES": return Entities;
				    case "ERRFORMAT": return ErrFormat;
				    case "IDTYPE": return IDType;
				    case "ISCHECKBALLANCE": return IsCheckBallance;
				    case "LANG": return lang;
				    case "MODE": return Mode;
				    case "MODIFIEDBY": return ModifiedBy;
				    case "MODIFIEDFROM": return ModifiedFrom;
				    case "PARENTID": return ParentID;
				    case "PLANGROUPID": return PlanGroupID;
				    case "REMARK": return Remark;
				    case "TARIFFBEGIN": return TariffBegin;
				    case "TASKSJSONDATA": return TasksJsonData;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "ACTIVATE":Activate=(string)value;break;
                case "CANCEL":Cancel=(string)value;break;
                case "DATEEND":if (value == null)DateEnd=null;else DateEnd=Convert.ToDateTime(value);break;
                case "DATESTART":if (value == null)DateStart=null;else DateStart=Convert.ToDateTime(value);break;
                case "EFFECTIVEDATE":if (value == null)EffectiveDate=null;else EffectiveDate=Convert.ToDateTime(value);break;
                case "ENTITIES":Entities=(string)value;break;
                case "ERRFORMAT":ErrFormat=(string)value;break;
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                case "ISCHECKBALLANCE":if (value == null)IsCheckBallance=null;else IsCheckBallance=Convert.ToInt32(value);break;
                case "LANG":lang=(string)value;break;
                case "MODE":Mode=(string)value;break;
                case "MODIFIEDBY":ModifiedBy=(string)value;break;
                case "MODIFIEDFROM":ModifiedFrom=(string)value;break;
                case "PARENTID":if (value == null)ParentID=null;else ParentID=Convert.ToInt32(value);break;
                case "PLANGROUPID":if (value == null)PlanGroupID=null;else PlanGroupID=Convert.ToInt32(value);break;
                case "REMARK":Remark=(string)value;break;
                case "TARIFFBEGIN":if (value == null)TariffBegin=null;else TariffBegin=Convert.ToInt32(value);break;
                case "TASKSJSONDATA":TasksJsonData=(string)value;break;
                }
            }
		}
		#endregion
	}
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Agreements_ChangeTariffs_Response_ACTION",Namespace = "")]
	public class Agreements_ChangeTariffs_Response_ACTION: BaseEntity, IModifiedTag
	{
         #region [Properties]
			/// <summary>
			/// Список сущностей, созданных в результате выполнения операции
			/// <para/>
			/// Entities
			/// </summary>
			///<remarks>
			///Список сущностей, созданных в результате выполнения операции
			///</remarks>
			[JsonProperty("Entities")]
			[DataMember(Name="Entities", EmitDefaultValue = false)]
			/*norestr*/

            public global::System.String Entities  { get; set; }
			/// <summary>
			/// Идентификатор соглашения с абонентом
			/// <para/>
			/// Agr_ID
			/// </summary>
			///<remarks>
			///Идентификатор соглашения с абонентом
			///</remarks>
			[JsonProperty("ID")]
			[DataMember(Name="ID", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
            public global::System.Int32? ID 	{
		get 
		{ 
			if(emptyId.Equals(this.Id))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.Id, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.Id = value.ToString(); }
	}
			/// <summary>
			/// Признак передачи внешнего значения ID
			/// <para/>
			/// IsExternalID
			/// </summary>
			///<remarks>
			///Признак передачи внешнего значения ID
			///</remarks>
			[JsonProperty("IDType")]
			[DataMember(Name="IDType", EmitDefaultValue = false)]
			/*norestr*/

            public global::System.Int32? IDType  { get; set; } = 1;
			/// <summary>
			/// Указание языка для набора multi-language данных 
			/// <para/>
			/// Lang
			/// </summary>
			///<remarks>
			///Указание языка для набора multi-language данных 
			///</remarks>
			[JsonProperty("lang")]
			[DataMember(Name="lang", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
			[JsonIgnore]
            public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
         #endregion
        [JsonIgnore]
	    public DateTime? If_Modified_Since { get {return null;}}
        #region [IDateModified]
        [JsonIgnore]
	    public DateTime? LastModified { get { return If_Modified_Since;}}
        #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                }
            }
		}
		#endregion
    }
#endregion
#region [Associations]
  
    
    ///<remarks>GET &lt;host&gt;[:&lt;port&gt;]/api/v1/bss/Associations
///</remarks>
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Associations_Request_GET",Namespace = "")]
	public class Associations_Request_GET : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// Режим подключения Пакетов и услуг
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("mode")]
        [DataMember(Name="mode",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? mode  { get; set; } = 0;
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("Ntw_ID")]
        [DataMember(Name="Ntw_ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? Ntw_ID  { get; set; } = 0;
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 1</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("PageNumber")]
        [DataMember(Name="PageNumber",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? PageNumber  { get; set; } = 1;
              /// <summary>
        /// Кол-во записей на странице (server paging)
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 50</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("PageSize")]
        [DataMember(Name="PageSize",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? PageSize  { get; set; } = 50;
              /// <summary>
        /// Тип профиля
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ProfileType")]
        [DataMember(Name="ProfileType",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? ProfileType  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("Rgsc_ID")]
        [DataMember(Name="Rgsc_ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? Rgsc_ID  { get; set; } = 0;
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ShowBalances")]
        [DataMember(Name="ShowBalances",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? ShowBalances  { get; set; } = 0;
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ShowEntities")]
        [DataMember(Name="ShowEntities",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ShowEntities  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("SortColumn")]
        [DataMember(Name="SortColumn",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String SortColumn  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : ASC</para>
///<para>Max length : 20</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("SortDirection")]
        [DataMember(Name="SortDirection",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String SortDirection  { get; set; } = "ASC";
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("Srv_ID")]
        [DataMember(Name="Srv_ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? Srv_ID  { get; set; } = 0;
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("Srv_Name")]
        [DataMember(Name="Srv_Name",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Srv_Name  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("Sst_ID")]
        [DataMember(Name="Sst_ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? Sst_ID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("tnst_Code")]
        [DataMember(Name="tnst_Code",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String tnst_Code  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("trf_ID")]
        [DataMember(Name="trf_ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? trf_ID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("LastModifiedDate")]
        [DataMember(Name="LastModifiedDate",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? LastModifiedDate  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("Cntr_Name")]
        [DataMember(Name="Cntr_Name",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Cntr_Name  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("abn_Employee_ID")]
        [DataMember(Name="abn_Employee_ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String abn_Employee_ID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("abn_ExternalID")]
        [DataMember(Name="abn_ExternalID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? abn_ExternalID  { get; set; }
              /// <summary>
        /// Идентификатор Абонента
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ID")]
        [DataMember(Name="ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? ID 	{
		get 
		{ 
			if(emptyId.Equals(this.Id))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.Id, out result))
				return result; 
			else
            {
return 0;
            }
		}
		set { this.Id = value.ToString(); }
	}
              /// <summary>
        /// Идентификатор Ассоциации или корня 
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ParentID")]
        [DataMember(Name="ParentID",EmitDefaultValue = false)]
		[JsonRestrictedByValue("<empty>")]

	public global::System.Int32? ParentID 	{
		get 
		{ 
			if(emptyId.Equals(this.ParentId))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.ParentId, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.ParentId = value.ToString(); }
	}
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("abn_IsExistAD")]
        [DataMember(Name="abn_IsExistAD",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? abn_IsExistAD  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("abn_LastName")]
        [DataMember(Name="abn_LastName",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String abn_LastName  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("abn_WorkPlace")]
        [DataMember(Name="abn_WorkPlace",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String abn_WorkPlace  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("Acat_ID")]
        [DataMember(Name="Acat_ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? Acat_ID  { get; set; } = 0;
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("Accl_ID")]
        [DataMember(Name="Accl_ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? Accl_ID  { get; set; } = 0;
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("Acnt_Number")]
        [DataMember(Name="Acnt_Number",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Acnt_Number  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("Actp_ID")]
        [DataMember(Name="Actp_ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? Actp_ID  { get; set; } = 0;
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("Adlsb_Code")]
        [DataMember(Name="Adlsb_Code",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? Adlsb_Code  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("Aptp_ID")]
        [DataMember(Name="Aptp_ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? Aptp_ID  { get; set; } = 0;
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("aut_NameAuthCode")]
        [DataMember(Name="aut_NameAuthCode",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String aut_NameAuthCode  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("Bac_Number")]
        [DataMember(Name="Bac_Number",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Bac_Number  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("bll_Number")]
        [DataMember(Name="bll_Number",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String bll_Number  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("BossLastName")]
        [DataMember(Name="BossLastName",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String BossLastName  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("com_ID")]
        [DataMember(Name="com_ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? com_ID  { get; set; } = 0;
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("dep_ID")]
        [DataMember(Name="dep_ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? dep_ID  { get; set; } = 0;
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("Dls_ID")]
        [DataMember(Name="Dls_ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? Dls_ID  { get; set; } = 0;
              /// <summary>
        /// Формат вывода ошибки
	    ///<list type='bullet'>
///<item>
///	<description>'json'</description>
///</item>
///<item>
///	<description>'xml'</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : xml</para>
///<para>Max length : 25</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ErrFormat")]
        [DataMember(Name="ErrFormat",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ErrFormat     {
		get { return Format ?? "xml"; }
		set { this.Format = value; }
	}
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ext_ExtNum")]
        [DataMember(Name="ext_ExtNum",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ext_ExtNum  { get; set; }
    //Base Attrribute '' skipped
          /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("grp_ID")]
        [DataMember(Name="grp_ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? grp_ID  { get; set; } = 0;
              /// <summary>
        /// Признак передачи внешнего значения ID
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - внешний ID (для BIS всегда устанавливаем в 1)</description>
///</item>
///<item>
///	<term>0 </term>
///	<description> - внутренний ID</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("IDType")]
        [DataMember(Name="IDType",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? IDType  { get; set; } = 0;
              /// <summary>
        /// Дата модификации для http-тега If-Modified-Since
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("CacheControlDate")]
        [DataMember(Name="CacheControlDate",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? CacheControlDate  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("jsonFieldsName")]
        [DataMember(Name="jsonFieldsName",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String jsonFieldsName  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("jsonFilter")]
        [DataMember(Name="jsonFilter",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String jsonFilter  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("jsonFilterContain")]
        [DataMember(Name="jsonFilterContain",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? jsonFilterContain  { get; set; } = 0;
              /// <summary>
        /// Указание языка для набора multi-language данных 
	    ///<list type='bullet'>
///<item>
///	<term>'uk' </term>
///	<description> -украинский</description>
///</item>
///<item>
///	<term>'ru' </term>
///	<description> -руский </description>
///</item>
///<item>
///	<term>'en' </term>
///	<description> -английский</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("lang")]
        [DataMember(Name="lang",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
			[JsonIgnore]
	public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("Lng_ID")]
        [DataMember(Name="Lng_ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? Lng_ID  { get; set; }
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "MODE": return mode;
				    case "NTW_ID": return Ntw_ID;
				    case "PAGENUMBER": return PageNumber;
				    case "PAGESIZE": return PageSize;
				    case "PROFILETYPE": return ProfileType;
				    case "RGSC_ID": return Rgsc_ID;
				    case "SHOWBALANCES": return ShowBalances;
				    case "SHOWENTITIES": return ShowEntities;
				    case "SORTCOLUMN": return SortColumn;
				    case "SORTDIRECTION": return SortDirection;
				    case "SRV_ID": return Srv_ID;
				    case "SRV_NAME": return Srv_Name;
				    case "SST_ID": return Sst_ID;
				    case "TNST_CODE": return tnst_Code;
				    case "TRF_ID": return trf_ID;
				    case "LASTMODIFIEDDATE": return LastModifiedDate;
				    case "CNTR_NAME": return Cntr_Name;
				    case "ABN_EMPLOYEE_ID": return abn_Employee_ID;
				    case "ABN_EXTERNALID": return abn_ExternalID;
				    case "ID": return ID;
				    case "PARENTID": return ParentID;
				    case "ABN_ISEXISTAD": return abn_IsExistAD;
				    case "ABN_LASTNAME": return abn_LastName;
				    case "ABN_WORKPLACE": return abn_WorkPlace;
				    case "ACAT_ID": return Acat_ID;
				    case "ACCL_ID": return Accl_ID;
				    case "ACNT_NUMBER": return Acnt_Number;
				    case "ACTP_ID": return Actp_ID;
				    case "ADLSB_CODE": return Adlsb_Code;
				    case "APTP_ID": return Aptp_ID;
				    case "AUT_NAMEAUTHCODE": return aut_NameAuthCode;
				    case "BAC_NUMBER": return Bac_Number;
				    case "BLL_NUMBER": return bll_Number;
				    case "BOSSLASTNAME": return BossLastName;
				    case "COM_ID": return com_ID;
				    case "DEP_ID": return dep_ID;
				    case "DLS_ID": return Dls_ID;
				    case "ERRFORMAT": return ErrFormat;
				    case "EXT_EXTNUM": return ext_ExtNum;
				    case "FORMAT": return Format;
				    case "GRP_ID": return grp_ID;
				    case "IDTYPE": return IDType;
				    case "CACHECONTROLDATE": return CacheControlDate;
				    case "JSONFIELDSNAME": return jsonFieldsName;
				    case "JSONFILTER": return jsonFilter;
				    case "JSONFILTERCONTAIN": return jsonFilterContain;
				    case "LANG": return lang;
				    case "LNG_ID": return Lng_ID;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "MODE":if (value == null)mode=null;else mode=Convert.ToInt32(value);break;
                case "NTW_ID":if (value == null)Ntw_ID=null;else Ntw_ID=Convert.ToInt32(value);break;
                case "PAGENUMBER":if (value == null)PageNumber=null;else PageNumber=Convert.ToInt32(value);break;
                case "PAGESIZE":if (value == null)PageSize=null;else PageSize=Convert.ToInt32(value);break;
                case "PROFILETYPE":if (value == null)ProfileType=null;else ProfileType=Convert.ToInt32(value);break;
                case "RGSC_ID":if (value == null)Rgsc_ID=null;else Rgsc_ID=Convert.ToInt32(value);break;
                case "SHOWBALANCES":if (value == null)ShowBalances=null;else ShowBalances=Convert.ToInt32(value);break;
                case "SHOWENTITIES":ShowEntities=(string)value;break;
                case "SORTCOLUMN":SortColumn=(string)value;break;
                case "SORTDIRECTION":SortDirection=(string)value;break;
                case "SRV_ID":if (value == null)Srv_ID=null;else Srv_ID=Convert.ToInt32(value);break;
                case "SRV_NAME":Srv_Name=(string)value;break;
                case "SST_ID":if (value == null)Sst_ID=null;else Sst_ID=Convert.ToInt32(value);break;
                case "TNST_CODE":tnst_Code=(string)value;break;
                case "TRF_ID":if (value == null)trf_ID=null;else trf_ID=Convert.ToInt32(value);break;
                case "LASTMODIFIEDDATE":if (value == null)LastModifiedDate=null;else LastModifiedDate=Convert.ToDateTime(value);break;
                case "CNTR_NAME":Cntr_Name=(string)value;break;
                case "ABN_EMPLOYEE_ID":abn_Employee_ID=(string)value;break;
                case "ABN_EXTERNALID":if (value == null)abn_ExternalID=null;else abn_ExternalID=Convert.ToInt32(value);break;
                case "ID":if (value == null)ID=null;else ID=Convert.ToInt32(value);break;
                case "PARENTID":if (value == null)ParentID=null;else ParentID=Convert.ToInt32(value);break;
                case "ABN_ISEXISTAD":if (value == null)abn_IsExistAD=null;else abn_IsExistAD=Convert.ToInt32(value);break;
                case "ABN_LASTNAME":abn_LastName=(string)value;break;
                case "ABN_WORKPLACE":abn_WorkPlace=(string)value;break;
                case "ACAT_ID":if (value == null)Acat_ID=null;else Acat_ID=Convert.ToInt32(value);break;
                case "ACCL_ID":if (value == null)Accl_ID=null;else Accl_ID=Convert.ToInt32(value);break;
                case "ACNT_NUMBER":Acnt_Number=(string)value;break;
                case "ACTP_ID":if (value == null)Actp_ID=null;else Actp_ID=Convert.ToInt32(value);break;
                case "ADLSB_CODE":if (value == null)Adlsb_Code=null;else Adlsb_Code=Convert.ToInt32(value);break;
                case "APTP_ID":if (value == null)Aptp_ID=null;else Aptp_ID=Convert.ToInt32(value);break;
                case "AUT_NAMEAUTHCODE":aut_NameAuthCode=(string)value;break;
                case "BAC_NUMBER":Bac_Number=(string)value;break;
                case "BLL_NUMBER":bll_Number=(string)value;break;
                case "BOSSLASTNAME":BossLastName=(string)value;break;
                case "COM_ID":if (value == null)com_ID=null;else com_ID=Convert.ToInt32(value);break;
                case "DEP_ID":if (value == null)dep_ID=null;else dep_ID=Convert.ToInt32(value);break;
                case "DLS_ID":if (value == null)Dls_ID=null;else Dls_ID=Convert.ToInt32(value);break;
                case "ERRFORMAT":ErrFormat=(string)value;break;
                case "EXT_EXTNUM":ext_ExtNum=(string)value;break;
                case "FORMAT":Format=(string)value;break;
                case "GRP_ID":if (value == null)grp_ID=null;else grp_ID=Convert.ToInt32(value);break;
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                case "CACHECONTROLDATE":if (value == null)CacheControlDate=null;else CacheControlDate=Convert.ToDateTime(value);break;
                case "JSONFIELDSNAME":jsonFieldsName=(string)value;break;
                case "JSONFILTER":jsonFilter=(string)value;break;
                case "JSONFILTERCONTAIN":if (value == null)jsonFilterContain=null;else jsonFilterContain=Convert.ToInt32(value);break;
                case "LANG":lang=(string)value;break;
                case "LNG_ID":if (value == null)Lng_ID=null;else Lng_ID=Convert.ToInt32(value);break;
                }
            }
		}
		#endregion
	}
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Associations_Response_GET",Namespace = "")]
	public class Associations_Response_GET: BaseEntity, IModifiedTag
	{
         #region [Properties]
			/// <summary>
			/// Дата модификации для http-тега If-Modified-Since
			/// <para/>
			/// IfModifiedSinceDate
			/// </summary>
			///<remarks>
			///Дата модификации для http-тега If-Modified-Since
			///</remarks>
			[JsonProperty("CacheControlDate")]
			[DataMember(Name="CacheControlDate", EmitDefaultValue = false)]
			/*norestr*/

            public global::System.DateTime? CacheControlDate  { get; set; }
			/// <summary>
			/// Указание языка для набора multi-language данных 
			/// <para/>
			/// Lang
			/// </summary>
			///<remarks>
			///Указание языка для набора multi-language данных 
			///</remarks>
			[JsonProperty("lang")]
			[DataMember(Name="lang", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
			[JsonIgnore]
            public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
         #endregion
        [JsonIgnore]
	    public DateTime? If_Modified_Since { get {return CacheControlDate;}}
        #region [IDateModified]
        [JsonIgnore]
	    public DateTime? LastModified { get { return If_Modified_Since;}}
        #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "CACHECONTROLDATE": return CacheControlDate;
				    case "LANG": return lang;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "CACHECONTROLDATE":if (value == null)CacheControlDate=null;else CacheControlDate=Convert.ToDateTime(value);break;
                case "LANG":lang=(string)value;break;
                }
            }
		}
		#endregion
    }
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Associations_Response_GET_OUTPUT",Namespace = "")]
	public class Associations_Response_GET_OUTPUT : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ext_ExtNum")]
        [DataMember(Name="ext_ExtNum",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ext_ExtNum  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ext_ID_count")]
        [DataMember(Name="ext_ID_count",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? ext_ID_count  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Max length : 4</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("grp_ID")]
        [DataMember(Name="grp_ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? grp_ID  { get; set; } = 0;
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_WorkPlace")]
        [DataMember(Name="abn_WorkPlace",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String abn_WorkPlace  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("AbonentFullName")]
        [DataMember(Name="AbonentFullName",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String AbonentFullName  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("acnt_ID")]
        [DataMember(Name="acnt_ID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? acnt_ID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("acnt_ID_count")]
        [DataMember(Name="acnt_ID_count",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? acnt_ID_count  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("acnt_IsPersonal")]
        [DataMember(Name="acnt_IsPersonal",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? acnt_IsPersonal  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("acnt_Number")]
        [DataMember(Name="acnt_Number",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String acnt_Number  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("acnt_Number_Personal")]
        [DataMember(Name="acnt_Number_Personal",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String acnt_Number_Personal  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Max length : 4</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("actp_ID")]
        [DataMember(Name="actp_ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? actp_ID  { get; set; } = 0;
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("actpd_Name")]
        [DataMember(Name="actpd_Name",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String actpd_Name  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Actpd_Name_Personal")]
        [DataMember(Name="Actpd_Name_Personal",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String Actpd_Name_Personal  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("aut_ID_count")]
        [DataMember(Name="aut_ID_count",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? aut_ID_count  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("aut_NameAuthCode")]
        [DataMember(Name="aut_NameAuthCode",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String aut_NameAuthCode  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("aut_NumberAts")]
        [DataMember(Name="aut_NumberAts",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? aut_NumberAts  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("BossFullName")]
        [DataMember(Name="BossFullName",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String BossFullName  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("cntr_ID_count")]
        [DataMember(Name="cntr_ID_count",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? cntr_ID_count  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("cntr_Name")]
        [DataMember(Name="cntr_Name",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String cntr_Name  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Max length : 4</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("com_Id")]
        [DataMember(Name="com_Id",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? com_Id  { get; set; } = 0;
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Max length : 4</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("dep_ID")]
        [DataMember(Name="dep_ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? dep_ID  { get; set; } = 0;
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("grp_Name")]
        [DataMember(Name="grp_Name",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String grp_Name  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("CacheControlDate")]
        [DataMember(Name="CacheControlDate",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? CacheControlDate  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("isEditAllow")]
        [DataMember(Name="isEditAllow",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? isEditAllow  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("isEditWorkPlace")]
        [DataMember(Name="isEditWorkPlace",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? isEditWorkPlace  { get; set; }
              /// <summary>
        /// Указание языка для набора multi-language данных 
	    ///<list type='bullet'>
///<item>
///	<term>'uk' </term>
///	<description> -украинский</description>
///</item>
///<item>
///	<term>'ru' </term>
///	<description> -руский </description>
///</item>
///<item>
///	<term>'en' </term>
///	<description> -английский</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("lang")]
        [DataMember(Name="lang",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
			[JsonIgnore]
	public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("lng_ID")]
        [DataMember(Name="lng_ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? lng_ID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("loc_Name")]
        [DataMember(Name="loc_Name",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String loc_Name  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Location_ID")]
        [DataMember(Name="Location_ID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? Location_ID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Max length : 4</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ntw_ID")]
        [DataMember(Name="ntw_ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? ntw_ID  { get; set; } = 0;
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("pbx_networkName")]
        [DataMember(Name="pbx_networkName",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String pbx_networkName  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ProfileType")]
        [DataMember(Name="ProfileType",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? ProfileType  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("rptURL")]
        [DataMember(Name="rptURL",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String rptURL  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("SubsCount")]
        [DataMember(Name="SubsCount",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? SubsCount  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("tnst_ExternalID")]
        [DataMember(Name="tnst_ExternalID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? tnst_ExternalID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("tnst_ID")]
        [DataMember(Name="tnst_ID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? tnst_ID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("tnt_AccountMandatory")]
        [DataMember(Name="tnt_AccountMandatory",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? tnt_AccountMandatory  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("tnt_ID")]
        [DataMember(Name="tnt_ID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? tnt_ID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Total")]
        [DataMember(Name="Total",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? Total  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("TreeNodeType")]
        [DataMember(Name="TreeNodeType",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String TreeNodeType  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("trf_ID")]
        [DataMember(Name="trf_ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? trf_ID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_Balance")]
        [DataMember(Name="abn_Balance",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Decimal? abn_Balance  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_CreateDate")]
        [DataMember(Name="abn_CreateDate",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.DateTime? abn_CreateDate  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_Date")]
        [DataMember(Name="abn_Date",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.DateTime? abn_Date  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_Employe_Export_ID")]
        [DataMember(Name="abn_Employe_Export_ID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String abn_Employe_Export_ID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_Employee_ID")]
        [DataMember(Name="abn_Employee_ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String abn_Employee_ID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_ExternalID")]
        [DataMember(Name="abn_ExternalID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? abn_ExternalID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_FirstName")]
        [DataMember(Name="abn_FirstName",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String abn_FirstName  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_Guid")]
        [DataMember(Name="abn_Guid",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Guid? abn_Guid  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_HasNotEmptyPrepaid")]
        [DataMember(Name="abn_HasNotEmptyPrepaid",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? abn_HasNotEmptyPrepaid  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Max length : 4</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ID")]
        [DataMember(Name="ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? ID 	{
		get 
		{ 
			if(emptyId.Equals(this.Id))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.Id, out result))
				return result; 
			else
            {
return 0;
            }
		}
		set { this.Id = value.ToString(); }
	}
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ParentID")]
        [DataMember(Name="ParentID",EmitDefaultValue = false)]
		[JsonRestrictedByValue("<empty>")]

	public global::System.Int32? ParentID 	{
		get 
		{ 
			if(emptyId.Equals(this.ParentId))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.ParentId, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.ParentId = value.ToString(); }
	}
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_IsExistAD")]
        [DataMember(Name="abn_IsExistAD",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? abn_IsExistAD  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_IsGuest")]
        [DataMember(Name="abn_IsGuest",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? abn_IsGuest  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_LastName")]
        [DataMember(Name="abn_LastName",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String abn_LastName  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_Login")]
        [DataMember(Name="abn_Login",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String abn_Login  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_MiddleName")]
        [DataMember(Name="abn_MiddleName",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String abn_MiddleName  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_ModifiedBy")]
        [DataMember(Name="abn_ModifiedBy",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String abn_ModifiedBy  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_ModifiedDate")]
        [DataMember(Name="abn_ModifiedDate",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.DateTime? abn_ModifiedDate  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_ModifiedFrom")]
        [DataMember(Name="abn_ModifiedFrom",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String abn_ModifiedFrom  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_NestedSets_Left")]
        [DataMember(Name="abn_NestedSets_Left",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? abn_NestedSets_Left  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_NestedSets_Right")]
        [DataMember(Name="abn_NestedSets_Right",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? abn_NestedSets_Right  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_Password")]
        [DataMember(Name="abn_Password",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String abn_Password  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_PositionCode")]
        [DataMember(Name="abn_PositionCode",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String abn_PositionCode  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_ShowPhoneDirectory")]
        [DataMember(Name="abn_ShowPhoneDirectory",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? abn_ShowPhoneDirectory  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("dep_id_boss")]
        [DataMember(Name="dep_id_boss",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? dep_id_boss  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("dep_Name_boss")]
        [DataMember(Name="dep_Name_boss",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String dep_Name_boss  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("isRefusalChangeName")]
        [DataMember(Name="isRefusalChangeName",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? isRefusalChangeName  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("max_ModDate")]
        [DataMember(Name="max_ModDate",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? max_ModDate  { get; set; }
              /// <summary>
        /// Идентификатор причины версии
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("vrr_ID")]
        [DataMember(Name="vrr_ID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? vrr_ID  { get; set; }
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "EXT_EXTNUM": return ext_ExtNum;
				    case "EXT_ID_COUNT": return ext_ID_count;
				    case "GRP_ID": return grp_ID;
				    case "ABN_WORKPLACE": return abn_WorkPlace;
				    case "ABONENTFULLNAME": return AbonentFullName;
				    case "ACNT_ID": return acnt_ID;
				    case "ACNT_ID_COUNT": return acnt_ID_count;
				    case "ACNT_ISPERSONAL": return acnt_IsPersonal;
				    case "ACNT_NUMBER": return acnt_Number;
				    case "ACNT_NUMBER_PERSONAL": return acnt_Number_Personal;
				    case "ACTP_ID": return actp_ID;
				    case "ACTPD_NAME": return actpd_Name;
				    case "ACTPD_NAME_PERSONAL": return Actpd_Name_Personal;
				    case "AUT_ID_COUNT": return aut_ID_count;
				    case "AUT_NAMEAUTHCODE": return aut_NameAuthCode;
				    case "AUT_NUMBERATS": return aut_NumberAts;
				    case "BOSSFULLNAME": return BossFullName;
				    case "CNTR_ID_COUNT": return cntr_ID_count;
				    case "CNTR_NAME": return cntr_Name;
				    case "COM_ID": return com_Id;
				    case "DEP_ID": return dep_ID;
				    case "GRP_NAME": return grp_Name;
				    case "CACHECONTROLDATE": return CacheControlDate;
				    case "ISEDITALLOW": return isEditAllow;
				    case "ISEDITWORKPLACE": return isEditWorkPlace;
				    case "LANG": return lang;
				    case "LNG_ID": return lng_ID;
				    case "LOC_NAME": return loc_Name;
				    case "LOCATION_ID": return Location_ID;
				    case "NTW_ID": return ntw_ID;
				    case "PBX_NETWORKNAME": return pbx_networkName;
				    case "PROFILETYPE": return ProfileType;
				    case "RPTURL": return rptURL;
				    case "SUBSCOUNT": return SubsCount;
				    case "TNST_EXTERNALID": return tnst_ExternalID;
				    case "TNST_ID": return tnst_ID;
				    case "TNT_ACCOUNTMANDATORY": return tnt_AccountMandatory;
				    case "TNT_ID": return tnt_ID;
				    case "TOTAL": return Total;
				    case "TREENODETYPE": return TreeNodeType;
				    case "TRF_ID": return trf_ID;
				    case "ABN_BALANCE": return abn_Balance;
				    case "ABN_CREATEDATE": return abn_CreateDate;
				    case "ABN_DATE": return abn_Date;
				    case "ABN_EMPLOYE_EXPORT_ID": return abn_Employe_Export_ID;
				    case "ABN_EMPLOYEE_ID": return abn_Employee_ID;
				    case "ABN_EXTERNALID": return abn_ExternalID;
				    case "ABN_FIRSTNAME": return abn_FirstName;
				    case "ABN_GUID": return abn_Guid;
				    case "ABN_HASNOTEMPTYPREPAID": return abn_HasNotEmptyPrepaid;
				    case "ID": return ID;
				    case "PARENTID": return ParentID;
				    case "ABN_ISEXISTAD": return abn_IsExistAD;
				    case "ABN_ISGUEST": return abn_IsGuest;
				    case "ABN_LASTNAME": return abn_LastName;
				    case "ABN_LOGIN": return abn_Login;
				    case "ABN_MIDDLENAME": return abn_MiddleName;
				    case "ABN_MODIFIEDBY": return abn_ModifiedBy;
				    case "ABN_MODIFIEDDATE": return abn_ModifiedDate;
				    case "ABN_MODIFIEDFROM": return abn_ModifiedFrom;
				    case "ABN_NESTEDSETS_LEFT": return abn_NestedSets_Left;
				    case "ABN_NESTEDSETS_RIGHT": return abn_NestedSets_Right;
				    case "ABN_PASSWORD": return abn_Password;
				    case "ABN_POSITIONCODE": return abn_PositionCode;
				    case "ABN_SHOWPHONEDIRECTORY": return abn_ShowPhoneDirectory;
				    case "DEP_ID_BOSS": return dep_id_boss;
				    case "DEP_NAME_BOSS": return dep_Name_boss;
				    case "ISREFUSALCHANGENAME": return isRefusalChangeName;
				    case "MAX_MODDATE": return max_ModDate;
				    case "VRR_ID": return vrr_ID;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "EXT_EXTNUM":ext_ExtNum=(string)value;break;
                case "EXT_ID_COUNT":if (value == null)ext_ID_count=null;else ext_ID_count=Convert.ToInt32(value);break;
                case "GRP_ID":if (value == null)grp_ID=null;else grp_ID=Convert.ToInt32(value);break;
                case "ABN_WORKPLACE":abn_WorkPlace=(string)value;break;
                case "ABONENTFULLNAME":AbonentFullName=(string)value;break;
                case "ACNT_ID":if (value == null)acnt_ID=null;else acnt_ID=Convert.ToInt32(value);break;
                case "ACNT_ID_COUNT":if (value == null)acnt_ID_count=null;else acnt_ID_count=Convert.ToInt32(value);break;
                case "ACNT_ISPERSONAL":if (value == null)acnt_IsPersonal=null;else acnt_IsPersonal=Convert.ToInt32(value);break;
                case "ACNT_NUMBER":acnt_Number=(string)value;break;
                case "ACNT_NUMBER_PERSONAL":acnt_Number_Personal=(string)value;break;
                case "ACTP_ID":if (value == null)actp_ID=null;else actp_ID=Convert.ToInt32(value);break;
                case "ACTPD_NAME":actpd_Name=(string)value;break;
                case "ACTPD_NAME_PERSONAL":Actpd_Name_Personal=(string)value;break;
                case "AUT_ID_COUNT":if (value == null)aut_ID_count=null;else aut_ID_count=Convert.ToInt32(value);break;
                case "AUT_NAMEAUTHCODE":aut_NameAuthCode=(string)value;break;
                case "AUT_NUMBERATS":if (value == null)aut_NumberAts=null;else aut_NumberAts=Convert.ToInt32(value);break;
                case "BOSSFULLNAME":BossFullName=(string)value;break;
                case "CNTR_ID_COUNT":if (value == null)cntr_ID_count=null;else cntr_ID_count=Convert.ToInt32(value);break;
                case "CNTR_NAME":cntr_Name=(string)value;break;
                case "COM_ID":if (value == null)com_Id=null;else com_Id=Convert.ToInt32(value);break;
                case "DEP_ID":if (value == null)dep_ID=null;else dep_ID=Convert.ToInt32(value);break;
                case "GRP_NAME":grp_Name=(string)value;break;
                case "CACHECONTROLDATE":if (value == null)CacheControlDate=null;else CacheControlDate=Convert.ToDateTime(value);break;
                case "ISEDITALLOW":if (value == null)isEditAllow=null;else isEditAllow=Convert.ToInt32(value);break;
                case "ISEDITWORKPLACE":if (value == null)isEditWorkPlace=null;else isEditWorkPlace=Convert.ToInt32(value);break;
                case "LANG":lang=(string)value;break;
                case "LNG_ID":if (value == null)lng_ID=null;else lng_ID=Convert.ToInt32(value);break;
                case "LOC_NAME":loc_Name=(string)value;break;
                case "LOCATION_ID":if (value == null)Location_ID=null;else Location_ID=Convert.ToInt32(value);break;
                case "NTW_ID":if (value == null)ntw_ID=null;else ntw_ID=Convert.ToInt32(value);break;
                case "PBX_NETWORKNAME":pbx_networkName=(string)value;break;
                case "PROFILETYPE":if (value == null)ProfileType=null;else ProfileType=Convert.ToInt32(value);break;
                case "RPTURL":rptURL=(string)value;break;
                case "SUBSCOUNT":if (value == null)SubsCount=null;else SubsCount=Convert.ToInt32(value);break;
                case "TNST_EXTERNALID":if (value == null)tnst_ExternalID=null;else tnst_ExternalID=Convert.ToInt32(value);break;
                case "TNST_ID":if (value == null)tnst_ID=null;else tnst_ID=Convert.ToInt32(value);break;
                case "TNT_ACCOUNTMANDATORY":if (value == null)tnt_AccountMandatory=null;else tnt_AccountMandatory=Convert.ToInt32(value);break;
                case "TNT_ID":if (value == null)tnt_ID=null;else tnt_ID=Convert.ToInt32(value);break;
                case "TOTAL":if (value == null)Total=null;else Total=Convert.ToInt32(value);break;
                case "TREENODETYPE":TreeNodeType=(string)value;break;
                case "TRF_ID":if (value == null)trf_ID=null;else trf_ID=Convert.ToInt32(value);break;
                case "ABN_BALANCE":if (value == null)abn_Balance=null;else abn_Balance=Convert.ToDecimal(value);break;
                case "ABN_CREATEDATE":if (value == null)abn_CreateDate=null;else abn_CreateDate=Convert.ToDateTime(value);break;
                case "ABN_DATE":if (value == null)abn_Date=null;else abn_Date=Convert.ToDateTime(value);break;
                case "ABN_EMPLOYE_EXPORT_ID":abn_Employe_Export_ID=(string)value;break;
                case "ABN_EMPLOYEE_ID":abn_Employee_ID=(string)value;break;
                case "ABN_EXTERNALID":if (value == null)abn_ExternalID=null;else abn_ExternalID=Convert.ToInt32(value);break;
                case "ABN_FIRSTNAME":abn_FirstName=(string)value;break;
                case "ABN_GUID":if (value == null)abn_Guid=null;else abn_Guid=(Guid)value;break;
                case "ABN_HASNOTEMPTYPREPAID":if (value == null)abn_HasNotEmptyPrepaid=null;else abn_HasNotEmptyPrepaid=Convert.ToInt32(value);break;
                case "ID":if (value == null)ID=null;else ID=Convert.ToInt32(value);break;
                case "PARENTID":if (value == null)ParentID=null;else ParentID=Convert.ToInt32(value);break;
                case "ABN_ISEXISTAD":if (value == null)abn_IsExistAD=null;else abn_IsExistAD=Convert.ToInt32(value);break;
                case "ABN_ISGUEST":if (value == null)abn_IsGuest=null;else abn_IsGuest=Convert.ToInt32(value);break;
                case "ABN_LASTNAME":abn_LastName=(string)value;break;
                case "ABN_LOGIN":abn_Login=(string)value;break;
                case "ABN_MIDDLENAME":abn_MiddleName=(string)value;break;
                case "ABN_MODIFIEDBY":abn_ModifiedBy=(string)value;break;
                case "ABN_MODIFIEDDATE":if (value == null)abn_ModifiedDate=null;else abn_ModifiedDate=Convert.ToDateTime(value);break;
                case "ABN_MODIFIEDFROM":abn_ModifiedFrom=(string)value;break;
                case "ABN_NESTEDSETS_LEFT":if (value == null)abn_NestedSets_Left=null;else abn_NestedSets_Left=Convert.ToInt32(value);break;
                case "ABN_NESTEDSETS_RIGHT":if (value == null)abn_NestedSets_Right=null;else abn_NestedSets_Right=Convert.ToInt32(value);break;
                case "ABN_PASSWORD":abn_Password=(string)value;break;
                case "ABN_POSITIONCODE":abn_PositionCode=(string)value;break;
                case "ABN_SHOWPHONEDIRECTORY":if (value == null)abn_ShowPhoneDirectory=null;else abn_ShowPhoneDirectory=Convert.ToInt32(value);break;
                case "DEP_ID_BOSS":if (value == null)dep_id_boss=null;else dep_id_boss=Convert.ToInt32(value);break;
                case "DEP_NAME_BOSS":dep_Name_boss=(string)value;break;
                case "ISREFUSALCHANGENAME":if (value == null)isRefusalChangeName=null;else isRefusalChangeName=Convert.ToInt32(value);break;
                case "MAX_MODDATE":if (value == null)max_ModDate=null;else max_ModDate=Convert.ToDateTime(value);break;
                case "VRR_ID":if (value == null)vrr_ID=null;else vrr_ID=Convert.ToInt32(value);break;
                }
            }
		}
		#endregion
	}
  
    
    ///<remarks>POST &lt;host&gt;[:&lt;port&gt;]/api/v1/bss/associations
///POST &lt;host&gt;[:&lt;port&gt;]/api/v1/bss/associations/[parentid]/associations
///</remarks>
    ///Associations,<empty>
    [EntitySubentity("Associations")]

	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Associations_Request_SET",Namespace = "")]
	public class Associations_Request_SET : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// Краткое название для поиска
	    ///<list type='bullet'>
///<item>
///	<description>Сокращенное название Ассоциации</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Customer_SearchName")]
        [DataMember(Name="Customer_SearchName",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Customer_SearchName  { get; set; }
              /// <summary>
        /// Дата с которой начинается отсчёт стажа
	    ///<list type='bullet'>
///<item>
///	<description>Зарезервировано</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("CustomerDate")]
        [DataMember(Name="CustomerDate",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? CustomerDate  { get; set; }
              /// <summary>
        /// Язык общения с клиентом
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - Русский</description>
///</item>
///<item>
///	<term>2 </term>
///	<description> - Английский</description>
///</item>
///<item>
///	<term>3 </term>
///	<description> - Украинский</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("CustomerLanguageId")]
        [DataMember(Name="CustomerLanguageId",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? CustomerLanguageId  { get; set; }
              /// <summary>
        /// Дата применения изменений
	    ///<list type='bullet'>
///<item>
///	<description>Зарезервировано</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("EffectiveDate")]
        [DataMember(Name="EffectiveDate",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? EffectiveDate  { get; set; }
              /// <summary>
        /// Признак передачи внешнего значения ID
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - внешний ID (для BIS всегда устанавливаем в 1)</description>
///</item>
///<item>
///	<term>0 </term>
///	<description> - внутренний ID</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("IDType")]
        [DataMember(Name="IDType",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? IDType  { get; set; }
              /// <summary>
        /// Признак ""создание узла дерева не завершено
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - да</description>
///</item>
///<item>
///	<term>0 </term>
///	<description> - нет</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("IsCreatedWithTariffication")]
        [DataMember(Name="IsCreatedWithTariffication",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? IsCreatedWithTariffication  { get; set; } = 0;
              /// <summary>
        /// Уникальный идентификатор для экспорта
	    ///<list type='bullet'>
///<item>
///	<description>Зарезервировано</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Export_ID")]
        [DataMember(Name="Export_ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Export_ID  { get; set; }
              /// <summary>
        /// Идентификатор биллинговой группы 
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> -PSTN</description>
///</item>
///<item>
///	<term>2 </term>
///	<description> -GSM</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("GroupID")]
        [DataMember(Name="GroupID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? GroupID  { get; set; } = 0;
              /// <summary>
        /// Полное юридическое наименование 
	    ///<list type='bullet'>
///<item>
///	<description>Полное юридическое наименование (опционально)</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("FullName")]
        [DataMember(Name="FullName",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String FullName  { get; set; }
              /// <summary>
        /// Короткое наименование
	    ///<list type='bullet'>
///<item>
///	<description>Короткое наименование для учета (опционально)</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ShortName")]
        [DataMember(Name="ShortName",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ShortName  { get; set; }
              /// <summary>
        /// Признак выполнять нормализацию дерева узлов
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - да</description>
///</item>
///<item>
///	<term>0 </term>
///	<description> - нет</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 1</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("isUpdateNodeTree")]
        [DataMember(Name="isUpdateNodeTree",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? isUpdateNodeTree  { get; set; } = 1;
              /// <summary>
        /// PositionCode для синхронизации иерархии узлов дерева
	    ///<list type='bullet'>
///<item>
///	<description>Зарезервировано</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("PositionCode")]
        [DataMember(Name="PositionCode",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String PositionCode  { get; set; }
              /// <summary>
        /// Тип профиля
	    ///<list type='bullet'>
///<item>
///	<term>0 </term>
///	<description> - не указан</description>
///</item>
///<item>
///	<term>1 </term>
///	<description> - физ.лицо</description>
///</item>
///<item>
///	<term>2 </term>
///	<description> - юр.лицо</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ProfileType")]
        [DataMember(Name="ProfileType",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? ProfileType  { get; set; }
              /// <summary>
        /// Идентификатор сегмента
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - SME</description>
///</item>
///<item>
///	<term>2 </term>
///	<description> - LA</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("SegmentID")]
        [DataMember(Name="SegmentID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? SegmentID  { get; set; } = 0;
              /// <summary>
        /// Идентификатор статуса узла дерева
	    ///<list type='bullet'>
///<item>
///	<description>указываем значение CLIS_ID из справочника Client_statuses</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("StatusID")]
        [DataMember(Name="StatusID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? StatusID  { get; set; }
              /// <summary>
        /// Уникальный номер узла дерева для синхронизации с внешней системой
	    ///<list type='bullet'>
///<item>
///	<description>Зарезервировано</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("SyncId")]
        [DataMember(Name="SyncId",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String SyncId  { get; set; }
              /// <summary>
        /// Признак узла дерева, исключенного из расчетов (техническая запись)
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - да</description>
///</item>
///<item>
///	<term>0 </term>
///	<description> - нет</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("TechnicalTag")]
        [DataMember(Name="TechnicalTag",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? TechnicalTag  { get; set; } = 0;
              /// <summary>
        /// Номер Филиала
	    ///<list type='bullet'>
///<item>
///	<description>указываем значение справочника Branches</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("LocationID")]
        [DataMember(Name="LocationID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? LocationID  { get; set; }
    //Base Attrribute '' skipped
          /// <summary>
        /// Код диллера
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("AgentCode")]
        [DataMember(Name="AgentCode",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String AgentCode  { get; set; }
              /// <summary>
        /// Уникальный идентификатор диллера
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("AgentID")]
        [DataMember(Name="AgentID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? AgentID  { get; set; }
              /// <summary>
        /// Код точки продаж
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("SalesPointCode")]
        [DataMember(Name="SalesPointCode",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String SalesPointCode  { get; set; }
              /// <summary>
        /// Уникальный идентификатор точки продаж
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("SalesPointID")]
        [DataMember(Name="SalesPointID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? SalesPointID  { get; set; }
              /// <summary>
        /// Пользователь данного изменения
	    ///<list type='bullet'>
///<item>
///	<term>Username </term>
///	<description> - пользователь из контекста</description>
///</item>
///<item>
///	<term>NULL </term>
///	<description> -если неизвестен</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedBy")]
        [DataMember(Name="ModifiedBy",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedBy  { get; set; }
              /// <summary>
        /// Источник данного изменения
	    ///<list type='bullet'>
///<item>
///	<term>IP </term>
///	<description> -адрес/имя компьютера</description>
///</item>
///<item>
///	<term>NULL </term>
///	<description> - если неизвестен</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedFrom")]
        [DataMember(Name="ModifiedFrom",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedFrom  { get; set; }
              /// <summary>
        /// Комментарий изменения
	    ///<list type='bullet'>
///<item>
///	<description>Заполняем причину изменений для истории</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Remark")]
        [DataMember(Name="Remark",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Remark  { get; set; }
              /// <summary>
        /// Название сущности REST, для которой выполняется POST операция
	    ///<list type='bullet'>
///<item>
///	<description>зарезервировано</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("EntityName")]
        [DataMember(Name="EntityName",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String EntityName { get; set; } = "<empty>";
              /// <summary>
        /// Уникальный идентификатор транзакции для идемпотентности
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Header
        /// </remarks>
        [JsonProperty("global_unique_id")]
        [DataMember(Name="global_unique_id",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String global_unique_id  { get; set; }
              /// <summary>
        /// Идентификатор Ассоциации
	    ///<list type='bullet'>
///<item>
///	<description>ASSC_ID из справочника associations</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("ID")]
        [DataMember(Name="ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? ID 	{
		get 
		{ 
			if(emptyId.Equals(this.Id))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.Id, out result))
				return result; 
			else
            {
return 0;
            }
		}
		set { this.Id = value.ToString(); }
	}
              /// <summary>
        /// Идентификатор Ассоциации уровня выше
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> -корень дерева учета</description>
///</item>
///<item>
///	<term>ASSC_ID </term>
///	<description> -справочник ASSOCIATIONS</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("ParentID")]
        [DataMember(Name="ParentID",EmitDefaultValue = false)]
		[JsonRestrictedByValue("<empty>")]

	public global::System.Int32? ParentID 	{
		get 
		{ 
			if(emptyId.Equals(this.ParentId))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.ParentId, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.ParentId = value.ToString(); }
	}
              /// <summary>
        /// Указание языка для набора multi-language данных 
	    ///<list type='bullet'>
///<item>
///	<term>'uk' </term>
///	<description> -украинский</description>
///</item>
///<item>
///	<term>'ru' </term>
///	<description> -руский </description>
///</item>
///<item>
///	<term>'en' </term>
///	<description> -английский</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("lang")]
        [DataMember(Name="lang",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
			[JsonIgnore]
	public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
              /// <summary>
        /// Формат вывода ошибки
	    ///<list type='bullet'>
///<item>
///	<description>'json'</description>
///</item>
///<item>
///	<description>'xml'</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : xml</para>
///<para>Max length : 25</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ErrFormat")]
        [DataMember(Name="ErrFormat",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ErrFormat     {
		get { return Format ?? "xml"; }
		set { this.Format = value; }
	}
              /// <summary>
        /// Уникальный идентификатор
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Abn_Guid")]
        [DataMember(Name="Abn_Guid",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Guid? Abn_Guid  { get; set; }
              /// <summary>
        /// Код внешней системы
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Header
        /// </remarks>
        [JsonProperty("System")]
        [DataMember(Name="System",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String System  { get; set; }
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "CUSTOMER_SEARCHNAME": return Customer_SearchName;
				    case "CUSTOMERDATE": return CustomerDate;
				    case "CUSTOMERLANGUAGEID": return CustomerLanguageId;
				    case "EFFECTIVEDATE": return EffectiveDate;
				    case "IDTYPE": return IDType;
				    case "ISCREATEDWITHTARIFFICATION": return IsCreatedWithTariffication;
				    case "EXPORT_ID": return Export_ID;
				    case "GROUPID": return GroupID;
				    case "FULLNAME": return FullName;
				    case "SHORTNAME": return ShortName;
				    case "ISUPDATENODETREE": return isUpdateNodeTree;
				    case "POSITIONCODE": return PositionCode;
				    case "PROFILETYPE": return ProfileType;
				    case "SEGMENTID": return SegmentID;
				    case "STATUSID": return StatusID;
				    case "SYNCID": return SyncId;
				    case "TECHNICALTAG": return TechnicalTag;
				    case "LOCATIONID": return LocationID;
				    case "NAME": return Name;
				    case "AGENTCODE": return AgentCode;
				    case "AGENTID": return AgentID;
				    case "SALESPOINTCODE": return SalesPointCode;
				    case "SALESPOINTID": return SalesPointID;
				    case "MODIFIEDBY": return ModifiedBy;
				    case "MODIFIEDFROM": return ModifiedFrom;
				    case "REMARK": return Remark;
				    case "ENTITYNAME": return EntityName;
				    case "GLOBAL_UNIQUE_ID": return global_unique_id;
				    case "ID": return ID;
				    case "PARENTID": return ParentID;
				    case "LANG": return lang;
				    case "ERRFORMAT": return ErrFormat;
				    case "ABN_GUID": return Abn_Guid;
				    case "SYSTEM": return System;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "CUSTOMER_SEARCHNAME":Customer_SearchName=(string)value;break;
                case "CUSTOMERDATE":if (value == null)CustomerDate=null;else CustomerDate=Convert.ToDateTime(value);break;
                case "CUSTOMERLANGUAGEID":if (value == null)CustomerLanguageId=null;else CustomerLanguageId=Convert.ToInt32(value);break;
                case "EFFECTIVEDATE":if (value == null)EffectiveDate=null;else EffectiveDate=Convert.ToDateTime(value);break;
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                case "ISCREATEDWITHTARIFFICATION":if (value == null)IsCreatedWithTariffication=null;else IsCreatedWithTariffication=Convert.ToInt32(value);break;
                case "EXPORT_ID":Export_ID=(string)value;break;
                case "GROUPID":if (value == null)GroupID=null;else GroupID=Convert.ToInt32(value);break;
                case "FULLNAME":FullName=(string)value;break;
                case "SHORTNAME":ShortName=(string)value;break;
                case "ISUPDATENODETREE":if (value == null)isUpdateNodeTree=null;else isUpdateNodeTree=Convert.ToInt32(value);break;
                case "POSITIONCODE":PositionCode=(string)value;break;
                case "PROFILETYPE":if (value == null)ProfileType=null;else ProfileType=Convert.ToInt32(value);break;
                case "SEGMENTID":if (value == null)SegmentID=null;else SegmentID=Convert.ToInt32(value);break;
                case "STATUSID":if (value == null)StatusID=null;else StatusID=Convert.ToInt32(value);break;
                case "SYNCID":SyncId=(string)value;break;
                case "TECHNICALTAG":if (value == null)TechnicalTag=null;else TechnicalTag=Convert.ToInt32(value);break;
                case "LOCATIONID":if (value == null)LocationID=null;else LocationID=Convert.ToInt32(value);break;
                case "NAME":Name=(string)value;break;
                case "AGENTCODE":AgentCode=(string)value;break;
                case "AGENTID":if (value == null)AgentID=null;else AgentID=Convert.ToInt32(value);break;
                case "SALESPOINTCODE":SalesPointCode=(string)value;break;
                case "SALESPOINTID":if (value == null)SalesPointID=null;else SalesPointID=Convert.ToInt32(value);break;
                case "MODIFIEDBY":ModifiedBy=(string)value;break;
                case "MODIFIEDFROM":ModifiedFrom=(string)value;break;
                case "REMARK":Remark=(string)value;break;
                case "ENTITYNAME":EntityName=(string)value;break;
                case "GLOBAL_UNIQUE_ID":global_unique_id=(string)value;break;
                case "ID":if (value == null)ID=null;else ID=Convert.ToInt32(value);break;
                case "PARENTID":if (value == null)ParentID=null;else ParentID=Convert.ToInt32(value);break;
                case "LANG":lang=(string)value;break;
                case "ERRFORMAT":ErrFormat=(string)value;break;
                case "ABN_GUID":if (value == null)Abn_Guid=null;else Abn_Guid=(Guid)value;break;
                case "SYSTEM":System=(string)value;break;
                }
            }
		}
		#endregion
	}
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Associations_Response_SET",Namespace = "")]
	public class Associations_Response_SET: BaseEntity, IModifiedTag
	{
         #region [Properties]
			/// <summary>
			/// Идентификатор лицевого счета (соответствует CustomerID)
			/// <para/>
			/// Abn_ID
			/// </summary>
			///<remarks>
			///Идентификатор лицевого счета (соответствует CustomerID)
			///</remarks>
			[JsonProperty("ID")]
			[DataMember(Name="ID", EmitDefaultValue = false)]
			/*norestr*/

            public global::System.Int32? ID 	{
		get 
		{ 
			if(emptyId.Equals(this.Id))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.Id, out result))
				return result; 
			else
            {
return 0;
            }
		}
		set { this.Id = value.ToString(); }
	}
			/// <summary>
			/// Признак передачи внешнего значения ID
			/// <para/>
			/// IsExternalID
			/// </summary>
			///<remarks>
			///Признак передачи внешнего значения ID
			///</remarks>
			[JsonProperty("IDType")]
			[DataMember(Name="IDType", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
            public global::System.Int32? IDType  { get; set; }
			/// <summary>
			/// Указание языка для набора multi-language данных 
			/// <para/>
			/// Lang
			/// </summary>
			///<remarks>
			///Указание языка для набора multi-language данных 
			///</remarks>
			[JsonProperty("lang")]
			[DataMember(Name="lang", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
			[JsonIgnore]
            public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
         #endregion
        [JsonIgnore]
	    public DateTime? If_Modified_Since { get {return null;}}
        #region [IDateModified]
        [JsonIgnore]
	    public DateTime? LastModified { get { return If_Modified_Since;}}
        #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "ID": return ID;
				    case "IDTYPE": return IDType;
				    case "LANG": return lang;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "ID":if (value == null)ID=null;else ID=Convert.ToInt32(value);break;
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                case "LANG":lang=(string)value;break;
                }
            }
		}
		#endregion
    }
#endregion
#region [Associations/Activate]

	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Associations_Activate_Request_ACTION",Namespace = "")]
	public class Associations_Activate_Request_ACTION : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// Зарезервировано
	    ///<list type='bullet'>
///<item>
///	<description>Зарезервировано для будущего использования</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("AuthCode")]
        [DataMember(Name="AuthCode",EmitDefaultValue = false)]
		/*norestr*/

[SecondaryKey("AuthCodes_Request_SET","AuthCodeName")]/*ACTION*/
	public global::System.String AuthCode  { get; set; }
              /// <summary>
        /// дата активации
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("EffectiveDate")]
        [DataMember(Name="EffectiveDate",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? EffectiveDate  { get; set; }
              /// <summary>
        /// Название сущности REST, для которой выполняется POST операция
	    ///<list type='bullet'>
///<item>
///	<description>Зарезервировано</description>
///</item>
///<item>
///	<description>доступные значения: Subsribers</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("EntityName")]
        [DataMember(Name="EntityName",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String EntityName { get; set; } = "<empty>";
              /// <summary>
        /// Формат вывода ошибки
	    ///<list type='bullet'>
///<item>
///	<description>'json'</description>
///</item>
///<item>
///	<description>'xml'</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : xml</para>
///<para>Max length : 25</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ErrFormat")]
        [DataMember(Name="ErrFormat",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ErrFormat     {
		get { return Format ?? "xml"; }
		set { this.Format = value; }
	}
              /// <summary>
        /// Уникальный идентификатор транзакции для идемпотентности
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Header
        /// </remarks>
        [JsonProperty("global_unique_id")]
        [DataMember(Name="global_unique_id",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String global_unique_id  { get; set; }
              /// <summary>
        /// Признак передачи внешнего значения ID
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - внешний ID (для BIS всегда устанавливаем в 1)</description>
///</item>
///<item>
///	<term>0 </term>
///	<description> - внутренний ID</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("IDType")]
        [DataMember(Name="IDType",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? IDType  { get; set; }
              /// <summary>
        /// Указание языка для набора multi-language данных 
	    ///<list type='bullet'>
///<item>
///	<term>'uk' </term>
///	<description> -украинский</description>
///</item>
///<item>
///	<term>'ru' </term>
///	<description> -руский </description>
///</item>
///<item>
///	<term>'en' </term>
///	<description> -английский</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("lang")]
        [DataMember(Name="lang",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
			[JsonIgnore]
	public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
              /// <summary>
        /// уникальное значение логина, например Option82 
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Login")]
        [DataMember(Name="Login",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Login  { get; set; }
              /// <summary>
        /// Пользователь данного изменения
	    ///<list type='bullet'>
///<item>
///	<term>Username </term>
///	<description> - пользователь из контекста</description>
///</item>
///<item>
///	<term>NULL </term>
///	<description> -если неизвестен</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedBy")]
        [DataMember(Name="ModifiedBy",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedBy  { get; set; }
              /// <summary>
        /// Источник данного изменения
	    ///<list type='bullet'>
///<item>
///	<term>IP </term>
///	<description> -адрес/имя компьютера</description>
///</item>
///<item>
///	<term>NULL </term>
///	<description> - если неизвестен</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedFrom")]
        [DataMember(Name="ModifiedFrom",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedFrom  { get; set; }
              /// <summary>
        /// Адрес для нотификации об активации
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Notification")]
        [DataMember(Name="Notification",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Notification  { get; set; }
              /// <summary>
        /// Идентификатор абонента
	    ///<list type='bullet'>
///<item>
///	<description>SUBS_ID из справочника SUBSCRIBERS</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("ParentID")]
        [DataMember(Name="ParentID",EmitDefaultValue = false)]
		[JsonRestrictedByValue("<empty>")]

			[Required]
[SecondaryKey("Subscribers_Request_GET","ID")]/*ACTION*/
	public global::System.Int32? ParentID 	{
		get 
		{ 
			if(emptyId.Equals(this.ParentId))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.ParentId, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.ParentId = value.ToString(); }
	}
              /// <summary>
        /// пароль
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Password")]
        [DataMember(Name="Password",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Password  { get; set; }
              /// <summary>
        /// Телефон для нотификации об активации
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("PhoneNumber")]
        [DataMember(Name="PhoneNumber",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String PhoneNumber  { get; set; }
              /// <summary>
        /// Комментарий для активации
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Remark")]
        [DataMember(Name="Remark",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String Remark  { get; set; }
              /// <summary>
        /// Статус узла дерева после активаци
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("StatusID")]
        [DataMember(Name="StatusID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? StatusID  { get; set; }
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "AUTHCODE": return AuthCode;
				    case "EFFECTIVEDATE": return EffectiveDate;
				    case "ENTITYNAME": return EntityName;
				    case "ERRFORMAT": return ErrFormat;
				    case "GLOBAL_UNIQUE_ID": return global_unique_id;
				    case "IDTYPE": return IDType;
				    case "LANG": return lang;
				    case "LOGIN": return Login;
				    case "MODIFIEDBY": return ModifiedBy;
				    case "MODIFIEDFROM": return ModifiedFrom;
				    case "NOTIFICATION": return Notification;
				    case "PARENTID": return ParentID;
				    case "PASSWORD": return Password;
				    case "PHONENUMBER": return PhoneNumber;
				    case "REMARK": return Remark;
				    case "STATUSID": return StatusID;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "AUTHCODE":AuthCode=(string)value;break;
                case "EFFECTIVEDATE":if (value == null)EffectiveDate=null;else EffectiveDate=Convert.ToDateTime(value);break;
                case "ENTITYNAME":EntityName=(string)value;break;
                case "ERRFORMAT":ErrFormat=(string)value;break;
                case "GLOBAL_UNIQUE_ID":global_unique_id=(string)value;break;
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                case "LANG":lang=(string)value;break;
                case "LOGIN":Login=(string)value;break;
                case "MODIFIEDBY":ModifiedBy=(string)value;break;
                case "MODIFIEDFROM":ModifiedFrom=(string)value;break;
                case "NOTIFICATION":Notification=(string)value;break;
                case "PARENTID":if (value == null)ParentID=null;else ParentID=Convert.ToInt32(value);break;
                case "PASSWORD":Password=(string)value;break;
                case "PHONENUMBER":PhoneNumber=(string)value;break;
                case "REMARK":Remark=(string)value;break;
                case "STATUSID":if (value == null)StatusID=null;else StatusID=Convert.ToInt32(value);break;
                }
            }
		}
		#endregion
	}
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Associations_Activate_Response_ACTION",Namespace = "")]
	public class Associations_Activate_Response_ACTION: BaseEntity, IModifiedTag
	{
         #region [Properties]
			/// <summary>
			/// Признак передачи внешнего значения ID
			/// <para/>
			/// IsExternalID
			/// </summary>
			///<remarks>
			///Признак передачи внешнего значения ID
			///</remarks>
			[JsonProperty("IDType")]
			[DataMember(Name="IDType", EmitDefaultValue = false)]
			/*norestr*/

            public global::System.Int32? IDType  { get; set; }
			/// <summary>
			/// Указание языка для набора multi-language данных 
			/// <para/>
			/// Lang
			/// </summary>
			///<remarks>
			///Указание языка для набора multi-language данных 
			///</remarks>
			[JsonProperty("lang")]
			[DataMember(Name="lang", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
			[JsonIgnore]
            public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
         #endregion
        [JsonIgnore]
	    public DateTime? If_Modified_Since { get {return null;}}
        #region [IDateModified]
        [JsonIgnore]
	    public DateTime? LastModified { get { return If_Modified_Since;}}
        #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                }
            }
		}
		#endregion
    }
#endregion
#region [Associations/ChangeName]

	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Associations_ChangeName_Request_ACTION",Namespace = "")]
	public class Associations_ChangeName_Request_ACTION : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// Дата изменений
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("EffectiveDate")]
        [DataMember(Name="EffectiveDate",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? EffectiveDate  { get; set; }
              /// <summary>
        /// Название сущности REST, для которой выполняется POST операция
	    ///<list type='bullet'>
///<item>
///	<description>Зарезервировано</description>
///</item>
///<item>
///	<description>доступные значения Customers</description>
///</item>
///<item>
///	<description>Suscribers или Associations</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("EntityName")]
        [DataMember(Name="EntityName",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String EntityName { get; set; } = "<empty>";
              /// <summary>
        /// Формат вывода ошибки
	    ///<list type='bullet'>
///<item>
///	<description>'json'</description>
///</item>
///<item>
///	<description>'xml'</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : xml</para>
///<para>Max length : 25</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ErrFormat")]
        [DataMember(Name="ErrFormat",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ErrFormat     {
		get { return Format ?? "xml"; }
		set { this.Format = value; }
	}
              /// <summary>
        /// Имя
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("FirstName")]
        [DataMember(Name="FirstName",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String FirstName  { get; set; }
              /// <summary>
        /// Юридическое наименование
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("FullName")]
        [DataMember(Name="FullName",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String FullName  { get; set; }
              /// <summary>
        /// Признак передачи внешнего значения ID
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - внешний ID (для BIS всегда устанавливаем в 1)</description>
///</item>
///<item>
///	<term>0 </term>
///	<description> - внутренний ID</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("IDType")]
        [DataMember(Name="IDType",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? IDType  { get; set; } = 0;
              /// <summary>
        /// Указание языка для набора multi-language данных 
	    ///<list type='bullet'>
///<item>
///	<term>'uk' </term>
///	<description> -украинский</description>
///</item>
///<item>
///	<term>'ru' </term>
///	<description> -руский </description>
///</item>
///<item>
///	<term>'en' </term>
///	<description> -английский</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("lang")]
        [DataMember(Name="lang",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
			[JsonIgnore]
	public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
              /// <summary>
        /// Отчество
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("MiddleName")]
        [DataMember(Name="MiddleName",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String MiddleName  { get; set; }
              /// <summary>
        /// Пользователь данного изменения
	    ///<list type='bullet'>
///<item>
///	<term>Username </term>
///	<description> - пользователь из контекста</description>
///</item>
///<item>
///	<term>NULL </term>
///	<description> -если неизвестен</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedBy")]
        [DataMember(Name="ModifiedBy",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedBy  { get; set; }
              /// <summary>
        /// Источник данного изменения
	    ///<list type='bullet'>
///<item>
///	<term>IP </term>
///	<description> -адрес/имя компьютера</description>
///</item>
///<item>
///	<term>NULL </term>
///	<description> - если неизвестен</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedFrom")]
        [DataMember(Name="ModifiedFrom",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedFrom  { get; set; }
    //Base Attrribute '' skipped
          /// <summary>
        /// Идентификатор Ассоциации 
	    ///<list type='bullet'>
///<item>
///	<description>ID Ассоциации</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("ParentID")]
        [DataMember(Name="ParentID",EmitDefaultValue = false)]
		[JsonRestrictedByValue("<empty>")]

			[Required]
[SecondaryKey("Associations_Request_GET","ID")]/*ACTION*/
[SecondaryKey("Subscribers_Request_GET","ID")]/*ACTION*/
[SecondaryKey("Customers_Request_GET","ID")]/*ACTION*/
	public global::System.Int32? ParentID 	{
		get 
		{ 
			if(emptyId.Equals(this.ParentId))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.ParentId, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.ParentId = value.ToString(); }
	}
              /// <summary>
        /// Комментарий
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Remark")]
        [DataMember(Name="Remark",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Remark  { get; set; }
              /// <summary>
        /// ОКПО или Паспорт
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("SearchName")]
        [DataMember(Name="SearchName",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String SearchName  { get; set; }
              /// <summary>
        /// Сокращенное наименование
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ShortName")]
        [DataMember(Name="ShortName",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ShortName  { get; set; }
              /// <summary>
        /// Указание очистить значение, в случае передачи ПУСТО в значении
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ToClean")]
        [DataMember(Name="ToClean",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? ToClean  { get; set; } = 0;
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "EFFECTIVEDATE": return EffectiveDate;
				    case "ENTITYNAME": return EntityName;
				    case "ERRFORMAT": return ErrFormat;
				    case "FIRSTNAME": return FirstName;
				    case "FULLNAME": return FullName;
				    case "IDTYPE": return IDType;
				    case "LANG": return lang;
				    case "MIDDLENAME": return MiddleName;
				    case "MODIFIEDBY": return ModifiedBy;
				    case "MODIFIEDFROM": return ModifiedFrom;
				    case "NAME": return Name;
				    case "PARENTID": return ParentID;
				    case "REMARK": return Remark;
				    case "SEARCHNAME": return SearchName;
				    case "SHORTNAME": return ShortName;
				    case "TOCLEAN": return ToClean;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "EFFECTIVEDATE":if (value == null)EffectiveDate=null;else EffectiveDate=Convert.ToDateTime(value);break;
                case "ENTITYNAME":EntityName=(string)value;break;
                case "ERRFORMAT":ErrFormat=(string)value;break;
                case "FIRSTNAME":FirstName=(string)value;break;
                case "FULLNAME":FullName=(string)value;break;
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                case "LANG":lang=(string)value;break;
                case "MIDDLENAME":MiddleName=(string)value;break;
                case "MODIFIEDBY":ModifiedBy=(string)value;break;
                case "MODIFIEDFROM":ModifiedFrom=(string)value;break;
                case "NAME":Name=(string)value;break;
                case "PARENTID":if (value == null)ParentID=null;else ParentID=Convert.ToInt32(value);break;
                case "REMARK":Remark=(string)value;break;
                case "SEARCHNAME":SearchName=(string)value;break;
                case "SHORTNAME":ShortName=(string)value;break;
                case "TOCLEAN":if (value == null)ToClean=null;else ToClean=Convert.ToInt32(value);break;
                }
            }
		}
		#endregion
	}
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Associations_ChangeName_Response_ACTION",Namespace = "")]
	public class Associations_ChangeName_Response_ACTION: BaseEntity, IModifiedTag
	{
         #region [Properties]
			/// <summary>
			/// Признак передачи внешнего значения ID
			/// <para/>
			/// IsExternalID
			/// </summary>
			///<remarks>
			///Признак передачи внешнего значения ID
			///</remarks>
			[JsonProperty("IDType")]
			[DataMember(Name="IDType", EmitDefaultValue = false)]
			/*norestr*/

            public global::System.Int32? IDType  { get; set; } = 0;
			/// <summary>
			/// Указание языка для набора multi-language данных 
			/// <para/>
			/// Lang
			/// </summary>
			///<remarks>
			///Указание языка для набора multi-language данных 
			///</remarks>
			[JsonProperty("lang")]
			[DataMember(Name="lang", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
			[JsonIgnore]
            public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
         #endregion
        [JsonIgnore]
	    public DateTime? If_Modified_Since { get {return null;}}
        #region [IDateModified]
        [JsonIgnore]
	    public DateTime? LastModified { get { return If_Modified_Since;}}
        #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                }
            }
		}
		#endregion
    }
#endregion
#region [Associations/ChangeParent]

	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Associations_ChangeParent_Request_ACTION",Namespace = "")]
	public class Associations_ChangeParent_Request_ACTION : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// Признак получения акцепта пользователя перед выполнением операции
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - выполнять операцию без подтверждения</description>
///</item>
///<item>
///	<term>0 </term>
///	<description> - с подтверждением</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 1</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ConfAccepted")]
        [DataMember(Name="ConfAccepted",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? ConfAccepted  { get; set; } = 1;
              /// <summary>
        /// Сообщение для конечного пользователя, требующее его обязательного подтверждения
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ConfMessage")]
        [DataMember(Name="ConfMessage",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ConfMessage  { get; set; }
              /// <summary>
        /// дата активации
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("EffectiveDate")]
        [DataMember(Name="EffectiveDate",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? EffectiveDate  { get; set; }
              /// <summary>
        /// Название сущности REST, для которой выполняется POST операция
	    ///<list type='bullet'>
///<item>
///	<description>Зарезервировано</description>
///</item>
///<item>
///	<description>доступные значения (Customers</description>
///</item>
///<item>
///	<description>Associations)</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("EntityName")]
        [DataMember(Name="EntityName",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String EntityName { get; set; } = "<empty>";
              /// <summary>
        /// Формат вывода ошибки
	    ///<list type='bullet'>
///<item>
///	<description>'json'</description>
///</item>
///<item>
///	<description>'xml'</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : xml</para>
///<para>Max length : 25</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ErrFormat")]
        [DataMember(Name="ErrFormat",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ErrFormat     {
		get { return Format ?? "xml"; }
		set { this.Format = value; }
	}
              /// <summary>
        /// Признак передачи внешнего значения ID
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - внешний ID (для BIS всегда устанавливаем в 1)</description>
///</item>
///<item>
///	<term>0 </term>
///	<description> - внутренний ID</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 1</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("IDType")]
        [DataMember(Name="IDType",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? IDType  { get; set; } = 1;
              /// <summary>
        /// Указание языка для набора multi-language данных 
	    ///<list type='bullet'>
///<item>
///	<term>'uk' </term>
///	<description> -украинский</description>
///</item>
///<item>
///	<term>'ru' </term>
///	<description> -руский </description>
///</item>
///<item>
///	<term>'en' </term>
///	<description> -английский</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 'uk'</para>
///<para>Max length : 3</para>
///<para>Mandatory : Yes</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("lang")]
        [DataMember(Name="lang",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
			[JsonIgnore]
	public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
              /// <summary>
        /// Пользователь данного изменения
	    ///<list type='bullet'>
///<item>
///	<term>Username </term>
///	<description> - пользователь из контекста</description>
///</item>
///<item>
///	<term>NULL </term>
///	<description> -если неизвестен</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedBy")]
        [DataMember(Name="ModifiedBy",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedBy  { get; set; }
              /// <summary>
        /// Источник данного изменения
	    ///<list type='bullet'>
///<item>
///	<term>IP </term>
///	<description> -адрес/имя компьютера</description>
///</item>
///<item>
///	<term>NULL </term>
///	<description> - если неизвестен</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedFrom")]
        [DataMember(Name="ModifiedFrom",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedFrom  { get; set; }
              /// <summary>
        /// Идентификатор узла дерева
	    ///<list type='bullet'>
///<item>
///	<term>CLNT_ID </term>
///	<description> -справочник CLIENT_HISTORIES</description>
///</item>
///<item>
///	<term>ASSC_ID </term>
///	<description> -справочник ASSOCIATIONS</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("ParentID")]
        [DataMember(Name="ParentID",EmitDefaultValue = false)]
		[JsonRestrictedByValue("<empty>")]

			[Required]
[SecondaryKey("Customers_Request_GET","ID")]/*ACTION*/
	public global::System.Int32? ParentID 	{
		get 
		{ 
			if(emptyId.Equals(this.ParentId))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.ParentId, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.ParentId = value.ToString(); }
	}
              /// <summary>
        /// Идентификатор вышестоящего узла дерева, на который делается перенос
	    ///<list type='bullet'>
///<item>
///	<term>CLNT_ID </term>
///	<description> -справочник CLIENT_HISTORIES</description>
///</item>
///<item>
///	<term>ASSC_ID </term>
///	<description> -справочник ASSOCIATIONS</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ParentNode")]
        [DataMember(Name="ParentNode",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? ParentNode  { get; set; }
              /// <summary>
        /// Комментарий 
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Remark")]
        [DataMember(Name="Remark",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Remark  { get; set; }
              /// <summary>
        /// Статус узла дерева после перерегистрации
	    ///<list type='bullet'>
///<item>
///	<description>Зарезервировано</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("TargetStatusID")]
        [DataMember(Name="TargetStatusID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? TargetStatusID  { get; set; } = 0;
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "CONFACCEPTED": return ConfAccepted;
				    case "CONFMESSAGE": return ConfMessage;
				    case "EFFECTIVEDATE": return EffectiveDate;
				    case "ENTITYNAME": return EntityName;
				    case "ERRFORMAT": return ErrFormat;
				    case "IDTYPE": return IDType;
				    case "LANG": return lang;
				    case "MODIFIEDBY": return ModifiedBy;
				    case "MODIFIEDFROM": return ModifiedFrom;
				    case "PARENTID": return ParentID;
				    case "PARENTNODE": return ParentNode;
				    case "REMARK": return Remark;
				    case "TARGETSTATUSID": return TargetStatusID;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "CONFACCEPTED":if (value == null)ConfAccepted=null;else ConfAccepted=Convert.ToInt32(value);break;
                case "CONFMESSAGE":ConfMessage=(string)value;break;
                case "EFFECTIVEDATE":if (value == null)EffectiveDate=null;else EffectiveDate=Convert.ToDateTime(value);break;
                case "ENTITYNAME":EntityName=(string)value;break;
                case "ERRFORMAT":ErrFormat=(string)value;break;
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                case "LANG":lang=(string)value;break;
                case "MODIFIEDBY":ModifiedBy=(string)value;break;
                case "MODIFIEDFROM":ModifiedFrom=(string)value;break;
                case "PARENTID":if (value == null)ParentID=null;else ParentID=Convert.ToInt32(value);break;
                case "PARENTNODE":if (value == null)ParentNode=null;else ParentNode=Convert.ToInt32(value);break;
                case "REMARK":Remark=(string)value;break;
                case "TARGETSTATUSID":if (value == null)TargetStatusID=null;else TargetStatusID=Convert.ToInt32(value);break;
                }
            }
		}
		#endregion
	}
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Associations_ChangeParent_Response_ACTION",Namespace = "")]
	public class Associations_ChangeParent_Response_ACTION: BaseEntity, IModifiedTag
	{
         #region [Properties]
			/// <summary>
			/// Сообщение для конечного пользователя, требующее его обязательного подтверждения
			/// <para/>
			/// ConfMessage
			/// </summary>
			///<remarks>
			///Сообщение для конечного пользователя, требующее его обязательного подтверждения
			///</remarks>
			[JsonProperty("ConfMessage")]
			[DataMember(Name="ConfMessage", EmitDefaultValue = false)]
			/*norestr*/

            public global::System.String ConfMessage  { get; set; }
         #endregion
        [JsonIgnore]
	    public DateTime? If_Modified_Since { get {return null;}}
        #region [IDateModified]
        [JsonIgnore]
	    public DateTime? LastModified { get { return If_Modified_Since;}}
        #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                }
            }
		}
		#endregion
    }
#endregion
#region [Associations/ChangeStatus]

	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Associations_ChangeStatus_Request_ACTION",Namespace = "")]
	public class Associations_ChangeStatus_Request_ACTION : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// Зарезервировано
	    ///<list type='bullet'>
///<item>
///	<description>Не устанавливается пользователем</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ConfirmationMessage")]
        [DataMember(Name="ConfirmationMessage",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ConfirmationMessage  { get; set; }
              /// <summary>
        /// Дата изменения статуса
	    ///<list type='bullet'>
///<item>
///	<description>для изменения статуса на сейчас требуется указание времени</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("EffectiveDate")]
        [DataMember(Name="EffectiveDate",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? EffectiveDate  { get; set; }
              /// <summary>
        /// Название сущности для которой выполняется операция
	    ///<list type='bullet'>
///<item>
///	<description>Не устанавливается пользователем</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("EntityName")]
        [DataMember(Name="EntityName",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String EntityName { get; set; } = "<empty>";
              /// <summary>
        /// Формат вывода ошибки
	    ///<list type='bullet'>
///<item>
///	<description>'json'</description>
///</item>
///<item>
///	<description>'xml'</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : xml</para>
///<para>Max length : 25</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ErrFormat")]
        [DataMember(Name="ErrFormat",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ErrFormat     {
		get { return Format ?? "xml"; }
		set { this.Format = value; }
	}
              /// <summary>
        /// Признак передачи внешнего значения ID
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - внешний ID (для BIS всегда устанавливаем в 1)</description>
///</item>
///<item>
///	<term>0 </term>
///	<description> - внутренний ID</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("IDType")]
        [DataMember(Name="IDType",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? IDType  { get; set; } = 0;
              /// <summary>
        /// Указание языка для набора multi-language данных 
	    ///<list type='bullet'>
///<item>
///	<term>'uk' </term>
///	<description> -украинский</description>
///</item>
///<item>
///	<term>'ru' </term>
///	<description> -руский </description>
///</item>
///<item>
///	<term>'en' </term>
///	<description> -английский</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("lang")]
        [DataMember(Name="lang",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
			[JsonIgnore]
	public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
              /// <summary>
        /// Пользователь данного изменения
	    ///<list type='bullet'>
///<item>
///	<description>пользователь из контекста</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedBy")]
        [DataMember(Name="ModifiedBy",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedBy  { get; set; }
              /// <summary>
        /// Источник данного изменения
	    ///<list type='bullet'>
///<item>
///	<description>название компьютера из контекста</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedFrom")]
        [DataMember(Name="ModifiedFrom",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedFrom  { get; set; }
              /// <summary>
        /// Идентификатор абонента, клиента или ассоциации
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> -корень дерева учета</description>
///</item>
///<item>
///	<term>SUBS_ID </term>
///	<description> -справочник SUBSCRIBERS</description>
///</item>
///<item>
///	<term>CLNT_ID </term>
///	<description> -справочник CLIENT_HISTORIES</description>
///</item>
///<item>
///	<term>ASSC_ID </term>
///	<description> -справочник ASSOCIATIONS</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("ParentID")]
        [DataMember(Name="ParentID",EmitDefaultValue = false)]
		[JsonRestrictedByValue("<empty>")]

			[Required]
[SecondaryKey("Associations_Request_GET","ID")]/*ACTION*/
[SecondaryKey("Subscribers_Request_GET","ID")]/*ACTION*/
[SecondaryKey("Customers_Request_GET","ID")]/*ACTION*/
	public global::System.Int32? ParentID 	{
		get 
		{ 
			if(emptyId.Equals(this.ParentId))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.ParentId, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.ParentId = value.ToString(); }
	}
              /// <summary>
        /// Комментарий изменения статуса
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Remark")]
        [DataMember(Name="Remark",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String Remark  { get; set; }
              /// <summary>
        /// Статус узла дерева
	    ///<list type='bullet'>
///<item>
///	<description>согласно справочнику статусов (TNST_ID из TreeNodeStatuses)</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("StatusID")]
        [DataMember(Name="StatusID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? StatusID  { get; set; }
              /// <summary>
        /// Признак подтверждения операции со стороны пользователя
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - операция не требует подтверждения</description>
///</item>
///<item>
///	<term>0 </term>
///	<description> - требуется подтверждение</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 1</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("UserAcceptance")]
        [DataMember(Name="UserAcceptance",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? UserAcceptance  { get; set; } = 1;
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "CONFIRMATIONMESSAGE": return ConfirmationMessage;
				    case "EFFECTIVEDATE": return EffectiveDate;
				    case "ENTITYNAME": return EntityName;
				    case "ERRFORMAT": return ErrFormat;
				    case "IDTYPE": return IDType;
				    case "LANG": return lang;
				    case "MODIFIEDBY": return ModifiedBy;
				    case "MODIFIEDFROM": return ModifiedFrom;
				    case "PARENTID": return ParentID;
				    case "REMARK": return Remark;
				    case "STATUSID": return StatusID;
				    case "USERACCEPTANCE": return UserAcceptance;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "CONFIRMATIONMESSAGE":ConfirmationMessage=(string)value;break;
                case "EFFECTIVEDATE":if (value == null)EffectiveDate=null;else EffectiveDate=Convert.ToDateTime(value);break;
                case "ENTITYNAME":EntityName=(string)value;break;
                case "ERRFORMAT":ErrFormat=(string)value;break;
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                case "LANG":lang=(string)value;break;
                case "MODIFIEDBY":ModifiedBy=(string)value;break;
                case "MODIFIEDFROM":ModifiedFrom=(string)value;break;
                case "PARENTID":if (value == null)ParentID=null;else ParentID=Convert.ToInt32(value);break;
                case "REMARK":Remark=(string)value;break;
                case "STATUSID":if (value == null)StatusID=null;else StatusID=Convert.ToInt32(value);break;
                case "USERACCEPTANCE":if (value == null)UserAcceptance=null;else UserAcceptance=Convert.ToInt32(value);break;
                }
            }
		}
		#endregion
	}
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Associations_ChangeStatus_Response_ACTION",Namespace = "")]
	public class Associations_ChangeStatus_Response_ACTION: BaseEntity, IModifiedTag
	{
         #region [Properties]
			/// <summary>
			/// Ответ АПИ с текстом предупреждения перед изменением статуса
			/// <para/>
			/// ConfMessage
			/// </summary>
			///<remarks>
			///Ответ АПИ с текстом предупреждения перед изменением статуса
			///</remarks>
			[JsonProperty("ConfirmationMessage")]
			[DataMember(Name="ConfirmationMessage", EmitDefaultValue = false)]
			/*norestr*/

            public global::System.String ConfirmationMessage  { get; set; }
			/// <summary>
			/// Признак передачи внешнего значения ID
			/// <para/>
			/// IsExternalID
			/// </summary>
			///<remarks>
			///Признак передачи внешнего значения ID
			///</remarks>
			[JsonProperty("IDType")]
			[DataMember(Name="IDType", EmitDefaultValue = false)]
			/*norestr*/

            public global::System.Int32? IDType  { get; set; } = 0;
			/// <summary>
			/// Указание языка для набора multi-language данных 
			/// <para/>
			/// Lang
			/// </summary>
			///<remarks>
			///Указание языка для набора multi-language данных 
			///</remarks>
			[JsonProperty("lang")]
			[DataMember(Name="lang", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
			[JsonIgnore]
            public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
         #endregion
        [JsonIgnore]
	    public DateTime? If_Modified_Since { get {return null;}}
        #region [IDateModified]
        [JsonIgnore]
	    public DateTime? LastModified { get { return If_Modified_Since;}}
        #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                }
            }
		}
		#endregion
    }
#endregion
#region [Associations/Deactivate]

	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Associations_Deactivate_Request_ACTION",Namespace = "")]
	public class Associations_Deactivate_Request_ACTION : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// Дата деактивации
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("EffectiveDate")]
        [DataMember(Name="EffectiveDate",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? EffectiveDate  { get; set; }
              /// <summary>
        /// Имя сущности для которой выполняется операция
	    ///<list type='bullet'>
///<item>
///	<description>Допустимые значения Associations</description>
///</item>
///<item>
///	<description>Customers</description>
///</item>
///<item>
///	<description>Subscribers</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("EntityName")]
        [DataMember(Name="EntityName",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String EntityName { get; set; } = "<empty>";
              /// <summary>
        /// Формат вывода ошибки
	    ///<list type='bullet'>
///<item>
///	<description>'json'</description>
///</item>
///<item>
///	<description>'xml'</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : xml</para>
///<para>Max length : 25</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ErrFormat")]
        [DataMember(Name="ErrFormat",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ErrFormat     {
		get { return Format ?? "xml"; }
		set { this.Format = value; }
	}
              /// <summary>
        /// Уникальный идентификатор транзакции для идемпотентности
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Header
        /// </remarks>
        [JsonProperty("global_unique_id")]
        [DataMember(Name="global_unique_id",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String global_unique_id  { get; set; }
              /// <summary>
        /// Признак передачи внешнего значения ID
	    ///<list type='bullet'>
///<item>
///	<term>0 </term>
///	<description> - внутренний</description>
///</item>
///<item>
///	<term>1 </term>
///	<description> - внешний</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("IDType")]
        [DataMember(Name="IDType",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? IDType  { get; set; }
              /// <summary>
        /// Фильтр для отбора узлов по коду метки
	    ///<list type='bullet'>
///<item>
///	<description>LABEL_CODE из TREENODE_LABELS</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("LabelCode")]
        [DataMember(Name="LabelCode",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String LabelCode  { get; set; }
              /// <summary>
        /// Указание языка для набора multi-language данных 
	    ///<list type='bullet'>
///<item>
///	<term>'uk' </term>
///	<description> -украинский</description>
///</item>
///<item>
///	<term>'ru' </term>
///	<description> -руский </description>
///</item>
///<item>
///	<term>'en' </term>
///	<description> -английский</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("lang")]
        [DataMember(Name="lang",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
			[JsonIgnore]
	public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
              /// <summary>
        /// Пользователь данного изменения
	    ///<list type='bullet'>
///<item>
///	<term>Username </term>
///	<description> - пользователь из контекста</description>
///</item>
///<item>
///	<term>NULL </term>
///	<description> -если неизвестен</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedBy")]
        [DataMember(Name="ModifiedBy",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedBy  { get; set; }
              /// <summary>
        /// Источник данного изменения
	    ///<list type='bullet'>
///<item>
///	<term>IP </term>
///	<description> -адрес/имя компьютера</description>
///</item>
///<item>
///	<term>NULL </term>
///	<description> - если неизвестен</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedFrom")]
        [DataMember(Name="ModifiedFrom",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedFrom  { get; set; }
              /// <summary>
        /// Адрес для нотификации о деактивации
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Notification")]
        [DataMember(Name="Notification",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Notification  { get; set; }
              /// <summary>
        /// Идентификатор абонента
	    ///<list type='bullet'>
///<item>
///	<description>SUBS_ID из справочника SUBSCRIBERS</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("ParentID")]
        [DataMember(Name="ParentID",EmitDefaultValue = false)]
		[JsonRestrictedByValue("<empty>")]

			[Required]
[SecondaryKey("Subscribers_Request_GET","ID")]/*ACTION*/
	public global::System.Int32? ParentID 	{
		get 
		{ 
			if(emptyId.Equals(this.ParentId))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.ParentId, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.ParentId = value.ToString(); }
	}
              /// <summary>
        /// Телефон для нотификации о деактивации
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("PhoneNumber")]
        [DataMember(Name="PhoneNumber",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String PhoneNumber  { get; set; }
              /// <summary>
        /// Комментарий
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Remark")]
        [DataMember(Name="Remark",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String Remark  { get; set; }
              /// <summary>
        /// Фильтр для отбора узлов по текущему статусу узла дерева
	    ///<list type='bullet'>
///<item>
///	<description>tnst_Code из TreeNodeStatuses</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("StatusCode")]
        [DataMember(Name="StatusCode",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String StatusCode  { get; set; }
              /// <summary>
        /// Значение статуса узла после выполнения операции
	    ///<list type='bullet'>
///<item>
///	<description>tnst_Code из TreeNodeStatuses</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("TargetStatusCode")]
        [DataMember(Name="TargetStatusCode",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String TargetStatusCode  { get; set; }
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "EFFECTIVEDATE": return EffectiveDate;
				    case "ENTITYNAME": return EntityName;
				    case "ERRFORMAT": return ErrFormat;
				    case "GLOBAL_UNIQUE_ID": return global_unique_id;
				    case "IDTYPE": return IDType;
				    case "LABELCODE": return LabelCode;
				    case "LANG": return lang;
				    case "MODIFIEDBY": return ModifiedBy;
				    case "MODIFIEDFROM": return ModifiedFrom;
				    case "NOTIFICATION": return Notification;
				    case "PARENTID": return ParentID;
				    case "PHONENUMBER": return PhoneNumber;
				    case "REMARK": return Remark;
				    case "STATUSCODE": return StatusCode;
				    case "TARGETSTATUSCODE": return TargetStatusCode;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "EFFECTIVEDATE":if (value == null)EffectiveDate=null;else EffectiveDate=Convert.ToDateTime(value);break;
                case "ENTITYNAME":EntityName=(string)value;break;
                case "ERRFORMAT":ErrFormat=(string)value;break;
                case "GLOBAL_UNIQUE_ID":global_unique_id=(string)value;break;
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                case "LABELCODE":LabelCode=(string)value;break;
                case "LANG":lang=(string)value;break;
                case "MODIFIEDBY":ModifiedBy=(string)value;break;
                case "MODIFIEDFROM":ModifiedFrom=(string)value;break;
                case "NOTIFICATION":Notification=(string)value;break;
                case "PARENTID":if (value == null)ParentID=null;else ParentID=Convert.ToInt32(value);break;
                case "PHONENUMBER":PhoneNumber=(string)value;break;
                case "REMARK":Remark=(string)value;break;
                case "STATUSCODE":StatusCode=(string)value;break;
                case "TARGETSTATUSCODE":TargetStatusCode=(string)value;break;
                }
            }
		}
		#endregion
	}
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Associations_Deactivate_Response_ACTION",Namespace = "")]
	public class Associations_Deactivate_Response_ACTION: BaseEntity, IModifiedTag
	{
         #region [Properties]
			/// <summary>
			/// Кол-во обработанных записей 
			/// <para/>
			/// AffectedCount
			/// </summary>
			///<remarks>
			///Кол-во обработанных записей 
			///</remarks>
			[JsonProperty("AffectedCount")]
			[DataMember(Name="AffectedCount", EmitDefaultValue = false)]
			/*norestr*/

            public global::System.Int32? AffectedCount  { get; set; }
			/// <summary>
			/// Признак передачи внешнего значения ID
			/// <para/>
			/// IsExternalID
			/// </summary>
			///<remarks>
			///Признак передачи внешнего значения ID
			///</remarks>
			[JsonProperty("IDType")]
			[DataMember(Name="IDType", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
            public global::System.Int32? IDType  { get; set; }
			/// <summary>
			/// Указание языка для набора multi-language данных 
			/// <para/>
			/// Lang
			/// </summary>
			///<remarks>
			///Указание языка для набора multi-language данных 
			///</remarks>
			[JsonProperty("lang")]
			[DataMember(Name="lang", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
			[JsonIgnore]
            public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
			/// <summary>
			/// Идентификатор процесса 
			/// <para/>
			/// Wev_ID
			/// </summary>
			///<remarks>
			///Идентификатор процесса 
			///</remarks>
			[JsonProperty("WorkEventID")]
			[DataMember(Name="WorkEventID", EmitDefaultValue = false)]
			/*norestr*/

            public global::System.Int32? WorkEventID  { get; set; }
         #endregion
        [JsonIgnore]
	    public DateTime? If_Modified_Since { get {return null;}}
        #region [IDateModified]
        [JsonIgnore]
	    public DateTime? LastModified { get { return If_Modified_Since;}}
        #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                }
            }
		}
		#endregion
    }
#endregion
#region [Associations/Details]
  
    
    ///<remarks>GET &lt;host&gt;[:&lt;port&gt;]/api/v1/bss/Associations/Details
///</remarks>
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Associations_Details_Request_GET",Namespace = "")]
	public class Associations_Details_Request_GET : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// Идентификатор Абонента
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ID")]
        [DataMember(Name="ID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? ID 	{
		get 
		{ 
			if(emptyId.Equals(this.Id))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.Id, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.Id = value.ToString(); }
	}
              /// <summary>
        /// Формат вывода ошибки
	    ///<list type='bullet'>
///<item>
///	<description>'json'</description>
///</item>
///<item>
///	<description>'xml'</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : xml</para>
///<para>Max length : 25</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ErrFormat")]
        [DataMember(Name="ErrFormat",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ErrFormat     {
		get { return Format ?? "xml"; }
		set { this.Format = value; }
	}
              /// <summary>
        /// Признак передачи внешнего значения ID
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - внешний ID (для BIS всегда устанавливаем в 1)</description>
///</item>
///<item>
///	<term>0 </term>
///	<description> - внутренний ID</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("IDType")]
        [DataMember(Name="IDType",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? IDType  { get; set; } = 0;
              /// <summary>
        /// Указание языка для набора multi-language данных 
	    ///<list type='bullet'>
///<item>
///	<term>'uk' </term>
///	<description> -украинский</description>
///</item>
///<item>
///	<term>'ru' </term>
///	<description> -руский </description>
///</item>
///<item>
///	<term>'en' </term>
///	<description> -английский</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("lang")]
        [DataMember(Name="lang",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
			[JsonIgnore]
	public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
              /// <summary>
        /// Дата модификации для http-тега If-Modified-Since
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("CacheControlDate")]
        [DataMember(Name="CacheControlDate",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? CacheControlDate  { get; set; }
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "ID": return ID;
				    case "ERRFORMAT": return ErrFormat;
				    case "IDTYPE": return IDType;
				    case "LANG": return lang;
				    case "CACHECONTROLDATE": return CacheControlDate;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "ID":if (value == null)ID=null;else ID=Convert.ToInt32(value);break;
                case "ERRFORMAT":ErrFormat=(string)value;break;
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                case "LANG":lang=(string)value;break;
                case "CACHECONTROLDATE":if (value == null)CacheControlDate=null;else CacheControlDate=Convert.ToDateTime(value);break;
                }
            }
		}
		#endregion
	}
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Associations_Details_Response_GET",Namespace = "")]
	public class Associations_Details_Response_GET: BaseEntity, IModifiedTag
	{
         #region [Properties]
			/// <summary>
			/// Указание языка для набора multi-language данных 
			/// <para/>
			/// Lang
			/// </summary>
			///<remarks>
			///Указание языка для набора multi-language данных 
			///</remarks>
			[JsonProperty("lang")]
			[DataMember(Name="lang", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
			[JsonIgnore]
            public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
			/// <summary>
			/// Дата модификации для http-тега If-Modified-Since
			/// <para/>
			/// IfModifiedSinceDate
			/// </summary>
			///<remarks>
			///Дата модификации для http-тега If-Modified-Since
			///</remarks>
			[JsonProperty("CacheControlDate")]
			[DataMember(Name="CacheControlDate", EmitDefaultValue = false)]
			/*norestr*/

            public global::System.DateTime? CacheControlDate  { get; set; }
         #endregion
        [JsonIgnore]
	    public DateTime? If_Modified_Since { get {return CacheControlDate;}}
        #region [IDateModified]
        [JsonIgnore]
	    public DateTime? LastModified { get { return If_Modified_Since;}}
        #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "LANG": return lang;
				    case "CACHECONTROLDATE": return CacheControlDate;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "LANG":lang=(string)value;break;
                case "CACHECONTROLDATE":if (value == null)CacheControlDate=null;else CacheControlDate=Convert.ToDateTime(value);break;
                }
            }
		}
		#endregion
    }
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Associations_Details_Response_GET_OUTPUT",Namespace = "")]
	public class Associations_Details_Response_GET_OUTPUT : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("debt_Amount")]
        [DataMember(Name="debt_Amount",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Decimal? debt_Amount  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("debt_Date")]
        [DataMember(Name="debt_Date",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.DateTime? debt_Date  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("dep_ID")]
        [DataMember(Name="dep_ID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? dep_ID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ext_ExtNum")]
        [DataMember(Name="ext_ExtNum",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String ext_ExtNum  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ext_ID_count")]
        [DataMember(Name="ext_ID_count",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? ext_ID_count  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("grp_ID")]
        [DataMember(Name="grp_ID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? grp_ID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("grp_Name")]
        [DataMember(Name="grp_Name",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String grp_Name  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("isActivated")]
        [DataMember(Name="isActivated",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? isActivated  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("isEditAllow")]
        [DataMember(Name="isEditAllow",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? isEditAllow  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("isEditWorkPlace")]
        [DataMember(Name="isEditWorkPlace",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? isEditWorkPlace  { get; set; }
              /// <summary>
        /// Указание языка для набора multi-language данных 
	    ///<list type='bullet'>
///<item>
///	<term>'uk' </term>
///	<description> -украинский</description>
///</item>
///<item>
///	<term>'ru' </term>
///	<description> -руский </description>
///</item>
///<item>
///	<term>'en' </term>
///	<description> -английский</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("lang")]
        [DataMember(Name="lang",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
			[JsonIgnore]
	public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("lng_ID")]
        [DataMember(Name="lng_ID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? lng_ID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("loc_Name")]
        [DataMember(Name="loc_Name",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String loc_Name  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Location_ID")]
        [DataMember(Name="Location_ID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? Location_ID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ntw_ID")]
        [DataMember(Name="ntw_ID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? ntw_ID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("pbx_networkName")]
        [DataMember(Name="pbx_networkName",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String pbx_networkName  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ProfileType")]
        [DataMember(Name="ProfileType",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? ProfileType  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("SubsCount")]
        [DataMember(Name="SubsCount",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? SubsCount  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("tnh_LastFM")]
        [DataMember(Name="tnh_LastFM",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String tnh_LastFM  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("tnst_ExternalID")]
        [DataMember(Name="tnst_ExternalID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? tnst_ExternalID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("tnst_ID")]
        [DataMember(Name="tnst_ID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? tnst_ID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("tnt_AccountMandatory")]
        [DataMember(Name="tnt_AccountMandatory",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? tnt_AccountMandatory  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("tnt_ID")]
        [DataMember(Name="tnt_ID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? tnt_ID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("TreeNodeType")]
        [DataMember(Name="TreeNodeType",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String TreeNodeType  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("trf_ID")]
        [DataMember(Name="trf_ID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? trf_ID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("CacheControlDate")]
        [DataMember(Name="CacheControlDate",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? CacheControlDate  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_FirstName")]
        [DataMember(Name="abn_FirstName",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String abn_FirstName  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abc_Balance_Personal")]
        [DataMember(Name="abc_Balance_Personal",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Decimal? abc_Balance_Personal  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abc_Date")]
        [DataMember(Name="abc_Date",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.DateTime? abc_Date  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abc_Date_Personal")]
        [DataMember(Name="abc_Date_Personal",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.DateTime? abc_Date_Personal  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_Balance")]
        [DataMember(Name="abn_Balance",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Decimal? abn_Balance  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_CreateDate")]
        [DataMember(Name="abn_CreateDate",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.DateTime? abn_CreateDate  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_Date")]
        [DataMember(Name="abn_Date",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.DateTime? abn_Date  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_Employe_Export_ID")]
        [DataMember(Name="abn_Employe_Export_ID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String abn_Employe_Export_ID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_Employee_ID")]
        [DataMember(Name="abn_Employee_ID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String abn_Employee_ID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_ExternalID")]
        [DataMember(Name="abn_ExternalID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? abn_ExternalID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_Guid")]
        [DataMember(Name="abn_Guid",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Guid? abn_Guid  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ID")]
        [DataMember(Name="ID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? ID 	{
		get 
		{ 
			if(emptyId.Equals(this.Id))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.Id, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.Id = value.ToString(); }
	}
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_ID_Boss")]
        [DataMember(Name="abn_ID_Boss",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? abn_ID_Boss  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_IsExistAD")]
        [DataMember(Name="abn_IsExistAD",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? abn_IsExistAD  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_IsGuest")]
        [DataMember(Name="abn_IsGuest",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? abn_IsGuest  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_LastFM")]
        [DataMember(Name="abn_LastFM",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String abn_LastFM  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_MiddleName")]
        [DataMember(Name="abn_MiddleName",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String abn_MiddleName  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_ModifiedBy")]
        [DataMember(Name="abn_ModifiedBy",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String abn_ModifiedBy  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_ModifiedDate")]
        [DataMember(Name="abn_ModifiedDate",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.DateTime? abn_ModifiedDate  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_ModifiedFrom")]
        [DataMember(Name="abn_ModifiedFrom",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String abn_ModifiedFrom  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_NestedSets_Left")]
        [DataMember(Name="abn_NestedSets_Left",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? abn_NestedSets_Left  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_NestedSets_Right")]
        [DataMember(Name="abn_NestedSets_Right",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? abn_NestedSets_Right  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_Password")]
        [DataMember(Name="abn_Password",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String abn_Password  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_PositionCode")]
        [DataMember(Name="abn_PositionCode",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String abn_PositionCode  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_ShowPhoneDirectory")]
        [DataMember(Name="abn_ShowPhoneDirectory",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? abn_ShowPhoneDirectory  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_WorkPlace")]
        [DataMember(Name="abn_WorkPlace",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String abn_WorkPlace  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_WorkPlace_Personal")]
        [DataMember(Name="abn_WorkPlace_Personal",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String abn_WorkPlace_Personal  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_XmlData")]
        [DataMember(Name="abn_XmlData",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String abn_XmlData  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("AbonentFullName")]
        [DataMember(Name="AbonentFullName",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String AbonentFullName  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("acnt_ID")]
        [DataMember(Name="acnt_ID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? acnt_ID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("acnt_ID_count")]
        [DataMember(Name="acnt_ID_count",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? acnt_ID_count  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("acnt_IsPersonal")]
        [DataMember(Name="acnt_IsPersonal",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? acnt_IsPersonal  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("acnt_Number")]
        [DataMember(Name="acnt_Number",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String acnt_Number  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("acnt_Number_Personal")]
        [DataMember(Name="acnt_Number_Personal",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String acnt_Number_Personal  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Actpd_Name")]
        [DataMember(Name="Actpd_Name",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String Actpd_Name  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Actpd_Name_Personal")]
        [DataMember(Name="Actpd_Name_Personal",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String Actpd_Name_Personal  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_LastName")]
        [DataMember(Name="abn_LastName",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String abn_LastName  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_Login")]
        [DataMember(Name="abn_Login",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String abn_Login  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abb_Balance")]
        [DataMember(Name="abb_Balance",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Decimal? abb_Balance  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abb_Balance_Personal")]
        [DataMember(Name="abb_Balance_Personal",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Decimal? abb_Balance_Personal  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abb_ModifiedDate")]
        [DataMember(Name="abb_ModifiedDate",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.DateTime? abb_ModifiedDate  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abb_ModifiedDate_Personal")]
        [DataMember(Name="abb_ModifiedDate_Personal",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.DateTime? abb_ModifiedDate_Personal  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abc_Balance")]
        [DataMember(Name="abc_Balance",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Decimal? abc_Balance  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("atnsb_DateEnd")]
        [DataMember(Name="atnsb_DateEnd",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.DateTime? atnsb_DateEnd  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("atnsb_DateStart")]
        [DataMember(Name="atnsb_DateStart",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.DateTime? atnsb_DateStart  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("aut_ID_count")]
        [DataMember(Name="aut_ID_count",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? aut_ID_count  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Boss_Tnt_Type")]
        [DataMember(Name="Boss_Tnt_Type",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String Boss_Tnt_Type  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("BossFullName")]
        [DataMember(Name="BossFullName",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String BossFullName  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("com_Id")]
        [DataMember(Name="com_Id",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? com_Id  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("isRefusalChangeName")]
        [DataMember(Name="isRefusalChangeName",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? isRefusalChangeName  { get; set; }
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "DEBT_AMOUNT": return debt_Amount;
				    case "DEBT_DATE": return debt_Date;
				    case "DEP_ID": return dep_ID;
				    case "EXT_EXTNUM": return ext_ExtNum;
				    case "EXT_ID_COUNT": return ext_ID_count;
				    case "GRP_ID": return grp_ID;
				    case "GRP_NAME": return grp_Name;
				    case "ISACTIVATED": return isActivated;
				    case "ISEDITALLOW": return isEditAllow;
				    case "ISEDITWORKPLACE": return isEditWorkPlace;
				    case "LANG": return lang;
				    case "LNG_ID": return lng_ID;
				    case "LOC_NAME": return loc_Name;
				    case "LOCATION_ID": return Location_ID;
				    case "NTW_ID": return ntw_ID;
				    case "PBX_NETWORKNAME": return pbx_networkName;
				    case "PROFILETYPE": return ProfileType;
				    case "SUBSCOUNT": return SubsCount;
				    case "TNH_LASTFM": return tnh_LastFM;
				    case "TNST_EXTERNALID": return tnst_ExternalID;
				    case "TNST_ID": return tnst_ID;
				    case "TNT_ACCOUNTMANDATORY": return tnt_AccountMandatory;
				    case "TNT_ID": return tnt_ID;
				    case "TREENODETYPE": return TreeNodeType;
				    case "TRF_ID": return trf_ID;
				    case "CACHECONTROLDATE": return CacheControlDate;
				    case "ABN_FIRSTNAME": return abn_FirstName;
				    case "ABC_BALANCE_PERSONAL": return abc_Balance_Personal;
				    case "ABC_DATE": return abc_Date;
				    case "ABC_DATE_PERSONAL": return abc_Date_Personal;
				    case "ABN_BALANCE": return abn_Balance;
				    case "ABN_CREATEDATE": return abn_CreateDate;
				    case "ABN_DATE": return abn_Date;
				    case "ABN_EMPLOYE_EXPORT_ID": return abn_Employe_Export_ID;
				    case "ABN_EMPLOYEE_ID": return abn_Employee_ID;
				    case "ABN_EXTERNALID": return abn_ExternalID;
				    case "ABN_GUID": return abn_Guid;
				    case "ID": return ID;
				    case "ABN_ID_BOSS": return abn_ID_Boss;
				    case "ABN_ISEXISTAD": return abn_IsExistAD;
				    case "ABN_ISGUEST": return abn_IsGuest;
				    case "ABN_LASTFM": return abn_LastFM;
				    case "ABN_MIDDLENAME": return abn_MiddleName;
				    case "ABN_MODIFIEDBY": return abn_ModifiedBy;
				    case "ABN_MODIFIEDDATE": return abn_ModifiedDate;
				    case "ABN_MODIFIEDFROM": return abn_ModifiedFrom;
				    case "ABN_NESTEDSETS_LEFT": return abn_NestedSets_Left;
				    case "ABN_NESTEDSETS_RIGHT": return abn_NestedSets_Right;
				    case "ABN_PASSWORD": return abn_Password;
				    case "ABN_POSITIONCODE": return abn_PositionCode;
				    case "ABN_SHOWPHONEDIRECTORY": return abn_ShowPhoneDirectory;
				    case "ABN_WORKPLACE": return abn_WorkPlace;
				    case "ABN_WORKPLACE_PERSONAL": return abn_WorkPlace_Personal;
				    case "ABN_XMLDATA": return abn_XmlData;
				    case "ABONENTFULLNAME": return AbonentFullName;
				    case "ACNT_ID": return acnt_ID;
				    case "ACNT_ID_COUNT": return acnt_ID_count;
				    case "ACNT_ISPERSONAL": return acnt_IsPersonal;
				    case "ACNT_NUMBER": return acnt_Number;
				    case "ACNT_NUMBER_PERSONAL": return acnt_Number_Personal;
				    case "ACTPD_NAME": return Actpd_Name;
				    case "ACTPD_NAME_PERSONAL": return Actpd_Name_Personal;
				    case "ABN_LASTNAME": return abn_LastName;
				    case "ABN_LOGIN": return abn_Login;
				    case "ABB_BALANCE": return abb_Balance;
				    case "ABB_BALANCE_PERSONAL": return abb_Balance_Personal;
				    case "ABB_MODIFIEDDATE": return abb_ModifiedDate;
				    case "ABB_MODIFIEDDATE_PERSONAL": return abb_ModifiedDate_Personal;
				    case "ABC_BALANCE": return abc_Balance;
				    case "ATNSB_DATEEND": return atnsb_DateEnd;
				    case "ATNSB_DATESTART": return atnsb_DateStart;
				    case "AUT_ID_COUNT": return aut_ID_count;
				    case "BOSS_TNT_TYPE": return Boss_Tnt_Type;
				    case "BOSSFULLNAME": return BossFullName;
				    case "COM_ID": return com_Id;
				    case "ISREFUSALCHANGENAME": return isRefusalChangeName;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "DEBT_AMOUNT":if (value == null)debt_Amount=null;else debt_Amount=Convert.ToDecimal(value);break;
                case "DEBT_DATE":if (value == null)debt_Date=null;else debt_Date=Convert.ToDateTime(value);break;
                case "DEP_ID":if (value == null)dep_ID=null;else dep_ID=Convert.ToInt32(value);break;
                case "EXT_EXTNUM":ext_ExtNum=(string)value;break;
                case "EXT_ID_COUNT":if (value == null)ext_ID_count=null;else ext_ID_count=Convert.ToInt32(value);break;
                case "GRP_ID":if (value == null)grp_ID=null;else grp_ID=Convert.ToInt32(value);break;
                case "GRP_NAME":grp_Name=(string)value;break;
                case "ISACTIVATED":if (value == null)isActivated=null;else isActivated=Convert.ToInt32(value);break;
                case "ISEDITALLOW":if (value == null)isEditAllow=null;else isEditAllow=Convert.ToInt32(value);break;
                case "ISEDITWORKPLACE":if (value == null)isEditWorkPlace=null;else isEditWorkPlace=Convert.ToInt32(value);break;
                case "LANG":lang=(string)value;break;
                case "LNG_ID":if (value == null)lng_ID=null;else lng_ID=Convert.ToInt32(value);break;
                case "LOC_NAME":loc_Name=(string)value;break;
                case "LOCATION_ID":if (value == null)Location_ID=null;else Location_ID=Convert.ToInt32(value);break;
                case "NTW_ID":if (value == null)ntw_ID=null;else ntw_ID=Convert.ToInt32(value);break;
                case "PBX_NETWORKNAME":pbx_networkName=(string)value;break;
                case "PROFILETYPE":if (value == null)ProfileType=null;else ProfileType=Convert.ToInt32(value);break;
                case "SUBSCOUNT":if (value == null)SubsCount=null;else SubsCount=Convert.ToInt32(value);break;
                case "TNH_LASTFM":tnh_LastFM=(string)value;break;
                case "TNST_EXTERNALID":if (value == null)tnst_ExternalID=null;else tnst_ExternalID=Convert.ToInt32(value);break;
                case "TNST_ID":if (value == null)tnst_ID=null;else tnst_ID=Convert.ToInt32(value);break;
                case "TNT_ACCOUNTMANDATORY":if (value == null)tnt_AccountMandatory=null;else tnt_AccountMandatory=Convert.ToInt32(value);break;
                case "TNT_ID":if (value == null)tnt_ID=null;else tnt_ID=Convert.ToInt32(value);break;
                case "TREENODETYPE":TreeNodeType=(string)value;break;
                case "TRF_ID":if (value == null)trf_ID=null;else trf_ID=Convert.ToInt32(value);break;
                case "CACHECONTROLDATE":if (value == null)CacheControlDate=null;else CacheControlDate=Convert.ToDateTime(value);break;
                case "ABN_FIRSTNAME":abn_FirstName=(string)value;break;
                case "ABC_BALANCE_PERSONAL":if (value == null)abc_Balance_Personal=null;else abc_Balance_Personal=Convert.ToDecimal(value);break;
                case "ABC_DATE":if (value == null)abc_Date=null;else abc_Date=Convert.ToDateTime(value);break;
                case "ABC_DATE_PERSONAL":if (value == null)abc_Date_Personal=null;else abc_Date_Personal=Convert.ToDateTime(value);break;
                case "ABN_BALANCE":if (value == null)abn_Balance=null;else abn_Balance=Convert.ToDecimal(value);break;
                case "ABN_CREATEDATE":if (value == null)abn_CreateDate=null;else abn_CreateDate=Convert.ToDateTime(value);break;
                case "ABN_DATE":if (value == null)abn_Date=null;else abn_Date=Convert.ToDateTime(value);break;
                case "ABN_EMPLOYE_EXPORT_ID":abn_Employe_Export_ID=(string)value;break;
                case "ABN_EMPLOYEE_ID":abn_Employee_ID=(string)value;break;
                case "ABN_EXTERNALID":if (value == null)abn_ExternalID=null;else abn_ExternalID=Convert.ToInt32(value);break;
                case "ABN_GUID":if (value == null)abn_Guid=null;else abn_Guid=(Guid)value;break;
                case "ID":if (value == null)ID=null;else ID=Convert.ToInt32(value);break;
                case "ABN_ID_BOSS":if (value == null)abn_ID_Boss=null;else abn_ID_Boss=Convert.ToInt32(value);break;
                case "ABN_ISEXISTAD":if (value == null)abn_IsExistAD=null;else abn_IsExistAD=Convert.ToInt32(value);break;
                case "ABN_ISGUEST":if (value == null)abn_IsGuest=null;else abn_IsGuest=Convert.ToInt32(value);break;
                case "ABN_LASTFM":abn_LastFM=(string)value;break;
                case "ABN_MIDDLENAME":abn_MiddleName=(string)value;break;
                case "ABN_MODIFIEDBY":abn_ModifiedBy=(string)value;break;
                case "ABN_MODIFIEDDATE":if (value == null)abn_ModifiedDate=null;else abn_ModifiedDate=Convert.ToDateTime(value);break;
                case "ABN_MODIFIEDFROM":abn_ModifiedFrom=(string)value;break;
                case "ABN_NESTEDSETS_LEFT":if (value == null)abn_NestedSets_Left=null;else abn_NestedSets_Left=Convert.ToInt32(value);break;
                case "ABN_NESTEDSETS_RIGHT":if (value == null)abn_NestedSets_Right=null;else abn_NestedSets_Right=Convert.ToInt32(value);break;
                case "ABN_PASSWORD":abn_Password=(string)value;break;
                case "ABN_POSITIONCODE":abn_PositionCode=(string)value;break;
                case "ABN_SHOWPHONEDIRECTORY":if (value == null)abn_ShowPhoneDirectory=null;else abn_ShowPhoneDirectory=Convert.ToInt32(value);break;
                case "ABN_WORKPLACE":abn_WorkPlace=(string)value;break;
                case "ABN_WORKPLACE_PERSONAL":abn_WorkPlace_Personal=(string)value;break;
                case "ABN_XMLDATA":abn_XmlData=(string)value;break;
                case "ABONENTFULLNAME":AbonentFullName=(string)value;break;
                case "ACNT_ID":if (value == null)acnt_ID=null;else acnt_ID=Convert.ToInt32(value);break;
                case "ACNT_ID_COUNT":if (value == null)acnt_ID_count=null;else acnt_ID_count=Convert.ToInt32(value);break;
                case "ACNT_ISPERSONAL":if (value == null)acnt_IsPersonal=null;else acnt_IsPersonal=Convert.ToInt32(value);break;
                case "ACNT_NUMBER":acnt_Number=(string)value;break;
                case "ACNT_NUMBER_PERSONAL":acnt_Number_Personal=(string)value;break;
                case "ACTPD_NAME":Actpd_Name=(string)value;break;
                case "ACTPD_NAME_PERSONAL":Actpd_Name_Personal=(string)value;break;
                case "ABN_LASTNAME":abn_LastName=(string)value;break;
                case "ABN_LOGIN":abn_Login=(string)value;break;
                case "ABB_BALANCE":if (value == null)abb_Balance=null;else abb_Balance=Convert.ToDecimal(value);break;
                case "ABB_BALANCE_PERSONAL":if (value == null)abb_Balance_Personal=null;else abb_Balance_Personal=Convert.ToDecimal(value);break;
                case "ABB_MODIFIEDDATE":if (value == null)abb_ModifiedDate=null;else abb_ModifiedDate=Convert.ToDateTime(value);break;
                case "ABB_MODIFIEDDATE_PERSONAL":if (value == null)abb_ModifiedDate_Personal=null;else abb_ModifiedDate_Personal=Convert.ToDateTime(value);break;
                case "ABC_BALANCE":if (value == null)abc_Balance=null;else abc_Balance=Convert.ToDecimal(value);break;
                case "ATNSB_DATEEND":if (value == null)atnsb_DateEnd=null;else atnsb_DateEnd=Convert.ToDateTime(value);break;
                case "ATNSB_DATESTART":if (value == null)atnsb_DateStart=null;else atnsb_DateStart=Convert.ToDateTime(value);break;
                case "AUT_ID_COUNT":if (value == null)aut_ID_count=null;else aut_ID_count=Convert.ToInt32(value);break;
                case "BOSS_TNT_TYPE":Boss_Tnt_Type=(string)value;break;
                case "BOSSFULLNAME":BossFullName=(string)value;break;
                case "COM_ID":if (value == null)com_Id=null;else com_Id=Convert.ToInt32(value);break;
                case "ISREFUSALCHANGENAME":if (value == null)isRefusalChangeName=null;else isRefusalChangeName=Convert.ToInt32(value);break;
                }
            }
		}
		#endregion
	}
#endregion
#region [Associations/SetLabels]

	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Associations_SetLabels_Request_ACTION",Namespace = "")]
	public class Associations_SetLabels_Request_ACTION : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// Дата изменений
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("EffectiveDate")]
        [DataMember(Name="EffectiveDate",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? EffectiveDate  { get; set; }
              /// <summary>
        /// Название сущности для которой выполняется операция
	    ///<list type='bullet'>
///<item>
///	<description>Допустимые значения Associations</description>
///</item>
///<item>
///	<description>Customers</description>
///</item>
///<item>
///	<description>Subscribers</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("EntityName")]
        [DataMember(Name="EntityName",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String EntityName { get; set; } = "<empty>";
              /// <summary>
        /// Формат вывода ошибки
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 'json'</para>
///<para>Max length : 25</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ErrFormat")]
        [DataMember(Name="ErrFormat",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ErrFormat     {
		get { return Format ?? "json"; }
		set { this.Format = value; }
	}
              /// <summary>
        /// Признак передачи внешнего значения ID
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("IDType")]
        [DataMember(Name="IDType",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? IDType  { get; set; }
              /// <summary>
        /// Код метки
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("LabelCode")]
        [DataMember(Name="LabelCode",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String LabelCode  { get; set; }
              /// <summary>
        /// Указание языка для набора multi-language данных 
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 'uk'</para>
///<para>Max length : 3</para>
///<para>Mandatory : Yes</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("lang")]
        [DataMember(Name="lang",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
			[JsonIgnore]
	public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
              /// <summary>
        /// Зарезервировано
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("LinkedServer")]
        [DataMember(Name="LinkedServer",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String LinkedServer  { get; set; }
              /// <summary>
        /// Пользователь данного изменения
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedBy")]
        [DataMember(Name="ModifiedBy",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedBy  { get; set; }
              /// <summary>
        /// Источник данного изменения
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedFrom")]
        [DataMember(Name="ModifiedFrom",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedFrom  { get; set; }
              /// <summary>
        /// Комментарий изменения
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Remark")]
        [DataMember(Name="Remark",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Remark  { get; set; }
              /// <summary>
        /// SELECT запрос на отбор идентификаторов узлов дерева - должен учитыавать значение IDType
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("SourceQuery")]
        [DataMember(Name="SourceQuery",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String SourceQuery  { get; set; }
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "EFFECTIVEDATE": return EffectiveDate;
				    case "ENTITYNAME": return EntityName;
				    case "ERRFORMAT": return ErrFormat;
				    case "IDTYPE": return IDType;
				    case "LABELCODE": return LabelCode;
				    case "LANG": return lang;
				    case "LINKEDSERVER": return LinkedServer;
				    case "MODIFIEDBY": return ModifiedBy;
				    case "MODIFIEDFROM": return ModifiedFrom;
				    case "REMARK": return Remark;
				    case "SOURCEQUERY": return SourceQuery;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "EFFECTIVEDATE":if (value == null)EffectiveDate=null;else EffectiveDate=Convert.ToDateTime(value);break;
                case "ENTITYNAME":EntityName=(string)value;break;
                case "ERRFORMAT":ErrFormat=(string)value;break;
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                case "LABELCODE":LabelCode=(string)value;break;
                case "LANG":lang=(string)value;break;
                case "LINKEDSERVER":LinkedServer=(string)value;break;
                case "MODIFIEDBY":ModifiedBy=(string)value;break;
                case "MODIFIEDFROM":ModifiedFrom=(string)value;break;
                case "REMARK":Remark=(string)value;break;
                case "SOURCEQUERY":SourceQuery=(string)value;break;
                }
            }
		}
		#endregion
	}
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Associations_SetLabels_Response_ACTION",Namespace = "")]
	public class Associations_SetLabels_Response_ACTION: BaseEntity, IModifiedTag
	{
         #region [Properties]
			/// <summary>
			/// Признак передачи внешнего значения ID
			/// <para/>
			/// IsExternalID
			/// </summary>
			///<remarks>
			///Признак передачи внешнего значения ID
			///</remarks>
			[JsonProperty("IDType")]
			[DataMember(Name="IDType", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
            public global::System.Int32? IDType  { get; set; }
			/// <summary>
			/// Указание языка для набора multi-language данных 
			/// <para/>
			/// Lang
			/// </summary>
			///<remarks>
			///Указание языка для набора multi-language данных 
			///</remarks>
			[JsonProperty("lang")]
			[DataMember(Name="lang", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
			[JsonIgnore]
            public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
         #endregion
        [JsonIgnore]
	    public DateTime? If_Modified_Since { get {return null;}}
        #region [IDateModified]
        [JsonIgnore]
	    public DateTime? LastModified { get { return If_Modified_Since;}}
        #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                }
            }
		}
		#endregion
    }
#endregion
#region [AuthCodes]
  
    
    ///<remarks>POST &lt;host&gt;[:&lt;port&gt;]/api/v1/bss/customers/[parentid]/AuthCodes
///POST &lt;host&gt;[:&lt;port&gt;]/api/v1/bss/subscribers/[parentid]/AuthCodes
///</remarks>
    ///Customers,Subscribers
    [EntitySubentity("Customers")]
    [EntitySubentity("Subscribers")]

	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="AuthCodes_Request_SET",Namespace = "")]
	public class AuthCodes_Request_SET : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// Сетевой идентификатор при активации (DHCP Option82)
	    ///<list type='bullet'>
///<item>
///	<description>Опционально</description>
///</item>
///<item>
///	<description>для активации ваучера</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("DHCPOption82")]
        [DataMember(Name="DHCPOption82",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String DHCPOption82  { get; set; }
              /// <summary>
        /// Сетевой идентификатор при активации (доп. информация)
	    ///<list type='bullet'>
///<item>
///	<description>Опционально</description>
///</item>
///<item>
///	<description>для активации ваучера</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("IdentificationInfo")]
        [DataMember(Name="IdentificationInfo",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String IdentificationInfo  { get; set; }
              /// <summary>
        /// Сетевой идентификатор при активации (MAC адрес)
	    ///<list type='bullet'>
///<item>
///	<description>Опционально</description>
///</item>
///<item>
///	<description>для активации ваучера</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("MACAddress")]
        [DataMember(Name="MACAddress",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String MACAddress  { get; set; }
              /// <summary>
        /// Сетевой идентификатор при активации (SessionId)
	    ///<list type='bullet'>
///<item>
///	<description>Опционально</description>
///</item>
///<item>
///	<description>для активации ваучера</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("SessionId")]
        [DataMember(Name="SessionId",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String SessionId  { get; set; }
              /// <summary>
        /// Идентификатор Лицевого счета
	    ///<list type='bullet'>
///<item>
///	<description>CLNT_ID</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("AccountID")]
        [DataMember(Name="AccountID",EmitDefaultValue = false)]
		/*norestr*/

[SecondaryKey("Accounts_Request_SET","ID")]/*SET*/
	public global::System.Int32? AccountID  { get; set; }
              /// <summary>
        /// Номер Лицевого счета
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("AccountNumber")]
        [DataMember(Name="AccountNumber",EmitDefaultValue = false)]
		/*norestr*/

[SecondaryKey("Accounts_Request_SET","Number")]/*SET*/
	public global::System.String AccountNumber  { get; set; }
              /// <summary>
        /// Уникальный идентификатор Кода авторизации
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("AuthCodeID")]
        [DataMember(Name="AuthCodeID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int64? AuthCodeID  { get; set; }
              /// <summary>
        /// Уникальный номер Кода авторизации
	    ///<list type='bullet'>
///<item>
///	<description>комбинированное значение Префикс номера счета + SubscrNo</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("AuthCodeName")]
        [DataMember(Name="AuthCodeName",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String AuthCodeName  { get; set; }
              /// <summary>
        /// Дополнительная информация для учета
	    ///<list type='bullet'>
///<item>
///	<description>зарезервировано</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("XmlData")]
        [DataMember(Name="XmlData",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String XmlData  { get; set; }
              /// <summary>
        /// Дата окончания связки Кода с узлом дерева
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("DateEnd")]
        [DataMember(Name="DateEnd",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? DateEnd  { get; set; }
              /// <summary>
        /// Дата начала связки Кода с узлом дерева
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("DateStart")]
        [DataMember(Name="DateStart",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? DateStart  { get; set; }
              /// <summary>
        /// Пользователь данного изменения
	    ///<list type='bullet'>
///<item>
///	<term>Username </term>
///	<description> - пользователь из контекста</description>
///</item>
///<item>
///	<term>NULL </term>
///	<description> -если неизвестен</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedBy")]
        [DataMember(Name="ModifiedBy",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedBy  { get; set; }
              /// <summary>
        /// Источник данного изменения
	    ///<list type='bullet'>
///<item>
///	<term>IP </term>
///	<description> -адрес/имя компьютера</description>
///</item>
///<item>
///	<term>NULL </term>
///	<description> - если неизвестен</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedFrom")]
        [DataMember(Name="ModifiedFrom",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedFrom  { get; set; }
              /// <summary>
        /// Идентификатор устройства, связанного с Кодом Авторизации
	    ///<list type='bullet'>
///<item>
///	<description>значения NUMBER_ATS из справочника STANDARTS</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("NumberAts")]
        [DataMember(Name="NumberAts",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? NumberAts  { get; set; }
              /// <summary>
        /// Комментарий изменения
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Remark")]
        [DataMember(Name="Remark",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Remark  { get; set; }
              /// <summary>
        /// Формат данных дополнительной информации для учета
	    ///<list type='bullet'>
///<item>
///	<description>xml</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : xml</para>
///<para>Max length : 25</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("XmlDataFormat")]
        [DataMember(Name="XmlDataFormat",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String XmlDataFormat  { get; set; } = "xml";
              /// <summary>
        /// Признак передачи внешнего значения ID
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - внешний ID (для BIS всегда устанавливаем в 1)</description>
///</item>
///<item>
///	<term>0 </term>
///	<description> - внутренний ID</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 1</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("IDType")]
        [DataMember(Name="IDType",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? IDType  { get; set; } = 1;
              /// <summary>
        /// Сетевой идентификатор при активации (IP адрес)
	    ///<list type='bullet'>
///<item>
///	<description>Опционально</description>
///</item>
///<item>
///	<description>для активации ваучера</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("IpAddress")]
        [DataMember(Name="IpAddress",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String IpAddress  { get; set; }
              /// <summary>
        /// Код внешней системы - инициатора запроса
	    ///<list type='bullet'>
///<item>
///	<description>значение ESYS_ID из справочника EXTERNAL_SYSTEMS</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Header
        /// </remarks>
        [JsonProperty("System")]
        [DataMember(Name="System",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String System  { get; set; }
              /// <summary>
        /// Уникальный идентификатор связки с абонентом или клиентом
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("ID")]
        [DataMember(Name="ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int64? ID 	{
		get 
		{ 
			if(emptyId.Equals(this.Id))
			{
return 0;
			}
			global::System.Int64 result = default(global::System.Int64);
			if(global::System.Int64.TryParse(this.Id, out result))
				return result; 
			else
            {
return 0;
            }
		}
		set { this.Id = value.ToString(); }
	}
              /// <summary>
        /// Название сущности REST, для которой выполняется POST операция
	    ///<list type='bullet'>
///<item>
///	<description>зарезервировано</description>
///</item>
///<item>
///	<description>доступные значения Subscribers</description>
///</item>
///<item>
///	<description>Customers или Associations</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : Customers</para>
///<para>Max length : 25</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("EntityName")]
        [DataMember(Name="EntityName",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String EntityName { get; set; } = "<empty>";
              /// <summary>
        /// Идентификатор абонента или клиента
	    ///<list type='bullet'>
///<item>
///	<description>SUBS_ID или CLNT_ID</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("ParentID")]
        [DataMember(Name="ParentID",EmitDefaultValue = false)]
		[JsonRestrictedByValue("<empty>")]

[SecondaryKey("Subscribers_Request_SET","ID")]/*SET*/
[SecondaryKey("Customers_Request_SET","ID")]/*SET*/
	public global::System.Int32? ParentID 	{
		get 
		{ 
			if(emptyId.Equals(this.ParentId))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.ParentId, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.ParentId = value.ToString(); }
	}
              /// <summary>
        /// Формат вывода ошибки
	    ///<list type='bullet'>
///<item>
///	<description>'json'</description>
///</item>
///<item>
///	<description>'xml'</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : xml</para>
///<para>Max length : 25</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ErrFormat")]
        [DataMember(Name="ErrFormat",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ErrFormat     {
		get { return Format ?? "xml"; }
		set { this.Format = value; }
	}
              /// <summary>
        /// Указание языка для набора multi-language данных 
	    ///<list type='bullet'>
///<item>
///	<term>'uk' </term>
///	<description> -украинский</description>
///</item>
///<item>
///	<term>'ru' </term>
///	<description> -руский </description>
///</item>
///<item>
///	<term>'en' </term>
///	<description> -английский</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 'uk'</para>
///<para>Max length : 3</para>
///<para>Mandatory : Yes</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("lang")]
        [DataMember(Name="lang",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
			[JsonIgnore]
	public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedDate")]
        [DataMember(Name="ModifiedDate",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? ModifiedDate  { get; set; }
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "DHCPOPTION82": return DHCPOption82;
				    case "IDENTIFICATIONINFO": return IdentificationInfo;
				    case "MACADDRESS": return MACAddress;
				    case "SESSIONID": return SessionId;
				    case "ACCOUNTID": return AccountID;
				    case "ACCOUNTNUMBER": return AccountNumber;
				    case "AUTHCODEID": return AuthCodeID;
				    case "AUTHCODENAME": return AuthCodeName;
				    case "XMLDATA": return XmlData;
				    case "DATEEND": return DateEnd;
				    case "DATESTART": return DateStart;
				    case "MODIFIEDBY": return ModifiedBy;
				    case "MODIFIEDFROM": return ModifiedFrom;
				    case "NUMBERATS": return NumberAts;
				    case "REMARK": return Remark;
				    case "XMLDATAFORMAT": return XmlDataFormat;
				    case "IDTYPE": return IDType;
				    case "IPADDRESS": return IpAddress;
				    case "SYSTEM": return System;
				    case "ID": return ID;
				    case "ENTITYNAME": return EntityName;
				    case "PARENTID": return ParentID;
				    case "ERRFORMAT": return ErrFormat;
				    case "LANG": return lang;
				    case "MODIFIEDDATE": return ModifiedDate;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "DHCPOPTION82":DHCPOption82=(string)value;break;
                case "IDENTIFICATIONINFO":IdentificationInfo=(string)value;break;
                case "MACADDRESS":MACAddress=(string)value;break;
                case "SESSIONID":SessionId=(string)value;break;
                case "ACCOUNTID":if (value == null)AccountID=null;else AccountID=Convert.ToInt32(value);break;
                case "ACCOUNTNUMBER":AccountNumber=(string)value;break;
                case "AUTHCODEID":if (value == null)AuthCodeID=null;else AuthCodeID=Convert.ToInt64(value);break;
                case "AUTHCODENAME":AuthCodeName=(string)value;break;
                case "XMLDATA":XmlData=(string)value;break;
                case "DATEEND":if (value == null)DateEnd=null;else DateEnd=Convert.ToDateTime(value);break;
                case "DATESTART":if (value == null)DateStart=null;else DateStart=Convert.ToDateTime(value);break;
                case "MODIFIEDBY":ModifiedBy=(string)value;break;
                case "MODIFIEDFROM":ModifiedFrom=(string)value;break;
                case "NUMBERATS":if (value == null)NumberAts=null;else NumberAts=Convert.ToInt32(value);break;
                case "REMARK":Remark=(string)value;break;
                case "XMLDATAFORMAT":XmlDataFormat=(string)value;break;
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                case "IPADDRESS":IpAddress=(string)value;break;
                case "SYSTEM":System=(string)value;break;
                case "ID":if (value == null)ID=null;else ID=Convert.ToInt64(value);break;
                case "ENTITYNAME":EntityName=(string)value;break;
                case "PARENTID":if (value == null)ParentID=null;else ParentID=Convert.ToInt32(value);break;
                case "ERRFORMAT":ErrFormat=(string)value;break;
                case "LANG":lang=(string)value;break;
                case "MODIFIEDDATE":if (value == null)ModifiedDate=null;else ModifiedDate=Convert.ToDateTime(value);break;
                }
            }
		}
		#endregion
	}
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="AuthCodes_Response_SET",Namespace = "")]
	public class AuthCodes_Response_SET: BaseEntity, IModifiedTag
	{
         #region [Properties]
			/// <summary>
			/// Уникальный идентификатор Кода авторизации
			/// <para/>
			/// aut_ID
			/// </summary>
			///<remarks>
			///Уникальный идентификатор Кода авторизации
			///</remarks>
			[JsonProperty("AuthCodeID")]
			[DataMember(Name="AuthCodeID", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
            public global::System.Int64? AuthCodeID  { get; set; }
			/// <summary>
			/// Признак передачи внешнего значения ID
			/// <para/>
			/// IsExternalID
			/// </summary>
			///<remarks>
			///Признак передачи внешнего значения ID
			///</remarks>
			[JsonProperty("IDType")]
			[DataMember(Name="IDType", EmitDefaultValue = false)]
			/*norestr*/

            public global::System.Int32? IDType  { get; set; } = 1;
			/// <summary>
			/// Указание языка для набора multi-language данных 
			/// <para/>
			/// Lang
			/// </summary>
			///<remarks>
			///Указание языка для набора multi-language данных 
			///</remarks>
			[JsonProperty("lang")]
			[DataMember(Name="lang", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
			[JsonIgnore]
            public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
			/// <summary>
			/// Уникальный идентификатор связки с абонентом или клиентом
			/// <para/>
			/// aab_ID
			/// </summary>
			///<remarks>
			///Уникальный идентификатор связки с абонентом или клиентом
			///</remarks>
			[JsonProperty("ID")]
			[DataMember(Name="ID", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
            public global::System.Int64? ID 	{
		get 
		{ 
			if(emptyId.Equals(this.Id))
			{
return 0;
			}
			global::System.Int64 result = default(global::System.Int64);
			if(global::System.Int64.TryParse(this.Id, out result))
				return result; 
			else
            {
return 0;
            }
		}
		set { this.Id = value.ToString(); }
	}
         #endregion
        [JsonIgnore]
	    public DateTime? If_Modified_Since { get {return null;}}
        #region [IDateModified]
        [JsonIgnore]
	    public DateTime? LastModified { get { return If_Modified_Since;}}
        #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "AUTHCODEID": return AuthCodeID;
				    case "IDTYPE": return IDType;
				    case "LANG": return lang;
				    case "ID": return ID;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "AUTHCODEID":if (value == null)AuthCodeID=null;else AuthCodeID=Convert.ToInt64(value);break;
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                case "LANG":lang=(string)value;break;
                case "ID":if (value == null)ID=null;else ID=Convert.ToInt64(value);break;
                }
            }
		}
		#endregion
    }
#endregion
#region [BankAccounts]
  
    
    ///<remarks>GET &lt;host&gt;[:&lt;port&gt;]/api/v1/bss/BankAccounts
///</remarks>
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="BankAccounts_Request_GET",Namespace = "")]
	public class BankAccounts_Request_GET : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("Abn_ID")]
        [DataMember(Name="Abn_ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? Abn_ID  { get; set; }
              /// <summary>
        /// Формат вывода ошибки
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : xml</para>
///<para>Max length : 25</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ErrFormat")]
        [DataMember(Name="ErrFormat",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ErrFormat     {
		get { return Format ?? "xml"; }
		set { this.Format = value; }
	}
              /// <summary>
        /// Признак передачи внешнего значения ID
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 1</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("IDType")]
        [DataMember(Name="IDType",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? IDType  { get; set; } = 1;
              /// <summary>
        /// Указание языка для набора multi-language данных 
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("lang")]
        [DataMember(Name="lang",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
			[JsonIgnore]
	public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 1</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("PageNumber")]
        [DataMember(Name="PageNumber",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? PageNumber  { get; set; } = 1;
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 50</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("PageSize")]
        [DataMember(Name="PageSize",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? PageSize  { get; set; } = 50;
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "ABN_ID": return Abn_ID;
				    case "ERRFORMAT": return ErrFormat;
				    case "IDTYPE": return IDType;
				    case "LANG": return lang;
				    case "PAGENUMBER": return PageNumber;
				    case "PAGESIZE": return PageSize;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "ABN_ID":if (value == null)Abn_ID=null;else Abn_ID=Convert.ToInt32(value);break;
                case "ERRFORMAT":ErrFormat=(string)value;break;
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                case "LANG":lang=(string)value;break;
                case "PAGENUMBER":if (value == null)PageNumber=null;else PageNumber=Convert.ToInt32(value);break;
                case "PAGESIZE":if (value == null)PageSize=null;else PageSize=Convert.ToInt32(value);break;
                }
            }
		}
		#endregion
	}
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="BankAccounts_Response_GET",Namespace = "")]
	public class BankAccounts_Response_GET: BaseEntity, IModifiedTag
	{
         #region [Properties]
			/// <summary>
			/// Признак передачи внешнего значения ID
			/// <para/>
			/// IsExternalID
			/// </summary>
			///<remarks>
			///Признак передачи внешнего значения ID
			///</remarks>
			[JsonProperty("IDType")]
			[DataMember(Name="IDType", EmitDefaultValue = false)]
			/*norestr*/

            public global::System.Int32? IDType  { get; set; } = 1;
			/// <summary>
			/// Указание языка для набора multi-language данных 
			/// <para/>
			/// Lang
			/// </summary>
			///<remarks>
			///Указание языка для набора multi-language данных 
			///</remarks>
			[JsonProperty("lang")]
			[DataMember(Name="lang", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
			[JsonIgnore]
            public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
         #endregion
        [JsonIgnore]
	    public DateTime? If_Modified_Since { get {return null;}}
        #region [IDateModified]
        [JsonIgnore]
	    public DateTime? LastModified { get { return If_Modified_Since;}}
        #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "IDTYPE": return IDType;
				    case "LANG": return lang;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                case "LANG":lang=(string)value;break;
                }
            }
		}
		#endregion
    }
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="BankAccounts_Response_GET_OUTPUT",Namespace = "")]
	public class BankAccounts_Response_GET_OUTPUT : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("AccNumber")]
        [DataMember(Name="AccNumber",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String AccNumber  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ID")]
        [DataMember(Name="ID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? ID 	{
		get 
		{ 
			if(emptyId.Equals(this.Id))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.Id, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.Id = value.ToString(); }
	}
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("BankCode")]
        [DataMember(Name="BankCode",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String BankCode  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Code")]
        [DataMember(Name="Code",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String Code  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("IBAN")]
        [DataMember(Name="IBAN",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String IBAN  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("loc_ID")]
        [DataMember(Name="loc_ID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? loc_ID  { get; set; }
    //Base Attrribute '' skipped
          /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("OneString")]
        [DataMember(Name="OneString",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String OneString  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("bnk_ID")]
        [DataMember(Name="bnk_ID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? bnk_ID  { get; set; }
              /// <summary>
        /// Признак передачи внешнего значения ID
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 1</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("IDType")]
        [DataMember(Name="IDType",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? IDType  { get; set; } = 1;
              /// <summary>
        /// Указание языка для набора multi-language данных 
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("lang")]
        [DataMember(Name="lang",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
			[JsonIgnore]
	public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Total")]
        [DataMember(Name="Total",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? Total  { get; set; }
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "ACCNUMBER": return AccNumber;
				    case "ID": return ID;
				    case "BANKCODE": return BankCode;
				    case "CODE": return Code;
				    case "IBAN": return IBAN;
				    case "LOC_ID": return loc_ID;
				    case "NAME": return Name;
				    case "ONESTRING": return OneString;
				    case "BNK_ID": return bnk_ID;
				    case "IDTYPE": return IDType;
				    case "LANG": return lang;
				    case "TOTAL": return Total;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "ACCNUMBER":AccNumber=(string)value;break;
                case "ID":if (value == null)ID=null;else ID=Convert.ToInt32(value);break;
                case "BANKCODE":BankCode=(string)value;break;
                case "CODE":Code=(string)value;break;
                case "IBAN":IBAN=(string)value;break;
                case "LOC_ID":if (value == null)loc_ID=null;else loc_ID=Convert.ToInt32(value);break;
                case "NAME":Name=(string)value;break;
                case "ONESTRING":OneString=(string)value;break;
                case "BNK_ID":if (value == null)bnk_ID=null;else bnk_ID=Convert.ToInt32(value);break;
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                case "LANG":lang=(string)value;break;
                case "TOTAL":if (value == null)Total=null;else Total=Convert.ToInt32(value);break;
                }
            }
		}
		#endregion
	}
#endregion
#region [BankDetails]
  
    
    ///<remarks>POST &lt;host&gt;[:&lt;port&gt;]/api/v1/bss/associations/[parentid]/bankdetails
///POST &lt;host&gt;[:&lt;port&gt;]/api/v1/bss/customers/[parentid]/bankdetails
///</remarks>
    ///Associations,Customers
    [EntitySubentity("Associations")]
    [EntitySubentity("Customers")]

	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="BankDetails_Request_SET",Namespace = "")]
	public class BankDetails_Request_SET : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// Идентификатор внешней системы
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Esys_ID")]
        [DataMember(Name="Esys_ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? Esys_ID  { get; set; }
              /// <summary>
        /// Источник данного изменения
	    ///<list type='bullet'>
///<item>
///	<term>IP </term>
///	<description> -адрес/имя компьютера</description>
///</item>
///<item>
///	<term>NULL </term>
///	<description> - если неизвестен</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedFrom")]
        [DataMember(Name="ModifiedFrom",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedFrom  { get; set; }
              /// <summary>
        /// Пользователь данного изменения
	    ///<list type='bullet'>
///<item>
///	<term>Username </term>
///	<description> - пользователь из контекста</description>
///</item>
///<item>
///	<term>NULL </term>
///	<description> -если неизвестен</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedBy")]
        [DataMember(Name="ModifiedBy",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedBy  { get; set; }
              /// <summary>
        /// Комментарий изменения
	    ///<list type='bullet'>
///<item>
///	<description>Заполняем причину изменений для истории</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Remark")]
        [DataMember(Name="Remark",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Remark  { get; set; }
              /// <summary>
        /// Формат данных аттрибутов банковских деталей
	    ///<list type='bullet'>
///<item>
///	<description>json</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 'json'</para>
///<para>Max length : 25</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("DataFormat")]
        [DataMember(Name="DataFormat",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String DataFormat  { get; set; } = "json";
              /// <summary>
        /// Номер банковского счета в формате IBAN
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("IBANCode")]
        [DataMember(Name="IBANCode",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String IBANCode  { get; set; }
              /// <summary>
        /// Дата закрытия банковского счета
	    ///<list type='bullet'>
///<item>
///	<description>заполняется только при закрытии счета</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("BankCloseDate")]
        [DataMember(Name="BankCloseDate",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? BankCloseDate  { get; set; }
              /// <summary>
        /// Дополнительные атрибуты банка
	    ///<list type='bullet'>
///<item>
///	<description>для клиентских данных не используется</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("BankJsonData")]
        [DataMember(Name="BankJsonData",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String BankJsonData  { get; set; }
              /// <summary>
        /// Идентификатор банка
	    ///<list type='bullet'>
///<item>
///	<description>значения BANK_ID</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("BankID")]
        [DataMember(Name="BankID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? BankID  { get; set; } = 0;
              /// <summary>
        /// Идентификатор банковского счета
	    ///<list type='bullet'>
///<item>
///	<description>указывается только для правки записи</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("BankAccountID")]
        [DataMember(Name="BankAccountID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? BankAccountID  { get; set; } = 0;
              /// <summary>
        /// Идентификатор населенного пункта
	    ///<list type='bullet'>
///<item>
///	<description>значения CIT_ID</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("CityID")]
        [DataMember(Name="CityID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? CityID  { get; set; } = 0;
              /// <summary>
        /// Номер Филиала
	    ///<list type='bullet'>
///<item>
///	<description>указываем значение справочника Branches</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("LocationID")]
        [DataMember(Name="LocationID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? LocationID  { get; set; }
              /// <summary>
        /// Идентификатор страны
	    ///<list type='bullet'>
///<item>
///	<description>значения COU_ID</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 1</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("CountryID")]
        [DataMember(Name="CountryID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? CountryID  { get; set; } = 1;
              /// <summary>
        /// Код банка (внутренний)
	    ///<list type='bullet'>
///<item>
///	<description>для клиентских данных не используется</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Code")]
        [DataMember(Name="Code",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Code  { get; set; }
              /// <summary>
        /// Наименование банка
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("BankName")]
        [DataMember(Name="BankName",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String BankName  { get; set; }
              /// <summary>
        /// Национальный код банка (МФО, БИК, BLZ, sort code, ABA RTN)
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("BankCode")]
        [DataMember(Name="BankCode",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String BankCode  { get; set; }
              /// <summary>
        /// Номер банковского счета
	    ///<list type='bullet'>
///<item>
///	<description>Текстовое значение номера счета</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("BankAccountNumber")]
        [DataMember(Name="BankAccountNumber",EmitDefaultValue = false)]
		/*norestr*/

[SecondaryKey("Accounts_Request_SET","Number")]/*SET*/
	public global::System.String BankAccountNumber  { get; set; }
              /// <summary>
        /// Пользователь, указавший о закрытии банковского счета
	    ///<list type='bullet'>
///<item>
///	<description>заполняется только при закрытии счета</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("BankCloseBy")]
        [DataMember(Name="BankCloseBy",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String BankCloseBy  { get; set; }
              /// <summary>
        /// Дата окончания действия
	    ///<list type='bullet'>
///<item>
///	<term>безсрочно </term>
///	<description> - 31.12.2999 23:59:59</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("DateEnd")]
        [DataMember(Name="DateEnd",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? DateEnd  { get; set; }
              /// <summary>
        /// Дата начала действия
	    ///<list type='bullet'>
///<item>
///	<description>текущая дата (время 0:00:00)</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("DateStart")]
        [DataMember(Name="DateStart",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? DateStart  { get; set; }
              /// <summary>
        /// Признак передачи внешнего значения ID
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - внешний ID (для BIS всегда устанавливаем в 1)</description>
///</item>
///<item>
///	<term>0 </term>
///	<description> - внутренний ID</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("IDType")]
        [DataMember(Name="IDType",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? IDType  { get; set; } = 0;
              /// <summary>
        /// Код внешней системы - инициатора запроса
	    ///<list type='bullet'>
///<item>
///	<description>зарезервировано</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Header
        /// </remarks>
        [JsonProperty("System")]
        [DataMember(Name="System",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String System  { get; set; }
              /// <summary>
        /// Название сущности REST, для которой выполняется POST операция
	    ///<list type='bullet'>
///<item>
///	<description>зарезервировано</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("EntityName")]
        [DataMember(Name="EntityName",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String EntityName { get; set; } = "<empty>";
              /// <summary>
        /// Идентификатор истории банковского счета
	    ///<list type='bullet'>
///<item>
///	<description>используется для правки</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("ID")]
        [DataMember(Name="ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? ID 	{
		get 
		{ 
			if(emptyId.Equals(this.Id))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.Id, out result))
				return result; 
			else
            {
return 0;
            }
		}
		set { this.Id = value.ToString(); }
	}
              /// <summary>
        /// Идентификатор узла дерева
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> -корень дерева учета</description>
///</item>
///<item>
///	<term>SUBS_ID </term>
///	<description> -справочник SUBSCRIBERS</description>
///</item>
///<item>
///	<term>CLNT_ID </term>
///	<description> -справочник CLIENT_HISTORIES</description>
///</item>
///<item>
///	<term>ASSC_ID </term>
///	<description> -справочник ASSOCIATIONS</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("ParentID")]
        [DataMember(Name="ParentID",EmitDefaultValue = false)]
		[JsonRestrictedByValue("<empty>")]

[SecondaryKey("Accounts_Request_SET","ID")]/*SET*/
	public global::System.Int32? ParentID 	{
		get 
		{ 
			if(emptyId.Equals(this.ParentId))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.ParentId, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.ParentId = value.ToString(); }
	}
              /// <summary>
        /// Формат вывода ошибки
	    ///<list type='bullet'>
///<item>
///	<description>'json'</description>
///</item>
///<item>
///	<description>'xml'</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : xml</para>
///<para>Max length : 25</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ErrFormat")]
        [DataMember(Name="ErrFormat",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ErrFormat     {
		get { return Format ?? "xml"; }
		set { this.Format = value; }
	}
    //Base Attrribute '' skipped
         #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "ESYS_ID": return Esys_ID;
				    case "MODIFIEDFROM": return ModifiedFrom;
				    case "MODIFIEDBY": return ModifiedBy;
				    case "REMARK": return Remark;
				    case "DATAFORMAT": return DataFormat;
				    case "IBANCODE": return IBANCode;
				    case "BANKCLOSEDATE": return BankCloseDate;
				    case "BANKJSONDATA": return BankJsonData;
				    case "BANKID": return BankID;
				    case "BANKACCOUNTID": return BankAccountID;
				    case "CITYID": return CityID;
				    case "LOCATIONID": return LocationID;
				    case "COUNTRYID": return CountryID;
				    case "CODE": return Code;
				    case "BANKNAME": return BankName;
				    case "BANKCODE": return BankCode;
				    case "BANKACCOUNTNUMBER": return BankAccountNumber;
				    case "BANKCLOSEBY": return BankCloseBy;
				    case "DATEEND": return DateEnd;
				    case "DATESTART": return DateStart;
				    case "IDTYPE": return IDType;
				    case "SYSTEM": return System;
				    case "ENTITYNAME": return EntityName;
				    case "ID": return ID;
				    case "PARENTID": return ParentID;
				    case "ERRFORMAT": return ErrFormat;
				    case "LANG": return Lang;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "ESYS_ID":if (value == null)Esys_ID=null;else Esys_ID=Convert.ToInt32(value);break;
                case "MODIFIEDFROM":ModifiedFrom=(string)value;break;
                case "MODIFIEDBY":ModifiedBy=(string)value;break;
                case "REMARK":Remark=(string)value;break;
                case "DATAFORMAT":DataFormat=(string)value;break;
                case "IBANCODE":IBANCode=(string)value;break;
                case "BANKCLOSEDATE":if (value == null)BankCloseDate=null;else BankCloseDate=Convert.ToDateTime(value);break;
                case "BANKJSONDATA":BankJsonData=(string)value;break;
                case "BANKID":if (value == null)BankID=null;else BankID=Convert.ToInt32(value);break;
                case "BANKACCOUNTID":if (value == null)BankAccountID=null;else BankAccountID=Convert.ToInt32(value);break;
                case "CITYID":if (value == null)CityID=null;else CityID=Convert.ToInt32(value);break;
                case "LOCATIONID":if (value == null)LocationID=null;else LocationID=Convert.ToInt32(value);break;
                case "COUNTRYID":if (value == null)CountryID=null;else CountryID=Convert.ToInt32(value);break;
                case "CODE":Code=(string)value;break;
                case "BANKNAME":BankName=(string)value;break;
                case "BANKCODE":BankCode=(string)value;break;
                case "BANKACCOUNTNUMBER":BankAccountNumber=(string)value;break;
                case "BANKCLOSEBY":BankCloseBy=(string)value;break;
                case "DATEEND":if (value == null)DateEnd=null;else DateEnd=Convert.ToDateTime(value);break;
                case "DATESTART":if (value == null)DateStart=null;else DateStart=Convert.ToDateTime(value);break;
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                case "SYSTEM":System=(string)value;break;
                case "ENTITYNAME":EntityName=(string)value;break;
                case "ID":if (value == null)ID=null;else ID=Convert.ToInt32(value);break;
                case "PARENTID":if (value == null)ParentID=null;else ParentID=Convert.ToInt32(value);break;
                case "ERRFORMAT":ErrFormat=(string)value;break;
                case "LANG":Lang=(string)value;break;
                }
            }
		}
		#endregion
	}
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="BankDetails_Response_SET",Namespace = "")]
	public class BankDetails_Response_SET: BaseEntity, IModifiedTag
	{
         #region [Properties]
			/// <summary>
			/// Идентификатор истории банковского счета
			/// <para/>
			/// Adab_ID
			/// </summary>
			///<remarks>
			///Идентификатор истории банковского счета
			///</remarks>
			[JsonProperty("ID")]
			[DataMember(Name="ID", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
            public global::System.Int32? ID 	{
		get 
		{ 
			if(emptyId.Equals(this.Id))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.Id, out result))
				return result; 
			else
            {
return 0;
            }
		}
		set { this.Id = value.ToString(); }
	}
			/// <summary>
			/// Идентификатор банковского счета
			/// <para/>
			/// Bac_ID
			/// </summary>
			///<remarks>
			///Идентификатор банковского счета
			///</remarks>
			[JsonProperty("BankAccountID")]
			[DataMember(Name="BankAccountID", EmitDefaultValue = false)]
			/*norestr*/

            public global::System.Int32? BankAccountID  { get; set; } = 0;
			/// <summary>
			/// Идентификатор банка
			/// <para/>
			/// Bnk_ID
			/// </summary>
			///<remarks>
			///Идентификатор банка
			///</remarks>
			[JsonProperty("BankID")]
			[DataMember(Name="BankID", EmitDefaultValue = false)]
			/*norestr*/

            public global::System.Int32? BankID  { get; set; } = 0;
			/// <summary>
			/// Признак передачи внешнего значения ID
			/// <para/>
			/// IsExternalID
			/// </summary>
			///<remarks>
			///Признак передачи внешнего значения ID
			///</remarks>
			[JsonProperty("IDType")]
			[DataMember(Name="IDType", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
            public global::System.Int32? IDType  { get; set; } = 0;
         #endregion
        [JsonIgnore]
	    public DateTime? If_Modified_Since { get {return null;}}
        #region [IDateModified]
        [JsonIgnore]
	    public DateTime? LastModified { get { return If_Modified_Since;}}
        #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "ID": return ID;
				    case "BANKACCOUNTID": return BankAccountID;
				    case "BANKID": return BankID;
				    case "IDTYPE": return IDType;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "ID":if (value == null)ID=null;else ID=Convert.ToInt32(value);break;
                case "BANKACCOUNTID":if (value == null)BankAccountID=null;else BankAccountID=Convert.ToInt32(value);break;
                case "BANKID":if (value == null)BankID=null;else BankID=Convert.ToInt32(value);break;
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                }
            }
		}
		#endregion
    }
#endregion
#region [BankStatements]
  
    
    
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="BankStatements_Request_GET",Namespace = "")]
	public class BankStatements_Request_GET : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// Номер банковского счета компании, на который поступил платеж
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("BankAccountNumberTo")]
        [DataMember(Name="BankAccountNumberTo",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String BankAccountNumberTo  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("BankCodeTo")]
        [DataMember(Name="BankCodeTo",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String BankCodeTo  { get; set; }
              /// <summary>
        /// ID пачки платежей, которая находится в обработке в АРМ
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("BatchID")]
        [DataMember(Name="BatchID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? BatchID  { get; set; }
              /// <summary>
        /// Дата платежа
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("PayDate")]
        [DataMember(Name="PayDate",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? PayDate  { get; set; }
              /// <summary>
        /// Формат вывода ошибки
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 'json'</para>
///<para>Max length : 25</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("ErrFormat")]
        [DataMember(Name="ErrFormat",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ErrFormat     {
		get { return Format ?? "json"; }
		set { this.Format = value; }
	}
              /// <summary>
        /// Указание языка для набора multi-language данных 
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 'uk'</para>
///<para>Max length : 3</para>
///<para>Mandatory : Yes</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("lang")]
        [DataMember(Name="lang",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
			[JsonIgnore]
	public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "BANKACCOUNTNUMBERTO": return BankAccountNumberTo;
				    case "BANKCODETO": return BankCodeTo;
				    case "BATCHID": return BatchID;
				    case "PAYDATE": return PayDate;
				    case "ERRFORMAT": return ErrFormat;
				    case "LANG": return lang;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "BANKACCOUNTNUMBERTO":BankAccountNumberTo=(string)value;break;
                case "BANKCODETO":BankCodeTo=(string)value;break;
                case "BATCHID":if (value == null)BatchID=null;else BatchID=Convert.ToInt32(value);break;
                case "PAYDATE":if (value == null)PayDate=null;else PayDate=Convert.ToDateTime(value);break;
                case "ERRFORMAT":ErrFormat=(string)value;break;
                case "LANG":lang=(string)value;break;
                }
            }
		}
		#endregion
	}
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="BankStatements_Response_GET",Namespace = "")]
	public class BankStatements_Response_GET: BaseEntity, IModifiedTag
	{
         #region [Properties]
			/// <summary>
			/// Указание языка для набора multi-language данных 
			/// <para/>
			/// Lang
			/// </summary>
			///<remarks>
			///Указание языка для набора multi-language данных 
			///</remarks>
			[JsonProperty("lang")]
			[DataMember(Name="lang", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
			[JsonIgnore]
            public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
         #endregion
        [JsonIgnore]
	    public DateTime? If_Modified_Since { get {return null;}}
        #region [IDateModified]
        [JsonIgnore]
	    public DateTime? LastModified { get { return If_Modified_Since;}}
        #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "LANG": return lang;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "LANG":lang=(string)value;break;
                }
            }
		}
		#endregion
    }
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="BankStatements_Response_GET_OUTPUT",Namespace = "")]
	public class BankStatements_Response_GET_OUTPUT : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// Счет отправителя платежа, соответствует полю  BANK_ACCOUNT_TEXT таблицы CE.CE_STATEMENT_LINES
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("BankAccountNumberFrom")]
        [DataMember(Name="BankAccountNumberFrom",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String BankAccountNumberFrom  { get; set; }
              /// <summary>
        /// Сумма платежа. Сумма в ГРН с копейками
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Amount")]
        [DataMember(Name="Amount",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Decimal? Amount  { get; set; }
              /// <summary>
        /// ID банковского счета, соответствует полю CE.CE_STATEMENT_HEADERS_ALL.BANK_ACCOUNT_ID
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("BankAccountExternalID")]
        [DataMember(Name="BankAccountExternalID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? BankAccountExternalID  { get; set; }
              /// <summary>
        /// Номер банковского счета компании, на который поступил платеж
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("BankAccountNumberTo")]
        [DataMember(Name="BankAccountNumberTo",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String BankAccountNumberTo  { get; set; }
              /// <summary>
        /// ID банковской выписки
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("pre_ExternalID")]
        [DataMember(Name="pre_ExternalID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? pre_ExternalID  { get; set; }
              /// <summary>
        /// Номер платежного поручения
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("PaymentOrder")]
        [DataMember(Name="PaymentOrder",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String PaymentOrder  { get; set; }
              /// <summary>
        /// Название банковского счета, по которому получен платеж
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("BankInternalCodeTo")]
        [DataMember(Name="BankInternalCodeTo",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String BankInternalCodeTo  { get; set; }
              /// <summary>
        /// ID пачки платежей, которая находится в обработке в АРМ
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("BatchID")]
        [DataMember(Name="BatchID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? BatchID  { get; set; }
              /// <summary>
        /// Дата создания записи в интерфейсной таблице
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("EffectiveDate")]
        [DataMember(Name="EffectiveDate",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.DateTime? EffectiveDate  { get; set; }
              /// <summary>
        /// Дата платежа
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("PayDate")]
        [DataMember(Name="PayDate",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.DateTime? PayDate  { get; set; }
              /// <summary>
        /// Значение данного поля соответствует значению поля  DOC_ID из интерфейсной таблицы. Необходим уникальный индекс.
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("cpd_ExportID")]
        [DataMember(Name="cpd_ExportID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? cpd_ExportID  { get; set; }
              /// <summary>
        /// Номер выписки в биллинговой системе.
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("pre_NumReestr")]
        [DataMember(Name="pre_NumReestr",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String pre_NumReestr  { get; set; }
              /// <summary>
        /// МФО банковского счета, на который поступил платеж
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("BankCodeTo")]
        [DataMember(Name="BankCodeTo",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String BankCodeTo  { get; set; }
              /// <summary>
        /// МФО банка отправителя
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("BankCodeFrom")]
        [DataMember(Name="BankCodeFrom",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String BankCodeFrom  { get; set; }
              /// <summary>
        /// Наименование отправителя
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("BankNameFrom")]
        [DataMember(Name="BankNameFrom",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String BankNameFrom  { get; set; }
              /// <summary>
        /// ОКПО отправителя
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("BusinessUIDFrom")]
        [DataMember(Name="BusinessUIDFrom",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String BusinessUIDFrom  { get; set; }
              /// <summary>
        /// org_id - идентификатор организации
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("TenantID")]
        [DataMember(Name="TenantID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? TenantID  { get; set; }
              /// <summary>
        /// Номер заявки на покупки валюты
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("RequestNumber")]
        [DataMember(Name="RequestNumber",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String RequestNumber  { get; set; }
              /// <summary>
        /// Статус блока(пачки): 0 - в работе; 1 - закрыта
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("PayDocStatusId")]
        [DataMember(Name="PayDocStatusId",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? PayDocStatusId  { get; set; }
              /// <summary>
        /// Код транзакции при проведении операции покупки, продажи валюты
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("TransactionCode")]
        [DataMember(Name="TransactionCode",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String TransactionCode  { get; set; }
              /// <summary>
        /// Назначение платежа
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("TransactionText")]
        [DataMember(Name="TransactionText",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String TransactionText  { get; set; }
              /// <summary>
        /// Лицевой счет абонента
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("acnt_Number")]
        [DataMember(Name="acnt_Number",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String acnt_Number  { get; set; }
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "BANKACCOUNTNUMBERFROM": return BankAccountNumberFrom;
				    case "AMOUNT": return Amount;
				    case "BANKACCOUNTEXTERNALID": return BankAccountExternalID;
				    case "BANKACCOUNTNUMBERTO": return BankAccountNumberTo;
				    case "PRE_EXTERNALID": return pre_ExternalID;
				    case "PAYMENTORDER": return PaymentOrder;
				    case "BANKINTERNALCODETO": return BankInternalCodeTo;
				    case "BATCHID": return BatchID;
				    case "EFFECTIVEDATE": return EffectiveDate;
				    case "PAYDATE": return PayDate;
				    case "CPD_EXPORTID": return cpd_ExportID;
				    case "PRE_NUMREESTR": return pre_NumReestr;
				    case "BANKCODETO": return BankCodeTo;
				    case "BANKCODEFROM": return BankCodeFrom;
				    case "BANKNAMEFROM": return BankNameFrom;
				    case "BUSINESSUIDFROM": return BusinessUIDFrom;
				    case "TENANTID": return TenantID;
				    case "REQUESTNUMBER": return RequestNumber;
				    case "PAYDOCSTATUSID": return PayDocStatusId;
				    case "TRANSACTIONCODE": return TransactionCode;
				    case "TRANSACTIONTEXT": return TransactionText;
				    case "ACNT_NUMBER": return acnt_Number;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "BANKACCOUNTNUMBERFROM":BankAccountNumberFrom=(string)value;break;
                case "AMOUNT":if (value == null)Amount=null;else Amount=Convert.ToDecimal(value);break;
                case "BANKACCOUNTEXTERNALID":if (value == null)BankAccountExternalID=null;else BankAccountExternalID=Convert.ToInt32(value);break;
                case "BANKACCOUNTNUMBERTO":BankAccountNumberTo=(string)value;break;
                case "PRE_EXTERNALID":if (value == null)pre_ExternalID=null;else pre_ExternalID=Convert.ToInt32(value);break;
                case "PAYMENTORDER":PaymentOrder=(string)value;break;
                case "BANKINTERNALCODETO":BankInternalCodeTo=(string)value;break;
                case "BATCHID":if (value == null)BatchID=null;else BatchID=Convert.ToInt32(value);break;
                case "EFFECTIVEDATE":if (value == null)EffectiveDate=null;else EffectiveDate=Convert.ToDateTime(value);break;
                case "PAYDATE":if (value == null)PayDate=null;else PayDate=Convert.ToDateTime(value);break;
                case "CPD_EXPORTID":if (value == null)cpd_ExportID=null;else cpd_ExportID=Convert.ToInt32(value);break;
                case "PRE_NUMREESTR":pre_NumReestr=(string)value;break;
                case "BANKCODETO":BankCodeTo=(string)value;break;
                case "BANKCODEFROM":BankCodeFrom=(string)value;break;
                case "BANKNAMEFROM":BankNameFrom=(string)value;break;
                case "BUSINESSUIDFROM":BusinessUIDFrom=(string)value;break;
                case "TENANTID":if (value == null)TenantID=null;else TenantID=Convert.ToInt32(value);break;
                case "REQUESTNUMBER":RequestNumber=(string)value;break;
                case "PAYDOCSTATUSID":if (value == null)PayDocStatusId=null;else PayDocStatusId=Convert.ToInt32(value);break;
                case "TRANSACTIONCODE":TransactionCode=(string)value;break;
                case "TRANSACTIONTEXT":TransactionText=(string)value;break;
                case "ACNT_NUMBER":acnt_Number=(string)value;break;
                }
            }
		}
		#endregion
	}
  
    
    
    ///<empty>

	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="BankStatements_Request_SET",Namespace = "")]
	public class BankStatements_Request_SET : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// Номер банковского счета компании, на который поступил платеж
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("BankAccountNumberTo")]
        [DataMember(Name="BankAccountNumberTo",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String BankAccountNumberTo  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("BankCodeTo")]
        [DataMember(Name="BankCodeTo",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String BankCodeTo  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 150</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("RowCount")]
        [DataMember(Name="RowCount",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? RowCount  { get; set; } = 150;
              /// <summary>
        /// ID пачки платежей, которая находится в обработке в АРМ
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ID")]
        [DataMember(Name="ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? ID 	{
		get 
		{ 
			if(emptyId.Equals(this.Id))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.Id, out result))
				return result; 
			else
            {
return 0;
            }
		}
		set { this.Id = value.ToString(); }
	}
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("IsBillingAccount")]
        [DataMember(Name="IsBillingAccount",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String IsBillingAccount  { get; set; }
              /// <summary>
        /// Дата платежа
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("PayDate")]
        [DataMember(Name="PayDate",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? PayDate  { get; set; }
              /// <summary>
        /// Значение данного поля соответствует значению поля  DOC_ID из интерфейсной таблицы. Необходим уникальный индекс.
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("cpd_ExportID")]
        [DataMember(Name="cpd_ExportID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? cpd_ExportID  { get; set; }
              /// <summary>
        /// Формат вывода ошибки
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 'json'</para>
///<para>Max length : 25</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("ErrFormat")]
        [DataMember(Name="ErrFormat",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ErrFormat     {
		get { return Format ?? "json"; }
		set { this.Format = value; }
	}
              /// <summary>
        /// Указание языка для набора multi-language данных 
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 'uk'</para>
///<para>Max length : 3</para>
///<para>Mandatory : Yes</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("lang")]
        [DataMember(Name="lang",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
			[JsonIgnore]
	public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
              /// <summary>
        /// org_id - идентификатор организации
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("TenantID")]
        [DataMember(Name="TenantID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? TenantID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("IsPostponed")]
        [DataMember(Name="IsPostponed",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String IsPostponed  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Result")]
        [DataMember(Name="Result",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? Result  { get; set; }
              /// <summary>
        /// Категория Закрытой группы (односторонняя, двусторонняя и т.д.)
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("PayDocStatusCode")]
        [DataMember(Name="PayDocStatusCode",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String PayDocStatusCode  { get; set; }
              /// <summary>
        /// ID пользователя
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("UserID")]
        [DataMember(Name="UserID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? UserID  { get; set; }
              /// <summary>
        /// Идентификатор банковского счета
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ParentID")]
        [DataMember(Name="ParentID",EmitDefaultValue = false)]
		[JsonRestrictedByValue("<empty>")]

	public global::System.Int32? ParentID 	{
		get 
		{ 
			if(emptyId.Equals(this.ParentId))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.ParentId, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.ParentId = value.ToString(); }
	}
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "BANKACCOUNTNUMBERTO": return BankAccountNumberTo;
				    case "BANKCODETO": return BankCodeTo;
				    case "ROWCOUNT": return RowCount;
				    case "ID": return ID;
				    case "ISBILLINGACCOUNT": return IsBillingAccount;
				    case "PAYDATE": return PayDate;
				    case "CPD_EXPORTID": return cpd_ExportID;
				    case "ERRFORMAT": return ErrFormat;
				    case "LANG": return lang;
				    case "TENANTID": return TenantID;
				    case "ISPOSTPONED": return IsPostponed;
				    case "RESULT": return Result;
				    case "PAYDOCSTATUSCODE": return PayDocStatusCode;
				    case "USERID": return UserID;
				    case "PARENTID": return ParentID;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "BANKACCOUNTNUMBERTO":BankAccountNumberTo=(string)value;break;
                case "BANKCODETO":BankCodeTo=(string)value;break;
                case "ROWCOUNT":if (value == null)RowCount=null;else RowCount=Convert.ToInt32(value);break;
                case "ID":if (value == null)ID=null;else ID=Convert.ToInt32(value);break;
                case "ISBILLINGACCOUNT":IsBillingAccount=(string)value;break;
                case "PAYDATE":if (value == null)PayDate=null;else PayDate=Convert.ToDateTime(value);break;
                case "CPD_EXPORTID":if (value == null)cpd_ExportID=null;else cpd_ExportID=Convert.ToInt32(value);break;
                case "ERRFORMAT":ErrFormat=(string)value;break;
                case "LANG":lang=(string)value;break;
                case "TENANTID":if (value == null)TenantID=null;else TenantID=Convert.ToInt32(value);break;
                case "ISPOSTPONED":IsPostponed=(string)value;break;
                case "RESULT":if (value == null)Result=null;else Result=Convert.ToInt32(value);break;
                case "PAYDOCSTATUSCODE":PayDocStatusCode=(string)value;break;
                case "USERID":if (value == null)UserID=null;else UserID=Convert.ToInt32(value);break;
                case "PARENTID":if (value == null)ParentID=null;else ParentID=Convert.ToInt32(value);break;
                }
            }
		}
		#endregion
	}
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="BankStatements_Response_SET",Namespace = "")]
	public class BankStatements_Response_SET: BaseEntity, IModifiedTag
	{
         #region [Properties]
			/// <summary>
			/// ID пачки платежей, которая находится в обработке в АРМ
			/// <para/>
			/// Batch_ID
			/// </summary>
			///<remarks>
			///ID пачки платежей, которая находится в обработке в АРМ
			///</remarks>
			[JsonProperty("ID")]
			[DataMember(Name="ID", EmitDefaultValue = false)]
			/*norestr*/

            public global::System.Int32? ID 	{
		get 
		{ 
			if(emptyId.Equals(this.Id))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.Id, out result))
				return result; 
			else
            {
return 0;
            }
		}
		set { this.Id = value.ToString(); }
	}
//Base Attrribute '' skipped
			/// <summary>
			/// No description
			/// <para/>
			/// Result
			/// </summary>
			///<remarks>
			///No description
			///</remarks>
			[JsonProperty("Result")]
			[DataMember(Name="Result", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
            public global::System.Int32? Result  { get; set; }
         #endregion
        [JsonIgnore]
	    public DateTime? If_Modified_Since { get {return null;}}
        #region [IDateModified]
        [JsonIgnore]
	    public DateTime? LastModified { get { return If_Modified_Since;}}
        #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "ID": return ID;
				    case "LANG": return Lang;
				    case "RESULT": return Result;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "ID":if (value == null)ID=null;else ID=Convert.ToInt32(value);break;
                case "LANG":Lang=(string)value;break;
                case "RESULT":if (value == null)Result=null;else Result=Convert.ToInt32(value);break;
                }
            }
		}
		#endregion
    }
#endregion
#region [BankStatements/ChangePaymentsStatus]

	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="BankStatements_ChangePaymentsStatus_Request_ACTION",Namespace = "")]
	public class BankStatements_ChangePaymentsStatus_Request_ACTION : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// Значение данного поля соответствует значению поля  DOC_ID из интерфейсной таблицы. Необходим уникальный индекс.
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("cpd_ExportID")]
        [DataMember(Name="cpd_ExportID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? cpd_ExportID  { get; set; }
              /// <summary>
        /// Формат вывода ошибки
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 'xml'</para>
///<para>Max length : 25</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("ErrFormat")]
        [DataMember(Name="ErrFormat",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ErrFormat     {
		get { return Format ?? "xml"; }
		set { this.Format = value; }
	}
              /// <summary>
        /// Указание языка для набора multi-language данных 
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : ''</para>
///<para>Max length : 3</para>
///<para>Mandatory : Yes</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("lang")]
        [DataMember(Name="lang",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
			[JsonIgnore]
	public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("PayDocStatusId")]
        [DataMember(Name="PayDocStatusId",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? PayDocStatusId  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Result")]
        [DataMember(Name="Result",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? Result  { get; set; }
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "CPD_EXPORTID": return cpd_ExportID;
				    case "ERRFORMAT": return ErrFormat;
				    case "LANG": return lang;
				    case "PAYDOCSTATUSID": return PayDocStatusId;
				    case "RESULT": return Result;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "CPD_EXPORTID":if (value == null)cpd_ExportID=null;else cpd_ExportID=Convert.ToInt32(value);break;
                case "ERRFORMAT":ErrFormat=(string)value;break;
                case "LANG":lang=(string)value;break;
                case "PAYDOCSTATUSID":if (value == null)PayDocStatusId=null;else PayDocStatusId=Convert.ToInt32(value);break;
                case "RESULT":if (value == null)Result=null;else Result=Convert.ToInt32(value);break;
                }
            }
		}
		#endregion
	}
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="BankStatements_ChangePaymentsStatus_Response_ACTION",Namespace = "")]
	public class BankStatements_ChangePaymentsStatus_Response_ACTION: BaseEntity, IModifiedTag
	{
         #region [Properties]
//Base Attrribute '' skipped
			/// <summary>
			/// No description
			/// <para/>
			/// Result
			/// </summary>
			///<remarks>
			///No description
			///</remarks>
			[JsonProperty("Result")]
			[DataMember(Name="Result", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
            public global::System.Int32? Result  { get; set; }
         #endregion
        [JsonIgnore]
	    public DateTime? If_Modified_Since { get {return null;}}
        #region [IDateModified]
        [JsonIgnore]
	    public DateTime? LastModified { get { return If_Modified_Since;}}
        #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                }
            }
		}
		#endregion
    }
#endregion
#region [BankStatements/CheckNoSavePayments]

	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="BankStatements_CheckNoSavePayments_Request_ACTION",Namespace = "")]
	public class BankStatements_CheckNoSavePayments_Request_ACTION : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// Формат вывода ошибки
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 'json'</para>
///<para>Max length : 25</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("ErrFormat")]
        [DataMember(Name="ErrFormat",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ErrFormat     {
		get { return Format ?? "json"; }
		set { this.Format = value; }
	}
              /// <summary>
        /// Указание языка для набора multi-language данных 
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 'uk'</para>
///<para>Max length : 3</para>
///<para>Mandatory : Yes</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("lang")]
        [DataMember(Name="lang",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
			[JsonIgnore]
	public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Result")]
        [DataMember(Name="Result",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? Result  { get; set; }
              /// <summary>
        /// ID пользователя
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("UserID")]
        [DataMember(Name="UserID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? UserID  { get; set; }
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "ERRFORMAT": return ErrFormat;
				    case "LANG": return lang;
				    case "RESULT": return Result;
				    case "USERID": return UserID;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "ERRFORMAT":ErrFormat=(string)value;break;
                case "LANG":lang=(string)value;break;
                case "RESULT":if (value == null)Result=null;else Result=Convert.ToInt32(value);break;
                case "USERID":if (value == null)UserID=null;else UserID=Convert.ToInt32(value);break;
                }
            }
		}
		#endregion
	}
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="BankStatements_CheckNoSavePayments_Response_ACTION",Namespace = "")]
	public class BankStatements_CheckNoSavePayments_Response_ACTION: BaseEntity, IModifiedTag
	{
         #region [Properties]
//Base Attrribute '' skipped
			/// <summary>
			/// No description
			/// <para/>
			/// Result
			/// </summary>
			///<remarks>
			///No description
			///</remarks>
			[JsonProperty("Result")]
			[DataMember(Name="Result", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
            public global::System.Int32? Result  { get; set; }
         #endregion
        [JsonIgnore]
	    public DateTime? If_Modified_Since { get {return null;}}
        #region [IDateModified]
        [JsonIgnore]
	    public DateTime? LastModified { get { return If_Modified_Since;}}
        #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                }
            }
		}
		#endregion
    }
#endregion
#region [BankStatements/ClearBatch]

	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="BankStatements_ClearBatch_Request_ACTION",Namespace = "")]
	public class BankStatements_ClearBatch_Request_ACTION : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// ID пачки платежей, которая находится на обработке в АРМ
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("BatchID")]
        [DataMember(Name="BatchID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? BatchID  { get; set; }
              /// <summary>
        /// Формат вывода ошибки
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 'xml'</para>
///<para>Max length : 25</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("ErrFormat")]
        [DataMember(Name="ErrFormat",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ErrFormat     {
		get { return Format ?? "xml"; }
		set { this.Format = value; }
	}
              /// <summary>
        /// Указание языка для набора multi-language данных 
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : ''</para>
///<para>Max length : 3</para>
///<para>Mandatory : Yes</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("lang")]
        [DataMember(Name="lang",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
			[JsonIgnore]
	public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Result")]
        [DataMember(Name="Result",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? Result  { get; set; }
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "BATCHID": return BatchID;
				    case "ERRFORMAT": return ErrFormat;
				    case "LANG": return lang;
				    case "RESULT": return Result;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "BATCHID":if (value == null)BatchID=null;else BatchID=Convert.ToInt32(value);break;
                case "ERRFORMAT":ErrFormat=(string)value;break;
                case "LANG":lang=(string)value;break;
                case "RESULT":if (value == null)Result=null;else Result=Convert.ToInt32(value);break;
                }
            }
		}
		#endregion
	}
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="BankStatements_ClearBatch_Response_ACTION",Namespace = "")]
	public class BankStatements_ClearBatch_Response_ACTION: BaseEntity, IModifiedTag
	{
         #region [Properties]
//Base Attrribute '' skipped
			/// <summary>
			/// No description
			/// <para/>
			/// Result
			/// </summary>
			///<remarks>
			///No description
			///</remarks>
			[JsonProperty("Result")]
			[DataMember(Name="Result", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
            public global::System.Int32? Result  { get; set; }
         #endregion
        [JsonIgnore]
	    public DateTime? If_Modified_Since { get {return null;}}
        #region [IDateModified]
        [JsonIgnore]
	    public DateTime? LastModified { get { return If_Modified_Since;}}
        #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                }
            }
		}
		#endregion
    }
#endregion
#region [BankStatementTransactions]
  
    
    
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="BankStatementTransactions_Request_GET",Namespace = "")]
	public class BankStatementTransactions_Request_GET : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// Идентификатор банковского счета
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("BankAccountID")]
        [DataMember(Name="BankAccountID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? BankAccountID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("DateFrom")]
        [DataMember(Name="DateFrom",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? DateFrom  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("DateTo")]
        [DataMember(Name="DateTo",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? DateTo  { get; set; }
              /// <summary>
        /// Формат вывода ошибки
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 'json'</para>
///<para>Max length : 25</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("ErrFormat")]
        [DataMember(Name="ErrFormat",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ErrFormat     {
		get { return Format ?? "json"; }
		set { this.Format = value; }
	}
              /// <summary>
        /// Признак передачи внешнего значения ID
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 1</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("IDType")]
        [DataMember(Name="IDType",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? IDType  { get; set; } = 1;
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Header
        /// </remarks>
        [JsonProperty("If-Modified-Since")]
        [DataMember(Name="If-Modified-Since",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? If_Modified_Since  { get; set; }
              /// <summary>
        /// Указание языка для набора multi-language данных 
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : ''</para>
///<para>Max length : 3</para>
///<para>Mandatory : Yes</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("lang")]
        [DataMember(Name="lang",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
			[JsonIgnore]
	public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 1</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("Page")]
        [DataMember(Name="Page",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? Page  { get; set; } = 1;
              /// <summary>
        /// Кол-во записей на странице (server paging)
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 10000</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("PageSize")]
        [DataMember(Name="PageSize",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? PageSize  { get; set; } = 10000;
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : ''</para>
///<para>Max length : 20</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("SortColumn")]
        [DataMember(Name="SortColumn",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String SortColumn  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 'ASC'</para>
///<para>Max length : 20</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("SortDirection")]
        [DataMember(Name="SortDirection",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String SortDirection  { get; set; } = "ASC";
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "BANKACCOUNTID": return BankAccountID;
				    case "DATEFROM": return DateFrom;
				    case "DATETO": return DateTo;
				    case "ERRFORMAT": return ErrFormat;
				    case "IDTYPE": return IDType;
				    case "IFMODIFIEDSINCE":
                    case "IF-MODIFIED-SINCE":
                    case "IF_MODIFIED_SINCE": return If_Modified_Since;
				    case "LANG": return lang;
				    case "PAGE": return Page;
				    case "PAGESIZE": return PageSize;
				    case "SORTCOLUMN": return SortColumn;
				    case "SORTDIRECTION": return SortDirection;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "BANKACCOUNTID":if (value == null)BankAccountID=null;else BankAccountID=Convert.ToInt32(value);break;
                case "DATEFROM":if (value == null)DateFrom=null;else DateFrom=Convert.ToDateTime(value);break;
                case "DATETO":if (value == null)DateTo=null;else DateTo=Convert.ToDateTime(value);break;
                case "ERRFORMAT":ErrFormat=(string)value;break;
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
				    case "IFMODIFIEDSINCE":
                    case "IF-MODIFIED-SINCE":
                    case "IF_MODIFIED_SINCE":if (value == null)If_Modified_Since=null;else If_Modified_Since=Convert.ToDateTime(value);break;
                case "LANG":lang=(string)value;break;
                case "PAGE":if (value == null)Page=null;else Page=Convert.ToInt32(value);break;
                case "PAGESIZE":if (value == null)PageSize=null;else PageSize=Convert.ToInt32(value);break;
                case "SORTCOLUMN":SortColumn=(string)value;break;
                case "SORTDIRECTION":SortDirection=(string)value;break;
                }
            }
		}
		#endregion
	}
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="BankStatementTransactions_Response_GET",Namespace = "")]
	public class BankStatementTransactions_Response_GET: BaseEntity, IModifiedTag
	{
         #region [Properties]
			/// <summary>
			/// Признак передачи внешнего значения ID
			/// <para/>
			/// IsExternalID
			/// </summary>
			///<remarks>
			///Признак передачи внешнего значения ID
			///</remarks>
			[JsonProperty("IDType")]
			[DataMember(Name="IDType", EmitDefaultValue = false)]
			/*norestr*/

            public global::System.Int32? IDType  { get; set; } = 1;
			/// <summary>
			/// No description
			/// <para/>
			/// IfModifiedSinceDate
			/// </summary>
			///<remarks>
			///No description
			///</remarks>
			[JsonProperty("If-Modified-Since")]
			[DataMember(Name="If-Modified-Since", EmitDefaultValue = false)]
			/*norestr*/

            public global::System.DateTime? If_Modified_Since  { get; set; }
			/// <summary>
			/// Указание языка для набора multi-language данных 
			/// <para/>
			/// Lang
			/// </summary>
			///<remarks>
			///Указание языка для набора multi-language данных 
			///</remarks>
			[JsonProperty("lang")]
			[DataMember(Name="lang", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
			[JsonIgnore]
            public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
         #endregion
        #region [IDateModified]
        [JsonIgnore]
	    public DateTime? LastModified { get { return If_Modified_Since;}}
        #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "IDTYPE": return IDType;
				    case "IFMODIFIEDSINCE":
                    case "IF-MODIFIED-SINCE":
                    case "IF_MODIFIED_SINCE": return If_Modified_Since;
				    case "LANG": return lang;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
				    case "IFMODIFIEDSINCE":
                    case "IF-MODIFIED-SINCE":
                    case "IF_MODIFIED_SINCE":if (value == null)If_Modified_Since=null;else If_Modified_Since=Convert.ToDateTime(value);break;
                case "LANG":lang=(string)value;break;
                }
            }
		}
		#endregion
    }
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="BankStatementTransactions_Response_GET_OUTPUT",Namespace = "")]
	public class BankStatementTransactions_Response_GET_OUTPUT : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// Счет отправителя платежа, соответствует полю  BANK_ACCOUNT_TEXT таблицы CE.CE_STATEMENT_LINES
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("BankAccountNumberFrom")]
        [DataMember(Name="BankAccountNumberFrom",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String BankAccountNumberFrom  { get; set; }
              /// <summary>
        /// Сумма платежа. Сумма в ГРН с копейками
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Amount")]
        [DataMember(Name="Amount",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Decimal? Amount  { get; set; }
              /// <summary>
        /// ID банковского счета, соответствует полю CE.CE_STATEMENT_HEADERS_ALL.BANK_ACCOUNT_ID
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("BankAccountExternalID")]
        [DataMember(Name="BankAccountExternalID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? BankAccountExternalID  { get; set; }
              /// <summary>
        /// Номер банковского счета компании, на который поступил платеж
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("BankAccountNumberTo")]
        [DataMember(Name="BankAccountNumberTo",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String BankAccountNumberTo  { get; set; }
              /// <summary>
        /// ID банковской выписки
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("pre_ExternalID")]
        [DataMember(Name="pre_ExternalID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? pre_ExternalID  { get; set; }
              /// <summary>
        /// Номер платежного поручения
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("PaymentOrder")]
        [DataMember(Name="PaymentOrder",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String PaymentOrder  { get; set; }
              /// <summary>
        /// Название банковского счета, по которому получен платеж
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("BankInternalCodeTo")]
        [DataMember(Name="BankInternalCodeTo",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String BankInternalCodeTo  { get; set; }
              /// <summary>
        /// ID пачки платежей, которая находится на обработке в АРМ
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("BatchID")]
        [DataMember(Name="BatchID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? BatchID  { get; set; }
              /// <summary>
        /// Лицевой счет абонента
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("acnt_Number")]
        [DataMember(Name="acnt_Number",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? acnt_Number  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("CreatedBy")]
        [DataMember(Name="CreatedBy",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? CreatedBy  { get; set; }
              /// <summary>
        /// Дата создания записи в интерфейсной таблице
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("EffectiveDate")]
        [DataMember(Name="EffectiveDate",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.DateTime? EffectiveDate  { get; set; }
              /// <summary>
        /// Код валюты
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("crn_CodeISO")]
        [DataMember(Name="crn_CodeISO",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String crn_CodeISO  { get; set; }
              /// <summary>
        /// Дата платежа
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("PayDate")]
        [DataMember(Name="PayDate",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? PayDate  { get; set; }
              /// <summary>
        /// Значение данного поля соответствует значению поля  DOC_ID из интерфейсной таблицы. Необходим уникальный индекс.
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ID")]
        [DataMember(Name="ID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? ID 	{
		get 
		{ 
			if(emptyId.Equals(this.Id))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.Id, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.Id = value.ToString(); }
	}
              /// <summary>
        /// Дата обновления записи в интерфейсной таблице
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedDate")]
        [DataMember(Name="ModifiedDate",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.DateTime? ModifiedDate  { get; set; }
              /// <summary>
        /// Пользователь обновивший запись
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedDBy")]
        [DataMember(Name="ModifiedDBy",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? ModifiedDBy  { get; set; }
              /// <summary>
        /// Номер выписки в биллинговой системе.
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("pre_NumReestr")]
        [DataMember(Name="pre_NumReestr",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String pre_NumReestr  { get; set; }
              /// <summary>
        /// МФО банковского счета, на который поступил платеж
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("BankCodeTo")]
        [DataMember(Name="BankCodeTo",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String BankCodeTo  { get; set; }
              /// <summary>
        /// МФО банка отправителя
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("BankCodeFrom")]
        [DataMember(Name="BankCodeFrom",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String BankCodeFrom  { get; set; }
              /// <summary>
        /// Наименование отправителя
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("BankNameFrom")]
        [DataMember(Name="BankNameFrom",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String BankNameFrom  { get; set; }
              /// <summary>
        /// ОКПО отправителя
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("BusinessUIDFrom")]
        [DataMember(Name="BusinessUIDFrom",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String BusinessUIDFrom  { get; set; }
              /// <summary>
        /// org_id - идентификатор организации
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("TenantID")]
        [DataMember(Name="TenantID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? TenantID  { get; set; }
              /// <summary>
        /// Номер заявки на покупки валюты
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("RequestNumber")]
        [DataMember(Name="RequestNumber",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String RequestNumber  { get; set; }
              /// <summary>
        /// Статус строки интерфейса
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Status")]
        [DataMember(Name="Status",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? Status  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("StatusCode")]
        [DataMember(Name="StatusCode",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String StatusCode  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("StatusName")]
        [DataMember(Name="StatusName",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String StatusName  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Total")]
        [DataMember(Name="Total",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? Total  { get; set; }
              /// <summary>
        /// Код транзакции при проведении операции покупки, продажи валюты
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("TransactionCode")]
        [DataMember(Name="TransactionCode",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String TransactionCode  { get; set; }
              /// <summary>
        /// Назначение платежа
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("TransactionText")]
        [DataMember(Name="TransactionText",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String TransactionText  { get; set; }
              /// <summary>
        /// Учетная запись, под которой запущена сессия активного процесса (sysprocesses)
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("UserName")]
        [DataMember(Name="UserName",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String UserName  { get; set; }
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "BANKACCOUNTNUMBERFROM": return BankAccountNumberFrom;
				    case "AMOUNT": return Amount;
				    case "BANKACCOUNTEXTERNALID": return BankAccountExternalID;
				    case "BANKACCOUNTNUMBERTO": return BankAccountNumberTo;
				    case "PRE_EXTERNALID": return pre_ExternalID;
				    case "PAYMENTORDER": return PaymentOrder;
				    case "BANKINTERNALCODETO": return BankInternalCodeTo;
				    case "BATCHID": return BatchID;
				    case "ACNT_NUMBER": return acnt_Number;
				    case "CREATEDBY": return CreatedBy;
				    case "EFFECTIVEDATE": return EffectiveDate;
				    case "CRN_CODEISO": return crn_CodeISO;
				    case "PAYDATE": return PayDate;
				    case "ID": return ID;
				    case "MODIFIEDDATE": return ModifiedDate;
				    case "MODIFIEDDBY": return ModifiedDBy;
				    case "PRE_NUMREESTR": return pre_NumReestr;
				    case "BANKCODETO": return BankCodeTo;
				    case "BANKCODEFROM": return BankCodeFrom;
				    case "BANKNAMEFROM": return BankNameFrom;
				    case "BUSINESSUIDFROM": return BusinessUIDFrom;
				    case "TENANTID": return TenantID;
				    case "REQUESTNUMBER": return RequestNumber;
				    case "STATUS": return Status;
				    case "STATUSCODE": return StatusCode;
				    case "STATUSNAME": return StatusName;
				    case "TOTAL": return Total;
				    case "TRANSACTIONCODE": return TransactionCode;
				    case "TRANSACTIONTEXT": return TransactionText;
				    case "USERNAME": return UserName;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "BANKACCOUNTNUMBERFROM":BankAccountNumberFrom=(string)value;break;
                case "AMOUNT":if (value == null)Amount=null;else Amount=Convert.ToDecimal(value);break;
                case "BANKACCOUNTEXTERNALID":if (value == null)BankAccountExternalID=null;else BankAccountExternalID=Convert.ToInt32(value);break;
                case "BANKACCOUNTNUMBERTO":BankAccountNumberTo=(string)value;break;
                case "PRE_EXTERNALID":if (value == null)pre_ExternalID=null;else pre_ExternalID=Convert.ToInt32(value);break;
                case "PAYMENTORDER":PaymentOrder=(string)value;break;
                case "BANKINTERNALCODETO":BankInternalCodeTo=(string)value;break;
                case "BATCHID":if (value == null)BatchID=null;else BatchID=Convert.ToInt32(value);break;
                case "ACNT_NUMBER":if (value == null)acnt_Number=null;else acnt_Number=Convert.ToInt32(value);break;
                case "CREATEDBY":if (value == null)CreatedBy=null;else CreatedBy=Convert.ToInt32(value);break;
                case "EFFECTIVEDATE":if (value == null)EffectiveDate=null;else EffectiveDate=Convert.ToDateTime(value);break;
                case "CRN_CODEISO":crn_CodeISO=(string)value;break;
                case "PAYDATE":if (value == null)PayDate=null;else PayDate=Convert.ToDateTime(value);break;
                case "ID":if (value == null)ID=null;else ID=Convert.ToInt32(value);break;
                case "MODIFIEDDATE":if (value == null)ModifiedDate=null;else ModifiedDate=Convert.ToDateTime(value);break;
                case "MODIFIEDDBY":if (value == null)ModifiedDBy=null;else ModifiedDBy=Convert.ToInt32(value);break;
                case "PRE_NUMREESTR":pre_NumReestr=(string)value;break;
                case "BANKCODETO":BankCodeTo=(string)value;break;
                case "BANKCODEFROM":BankCodeFrom=(string)value;break;
                case "BANKNAMEFROM":BankNameFrom=(string)value;break;
                case "BUSINESSUIDFROM":BusinessUIDFrom=(string)value;break;
                case "TENANTID":if (value == null)TenantID=null;else TenantID=Convert.ToInt32(value);break;
                case "REQUESTNUMBER":RequestNumber=(string)value;break;
                case "STATUS":if (value == null)Status=null;else Status=Convert.ToInt32(value);break;
                case "STATUSCODE":StatusCode=(string)value;break;
                case "STATUSNAME":StatusName=(string)value;break;
                case "TOTAL":if (value == null)Total=null;else Total=Convert.ToInt32(value);break;
                case "TRANSACTIONCODE":TransactionCode=(string)value;break;
                case "TRANSACTIONTEXT":TransactionText=(string)value;break;
                case "USERNAME":UserName=(string)value;break;
                }
            }
		}
		#endregion
	}
#endregion
#region [BillingTasks]
  
    
    
    ///Accounts
    [EntitySubentity("Accounts")]

	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="BillingTasks_Request_SET",Namespace = "")]
	public class BillingTasks_Request_SET : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// Название сущности REST, для которой выполняется POST операция
	    ///<list type='bullet'>
///<item>
///	<description>Зарезервировано</description>
///</item>
///<item>
///	<description>доступные значения: Customers</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : Customers</para>
///<para>Max length : 50</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("EntityName")]
        [DataMember(Name="EntityName",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String EntityName { get; set; } = "<empty>";
              /// <summary>
        /// Идентификатор биллинговой группы 
	    ///<list type='bullet'>
///<item>
///	<description>зарезервировано</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 1</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("GroupID")]
        [DataMember(Name="GroupID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? GroupID  { get; set; } = 1;
              /// <summary>
        /// Пользователь данного изменения
	    ///<list type='bullet'>
///<item>
///	<term>Username </term>
///	<description> - пользователь из контекста</description>
///</item>
///<item>
///	<term>NULL </term>
///	<description> -если неизвестен</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedBy")]
        [DataMember(Name="ModifiedBy",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedBy  { get; set; }
              /// <summary>
        /// Источник данного изменения
	    ///<list type='bullet'>
///<item>
///	<term>IP </term>
///	<description> -адрес/имя компьютера</description>
///</item>
///<item>
///	<term>NULL </term>
///	<description> - если неизвестен</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedFrom")]
        [DataMember(Name="ModifiedFrom",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedFrom  { get; set; }
              /// <summary>
        /// Параметры выписки счетов
	    ///<list type='bullet'>
///<item>
///	<description>зарезервировано</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Options")]
        [DataMember(Name="Options",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Options  { get; set; }
              /// <summary>
        /// Перечень пакетов (биллинговых циклов) для выписки счетов
	    ///<list type='bullet'>
///<item>
///	<description>зарезервировано</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("PacketsIDs")]
        [DataMember(Name="PacketsIDs",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String PacketsIDs  { get; set; }
              /// <summary>
        /// Комментарий
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Remark")]
        [DataMember(Name="Remark",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Remark  { get; set; }
              /// <summary>
        /// Идентификатор технической услуги ""выписка счета
	    ///<list type='bullet'>
///<item>
///	<description>зарезервировано</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ServiceID")]
        [DataMember(Name="ServiceID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? ServiceID  { get; set; }
              /// <summary>
        /// Идентификатор технической услуги ""куммулятивная выписка счета
	    ///<list type='bullet'>
///<item>
///	<description>зарезервировано</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 1</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ServiceIDAccumulative")]
        [DataMember(Name="ServiceIDAccumulative",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? ServiceIDAccumulative  { get; set; } = 1;
              /// <summary>
        /// Формат данных параметров выписки счетов
	    ///<list type='bullet'>
///<item>
///	<description>'json'</description>
///</item>
///<item>
///	<description>'xml'</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 'json'</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("DataFormat")]
        [DataMember(Name="DataFormat",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String DataFormat  { get; set; } = "json";
              /// <summary>
        /// Дата проведения биллинга (в случае вызова для ЛС - внеочередного) 
	    ///<list type='bullet'>
///<item>
///	<term>для FTTB и PSTN </term>
///	<description> - текущая дата</description>
///</item>
///<item>
///	<term>для GSM </term>
///	<description> - дата равна завтра</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("DateStart")]
        [DataMember(Name="DateStart",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? DateStart  { get; set; }
              /// <summary>
        /// Признак прекратить пакетную выписку счетов после первой ошибки
	    ///<list type='bullet'>
///<item>
///	<description>зарезервировано</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ExitAfterFirstError")]
        [DataMember(Name="ExitAfterFirstError",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? ExitAfterFirstError  { get; set; } = 0;
              /// <summary>
        /// Признак передачи внешнего значения ID
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - внешний ID (для BIS всегда устанавливаем в 1)</description>
///</item>
///<item>
///	<term>0 </term>
///	<description> - внутренний ID</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 1</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("IDType")]
        [DataMember(Name="IDType",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? IDType  { get; set; } = 1;
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Header
        /// </remarks>
        [JsonProperty("cacheStatus")]
        [DataMember(Name="cacheStatus",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String cacheStatus  { get; set; }
              /// <summary>
        /// Идентификатор задачи
	    ///<list type='bullet'>
///<item>
///	<description>Используется для правки задачи</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("ID")]
        [DataMember(Name="ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int64? ID 	{
		get 
		{ 
			if(emptyId.Equals(this.Id))
			{
return 0;
			}
			global::System.Int64 result = default(global::System.Int64);
			if(global::System.Int64.TryParse(this.Id, out result))
				return result; 
			else
            {
return 0;
            }
		}
		set { this.Id = value.ToString(); }
	}
              /// <summary>
        /// Идентификатор лицевого счета (соответствует CustomerID)
	    ///<list type='bullet'>
///<item>
///	<description>CLNT_ID из справочника CLIENT_HISTORIES</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("ParentID")]
        [DataMember(Name="ParentID",EmitDefaultValue = false)]
		[JsonRestrictedByValue("<empty>")]

[SecondaryKey("Accounts_Request_SET","ID")]/*SET*/
	public global::System.Int32? ParentID 	{
		get 
		{ 
			if(emptyId.Equals(this.ParentId))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.ParentId, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.ParentId = value.ToString(); }
	}
              /// <summary>
        /// Указание языка для набора multi-language данных 
	    ///<list type='bullet'>
///<item>
///	<term>'uk' </term>
///	<description> -украинский</description>
///</item>
///<item>
///	<term>'ru' </term>
///	<description> -руский </description>
///</item>
///<item>
///	<term>'en' </term>
///	<description> -английский</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 'uk'</para>
///<para>Max length : 3</para>
///<para>Mandatory : Yes</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("lang")]
        [DataMember(Name="lang",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
			[JsonIgnore]
	public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
              /// <summary>
        /// Формат вывода ошибки
	    ///<list type='bullet'>
///<item>
///	<description>'json'</description>
///</item>
///<item>
///	<description>'xml'</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : xml</para>
///<para>Max length : 25</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ErrFormat")]
        [DataMember(Name="ErrFormat",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ErrFormat     {
		get { return Format ?? "xml"; }
		set { this.Format = value; }
	}
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("srs_ID_list")]
        [DataMember(Name="srs_ID_list",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String srs_ID_list  { get; set; }
              /// <summary>
        /// Код задачи
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Tsst_Code")]
        [DataMember(Name="Tsst_Code",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Tsst_Code  { get; set; }
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "ENTITYNAME": return EntityName;
				    case "GROUPID": return GroupID;
				    case "MODIFIEDBY": return ModifiedBy;
				    case "MODIFIEDFROM": return ModifiedFrom;
				    case "OPTIONS": return Options;
				    case "PACKETSIDS": return PacketsIDs;
				    case "REMARK": return Remark;
				    case "SERVICEID": return ServiceID;
				    case "SERVICEIDACCUMULATIVE": return ServiceIDAccumulative;
				    case "DATAFORMAT": return DataFormat;
				    case "DATESTART": return DateStart;
				    case "EXITAFTERFIRSTERROR": return ExitAfterFirstError;
				    case "IDTYPE": return IDType;
				    case "CACHESTATUS": return cacheStatus;
				    case "ID": return ID;
				    case "PARENTID": return ParentID;
				    case "LANG": return lang;
				    case "ERRFORMAT": return ErrFormat;
				    case "SRS_ID_LIST": return srs_ID_list;
				    case "TSST_CODE": return Tsst_Code;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "ENTITYNAME":EntityName=(string)value;break;
                case "GROUPID":if (value == null)GroupID=null;else GroupID=Convert.ToInt32(value);break;
                case "MODIFIEDBY":ModifiedBy=(string)value;break;
                case "MODIFIEDFROM":ModifiedFrom=(string)value;break;
                case "OPTIONS":Options=(string)value;break;
                case "PACKETSIDS":PacketsIDs=(string)value;break;
                case "REMARK":Remark=(string)value;break;
                case "SERVICEID":if (value == null)ServiceID=null;else ServiceID=Convert.ToInt32(value);break;
                case "SERVICEIDACCUMULATIVE":if (value == null)ServiceIDAccumulative=null;else ServiceIDAccumulative=Convert.ToInt32(value);break;
                case "DATAFORMAT":DataFormat=(string)value;break;
                case "DATESTART":if (value == null)DateStart=null;else DateStart=Convert.ToDateTime(value);break;
                case "EXITAFTERFIRSTERROR":if (value == null)ExitAfterFirstError=null;else ExitAfterFirstError=Convert.ToInt32(value);break;
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                case "CACHESTATUS":cacheStatus=(string)value;break;
                case "ID":if (value == null)ID=null;else ID=Convert.ToInt64(value);break;
                case "PARENTID":if (value == null)ParentID=null;else ParentID=Convert.ToInt32(value);break;
                case "LANG":lang=(string)value;break;
                case "ERRFORMAT":ErrFormat=(string)value;break;
                case "SRS_ID_LIST":srs_ID_list=(string)value;break;
                case "TSST_CODE":Tsst_Code=(string)value;break;
                }
            }
		}
		#endregion
	}
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="BillingTasks_Response_SET",Namespace = "")]
	public class BillingTasks_Response_SET: BaseEntity, IModifiedTag
	{
         #region [Properties]
			/// <summary>
			/// Идентификатор задачи
			/// <para/>
			/// Tsk_ID
			/// </summary>
			///<remarks>
			///Идентификатор задачи
			///</remarks>
			[JsonProperty("ID")]
			[DataMember(Name="ID", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
            public global::System.Int64? ID 	{
		get 
		{ 
			if(emptyId.Equals(this.Id))
			{
return 0;
			}
			global::System.Int64 result = default(global::System.Int64);
			if(global::System.Int64.TryParse(this.Id, out result))
				return result; 
			else
            {
return 0;
            }
		}
		set { this.Id = value.ToString(); }
	}
			/// <summary>
			/// Признак передачи внешнего значения ID
			/// <para/>
			/// IsExternalID
			/// </summary>
			///<remarks>
			///Признак передачи внешнего значения ID
			///</remarks>
			[JsonProperty("IDType")]
			[DataMember(Name="IDType", EmitDefaultValue = false)]
			/*norestr*/

            public global::System.Int32? IDType  { get; set; } = 1;
         #endregion
        [JsonIgnore]
	    public DateTime? If_Modified_Since { get {return null;}}
        #region [IDateModified]
        [JsonIgnore]
	    public DateTime? LastModified { get { return If_Modified_Since;}}
        #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "ID": return ID;
				    case "IDTYPE": return IDType;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "ID":if (value == null)ID=null;else ID=Convert.ToInt64(value);break;
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                }
            }
		}
		#endregion
    }
#endregion
#region [CallCredits]
  
    
    ///<remarks>POST &lt;host&gt;[:&lt;port&gt;]/api/v1/bss/subscribers/[parentid]/CallCredits
///</remarks>
    ///Subscribers
    [EntitySubentity("Subscribers")]

	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="CallCredits_Request_SET",Namespace = "")]
	public class CallCredits_Request_SET : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// Идентификатор формы скидки
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - включенный трафик в валюте</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("DiscountForm")]
        [DataMember(Name="DiscountForm",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? DiscountForm  { get; set; }
              /// <summary>
        /// Параметры формы скидки
	    ///<list type='bullet'>
///<item>
///	<term>Для включенного трафика </term>
///	<description> - сумма скидки без учета налогов</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("DiscountFormParam")]
        [DataMember(Name="DiscountFormParam",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Decimal? DiscountFormParam  { get; set; }
              /// <summary>
        /// Идентификатор скидки
	    ///<list type='bullet'>
///<item>
///	<description>DCPL_ID из DISCOUNT_PLANS</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("DiscountID")]
        [DataMember(Name="DiscountID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? DiscountID  { get; set; }
              /// <summary>
        /// Пользователь данного изменения
	    ///<list type='bullet'>
///<item>
///	<term>Username </term>
///	<description> - пользователь из контекста</description>
///</item>
///<item>
///	<term>NULL </term>
///	<description> -если неизвестен</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedBy")]
        [DataMember(Name="ModifiedBy",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedBy  { get; set; }
              /// <summary>
        /// Источник данного изменения
	    ///<list type='bullet'>
///<item>
///	<term>IP </term>
///	<description> -адрес/имя компьютера</description>
///</item>
///<item>
///	<term>NULL </term>
///	<description> - если неизвестен</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedFrom")]
        [DataMember(Name="ModifiedFrom",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedFrom  { get; set; }
              /// <summary>
        /// Признак закрытия действия скидки с указанной даты DateSet
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - действие скидки закрыть</description>
///</item>
///<item>
///	<term>0 </term>
///	<description> - скидку назначить</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("isAnnul")]
        [DataMember(Name="isAnnul",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? isAnnul  { get; set; } = 0;
              /// <summary>
        /// Комментарий изменений
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Remark")]
        [DataMember(Name="Remark",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Remark  { get; set; }
              /// <summary>
        /// Дата установки изменений (начала действия или окончания)
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("DateSet")]
        [DataMember(Name="DateSet",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? DateSet  { get; set; }
              /// <summary>
        /// Идентификатор абонента
	    ///<list type='bullet'>
///<item>
///	<description>SUBS_ID</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("ParentID")]
        [DataMember(Name="ParentID",EmitDefaultValue = false)]
		[JsonRestrictedByValue("<empty>")]

[SecondaryKey("Subscribers_Request_SET","ID")]/*SET*/
	public global::System.Int32? ParentID 	{
		get 
		{ 
			if(emptyId.Equals(this.ParentId))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.ParentId, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.ParentId = value.ToString(); }
	}
              /// <summary>
        /// Уникальный идентификатор исторической связки абонента и скидки
	    ///<list type='bullet'>
///<item>
///	<description>идентификатор из SUBS_DISCOUNT_PLAN_VOLUMES</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("ID")]
        [DataMember(Name="ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? ID 	{
		get 
		{ 
			if(emptyId.Equals(this.Id))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.Id, out result))
				return result; 
			else
            {
return 0;
            }
		}
		set { this.Id = value.ToString(); }
	}
              /// <summary>
        /// Указание языка для набора multi-language данных 
	    ///<list type='bullet'>
///<item>
///	<term>'uk' </term>
///	<description> -украинский</description>
///</item>
///<item>
///	<term>'ru' </term>
///	<description> -руский </description>
///</item>
///<item>
///	<term>'en' </term>
///	<description> -английский</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 'uk'</para>
///<para>Max length : 3</para>
///<para>Mandatory : Yes</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("lang")]
        [DataMember(Name="lang",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
			[JsonIgnore]
	public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
              /// <summary>
        /// Формат вывода ошибки
	    ///<list type='bullet'>
///<item>
///	<description>'json'</description>
///</item>
///<item>
///	<description>'xml'</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : xml</para>
///<para>Max length : 25</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ErrFormat")]
        [DataMember(Name="ErrFormat",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ErrFormat     {
		get { return Format ?? "xml"; }
		set { this.Format = value; }
	}
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "DISCOUNTFORM": return DiscountForm;
				    case "DISCOUNTFORMPARAM": return DiscountFormParam;
				    case "DISCOUNTID": return DiscountID;
				    case "MODIFIEDBY": return ModifiedBy;
				    case "MODIFIEDFROM": return ModifiedFrom;
				    case "ISANNUL": return isAnnul;
				    case "REMARK": return Remark;
				    case "DATESET": return DateSet;
				    case "PARENTID": return ParentID;
				    case "ID": return ID;
				    case "LANG": return lang;
				    case "ERRFORMAT": return ErrFormat;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "DISCOUNTFORM":if (value == null)DiscountForm=null;else DiscountForm=Convert.ToInt32(value);break;
                case "DISCOUNTFORMPARAM":if (value == null)DiscountFormParam=null;else DiscountFormParam=Convert.ToDecimal(value);break;
                case "DISCOUNTID":if (value == null)DiscountID=null;else DiscountID=Convert.ToInt32(value);break;
                case "MODIFIEDBY":ModifiedBy=(string)value;break;
                case "MODIFIEDFROM":ModifiedFrom=(string)value;break;
                case "ISANNUL":if (value == null)isAnnul=null;else isAnnul=Convert.ToInt32(value);break;
                case "REMARK":Remark=(string)value;break;
                case "DATESET":if (value == null)DateSet=null;else DateSet=Convert.ToDateTime(value);break;
                case "PARENTID":if (value == null)ParentID=null;else ParentID=Convert.ToInt32(value);break;
                case "ID":if (value == null)ID=null;else ID=Convert.ToInt32(value);break;
                case "LANG":lang=(string)value;break;
                case "ERRFORMAT":ErrFormat=(string)value;break;
                }
            }
		}
		#endregion
	}
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="CallCredits_Response_SET",Namespace = "")]
	public class CallCredits_Response_SET: BaseEntity, IModifiedTag
	{
         #region [Properties]
			/// <summary>
			/// Указание языка для набора multi-language данных 
			/// <para/>
			/// Lang
			/// </summary>
			///<remarks>
			///Указание языка для набора multi-language данных 
			///</remarks>
			[JsonProperty("lang")]
			[DataMember(Name="lang", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
			[JsonIgnore]
            public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
			/// <summary>
			/// Уникальный идентификатор исторической связки абонента и скидки
			/// <para/>
			/// dab_ID
			/// </summary>
			///<remarks>
			///Уникальный идентификатор исторической связки абонента и скидки
			///</remarks>
			[JsonProperty("ID")]
			[DataMember(Name="ID", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
            public global::System.Int32? ID 	{
		get 
		{ 
			if(emptyId.Equals(this.Id))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.Id, out result))
				return result; 
			else
            {
return 0;
            }
		}
		set { this.Id = value.ToString(); }
	}
         #endregion
        [JsonIgnore]
	    public DateTime? If_Modified_Since { get {return null;}}
        #region [IDateModified]
        [JsonIgnore]
	    public DateTime? LastModified { get { return If_Modified_Since;}}
        #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "LANG": return lang;
				    case "ID": return ID;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "LANG":lang=(string)value;break;
                case "ID":if (value == null)ID=null;else ID=Convert.ToInt32(value);break;
                }
            }
		}
		#endregion
    }
#endregion
#region [CallUserGroups]
  
    
    ///<remarks>POST &lt;host&gt;[:&lt;port&gt;]/api/v1/bss/callusergroups
///</remarks>
    ///<empty>

	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="CallUserGroups_Request_SET",Namespace = "")]
	public class CallUserGroups_Request_SET : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// Дата окончания действия Закрытой абонентской группы
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("DateEnd")]
        [DataMember(Name="DateEnd",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? DateEnd  { get; set; }
              /// <summary>
        /// Дата начала действия Закрытой абонентской группы
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("DateStart")]
        [DataMember(Name="DateStart",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? DateStart  { get; set; }
              /// <summary>
        /// Приоритет Закрытой абонентской группы
	    ///<list type='bullet'>
///<item>
///	<description>Числовое значение от 1 и выше (чем больше значение</description>
///</item>
///<item>
///	<description>тем выше приоритет)</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Priority")]
        [DataMember(Name="Priority",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? Priority  { get; set; }
              /// <summary>
        /// Перечень возможных префиксов для набора номеров в Закрытой абонентской группе
	    ///<list type='bullet'>
///<item>
///	<description>Зарезервировано</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Prefixes")]
        [DataMember(Name="Prefixes",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Prefixes  { get; set; }
    //Base Attrribute '' skipped
          /// <summary>
        /// Уникальный код Закрытой абонентской группы
	    ///<list type='bullet'>
///<item>
///	<description>Латинские цифры и буквы (вкл. символы подчеркивания и тире)</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Code")]
        [DataMember(Name="Code",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Code  { get; set; }
              /// <summary>
        /// Набор динамических типов, используемых для данной группы 
	    ///<list type='bullet'>
///<item>
///	<description>Зарезервировано</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Options")]
        [DataMember(Name="Options",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Options  { get; set; }
              /// <summary>
        /// Пользователь данного изменения
	    ///<list type='bullet'>
///<item>
///	<term>Username </term>
///	<description> - пользователь из контекста</description>
///</item>
///<item>
///	<term>NULL </term>
///	<description> -если неизвестен</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedBy")]
        [DataMember(Name="ModifiedBy",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedBy  { get; set; }
              /// <summary>
        /// Источник данного изменения
	    ///<list type='bullet'>
///<item>
///	<term>IP </term>
///	<description> -адрес/имя компьютера</description>
///</item>
///<item>
///	<term>NULL </term>
///	<description> - если неизвестен</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedFrom")]
        [DataMember(Name="ModifiedFrom",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedFrom  { get; set; }
              /// <summary>
        /// Категория Закрытой группы (односторонняя, двусторонняя и т.д.)
	    ///<list type='bullet'>
///<item>
///	<description>crgc_ID из справочника CodeRegionCategories</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Type")]
        [DataMember(Name="Type",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? Type  { get; set; }
              /// <summary>
        /// Идентификатор Закрытой абонентской группы
	    ///<list type='bullet'>
///<item>
///	<description>Используется для правки</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("ID")]
        [DataMember(Name="ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? ID 	{
		get 
		{ 
			if(emptyId.Equals(this.Id))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.Id, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.Id = value.ToString(); }
	}
              /// <summary>
        /// Формат вывода ошибки
	    ///<list type='bullet'>
///<item>
///	<description>'json'</description>
///</item>
///<item>
///	<description>'xml'</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : xml</para>
///<para>Max length : 25</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ErrFormat")]
        [DataMember(Name="ErrFormat",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ErrFormat     {
		get { return Format ?? "xml"; }
		set { this.Format = value; }
	}
              /// <summary>
        /// Указание языка для набора multi-language данных 
	    ///<list type='bullet'>
///<item>
///	<term>'uk' </term>
///	<description> -украинский</description>
///</item>
///<item>
///	<term>'ru' </term>
///	<description> -руский </description>
///</item>
///<item>
///	<term>'en' </term>
///	<description> -английский</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 'uk'</para>
///<para>Max length : 3</para>
///<para>Mandatory : Yes</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("lang")]
        [DataMember(Name="lang",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
			[JsonIgnore]
	public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Crg_Default")]
        [DataMember(Name="Crg_Default",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? Crg_Default  { get; set; }
              /// <summary>
        /// Признак, что зона содержит лишь уникальные коды (т.е. не входящие в др.зоны)
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Crg_IsUniqueCodes")]
        [DataMember(Name="Crg_IsUniqueCodes",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? Crg_IsUniqueCodes  { get; set; }
              /// <summary>
        /// Идентификатор типа типа внешней зоны. Связь с CodeRegionTypes
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Crgt_ID")]
        [DataMember(Name="Crgt_ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? Crgt_ID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("RegionNameEN")]
        [DataMember(Name="RegionNameEN",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String RegionNameEN  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("RegionNameRU")]
        [DataMember(Name="RegionNameRU",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String RegionNameRU  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("RegionNameUK")]
        [DataMember(Name="RegionNameUK",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String RegionNameUK  { get; set; }
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "DATEEND": return DateEnd;
				    case "DATESTART": return DateStart;
				    case "PRIORITY": return Priority;
				    case "PREFIXES": return Prefixes;
				    case "NAME": return Name;
				    case "CODE": return Code;
				    case "OPTIONS": return Options;
				    case "MODIFIEDBY": return ModifiedBy;
				    case "MODIFIEDFROM": return ModifiedFrom;
				    case "TYPE": return Type;
				    case "ID": return ID;
				    case "ERRFORMAT": return ErrFormat;
				    case "LANG": return lang;
				    case "CRG_DEFAULT": return Crg_Default;
				    case "CRG_ISUNIQUECODES": return Crg_IsUniqueCodes;
				    case "CRGT_ID": return Crgt_ID;
				    case "REGIONNAMEEN": return RegionNameEN;
				    case "REGIONNAMERU": return RegionNameRU;
				    case "REGIONNAMEUK": return RegionNameUK;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "DATEEND":if (value == null)DateEnd=null;else DateEnd=Convert.ToDateTime(value);break;
                case "DATESTART":if (value == null)DateStart=null;else DateStart=Convert.ToDateTime(value);break;
                case "PRIORITY":if (value == null)Priority=null;else Priority=Convert.ToInt32(value);break;
                case "PREFIXES":Prefixes=(string)value;break;
                case "NAME":Name=(string)value;break;
                case "CODE":Code=(string)value;break;
                case "OPTIONS":Options=(string)value;break;
                case "MODIFIEDBY":ModifiedBy=(string)value;break;
                case "MODIFIEDFROM":ModifiedFrom=(string)value;break;
                case "TYPE":if (value == null)Type=null;else Type=Convert.ToInt32(value);break;
                case "ID":if (value == null)ID=null;else ID=Convert.ToInt32(value);break;
                case "ERRFORMAT":ErrFormat=(string)value;break;
                case "LANG":lang=(string)value;break;
                case "CRG_DEFAULT":if (value == null)Crg_Default=null;else Crg_Default=Convert.ToInt32(value);break;
                case "CRG_ISUNIQUECODES":if (value == null)Crg_IsUniqueCodes=null;else Crg_IsUniqueCodes=Convert.ToInt32(value);break;
                case "CRGT_ID":if (value == null)Crgt_ID=null;else Crgt_ID=Convert.ToInt32(value);break;
                case "REGIONNAMEEN":RegionNameEN=(string)value;break;
                case "REGIONNAMERU":RegionNameRU=(string)value;break;
                case "REGIONNAMEUK":RegionNameUK=(string)value;break;
                }
            }
		}
		#endregion
	}
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="CallUserGroups_Response_SET",Namespace = "")]
	public class CallUserGroups_Response_SET: BaseEntity, IModifiedTag
	{
         #region [Properties]
			/// <summary>
			/// Идентификатор Закрытой абонентской группы
			/// <para/>
			/// Crg_ID
			/// </summary>
			///<remarks>
			///Идентификатор Закрытой абонентской группы
			///</remarks>
			[JsonProperty("ID")]
			[DataMember(Name="ID", EmitDefaultValue = false)]
			/*norestr*/

            public global::System.Int32? ID 	{
		get 
		{ 
			if(emptyId.Equals(this.Id))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.Id, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.Id = value.ToString(); }
	}
			/// <summary>
			/// Указание языка для набора multi-language данных 
			/// <para/>
			/// Lang
			/// </summary>
			///<remarks>
			///Указание языка для набора multi-language данных 
			///</remarks>
			[JsonProperty("lang")]
			[DataMember(Name="lang", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
			[JsonIgnore]
            public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
         #endregion
        [JsonIgnore]
	    public DateTime? If_Modified_Since { get {return null;}}
        #region [IDateModified]
        [JsonIgnore]
	    public DateTime? LastModified { get { return If_Modified_Since;}}
        #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "ID": return ID;
				    case "LANG": return lang;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "ID":if (value == null)ID=null;else ID=Convert.ToInt32(value);break;
                case "LANG":lang=(string)value;break;
                }
            }
		}
		#endregion
    }
#endregion
#region [Contracts]
  
    
    ///<remarks>POST &lt;host&gt;[:&lt;port&gt;]/api/v1/bss/customers/[parentid]/contracts
///POST &lt;host&gt;[:&lt;port&gt;]/api/v1/bss/associations/[parentid]/contracts
///POST &lt;host&gt;[:&lt;port&gt;]/api/v1/bss/subscribers/[parentid]/contracts
///</remarks>
    ///Associations,Customers,Subscribers
    [EntitySubentity("Associations")]
    [EntitySubentity("Customers")]
    [EntitySubentity("Subscribers")]

	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Contracts_Request_SET",Namespace = "")]
	public class Contracts_Request_SET : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// Формат данных дополнительных аттрибутов договора
	    ///<list type='bullet'>
///<item>
///	<description>json</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 'json'</para>
///<para>Max length : 25</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("DataFormat")]
        [DataMember(Name="DataFormat",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String DataFormat  { get; set; } = "json";
              /// <summary>
        /// зарезервировано
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("AuthCodeID")]
        [DataMember(Name="AuthCodeID",EmitDefaultValue = false)]
		/*norestr*/

[SecondaryKey("AuthCodes_Request_SET","AuthCodeID")]/*SET*/
	public global::System.Int32? AuthCodeID  { get; set; }
              /// <summary>
        /// Идентификатор класса Договора
	    ///<list type='bullet'>
///<item>
///	<description>Идентификатор CCLS_ID из CONTRACT_CLASSES</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ClassID")]
        [DataMember(Name="ClassID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? ClassID  { get; set; }
              /// <summary>
        /// Идентификатор категории Договора
	    ///<list type='bullet'>
///<item>
///	<description>Идентификатор CNCT_ID из СONTRACT_CATS</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("CategoryID")]
        [DataMember(Name="CategoryID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? CategoryID  { get; set; }
              /// <summary>
        /// Сумма Договора
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Amount")]
        [DataMember(Name="Amount",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Decimal? Amount  { get; set; }
              /// <summary>
        /// Дата подписания или начала действия Договора
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("DateEnd")]
        [DataMember(Name="DateEnd",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? DateEnd  { get; set; }
              /// <summary>
        /// Срок действия Договора
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("DateStart")]
        [DataMember(Name="DateStart",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? DateStart  { get; set; }
              /// <summary>
        /// Внешний Идентификатор Договора
	    ///<list type='bullet'>
///<item>
///	<description>Используется только при создании Договора</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ExternalID")]
        [DataMember(Name="ExternalID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? ExternalID  { get; set; }
              /// <summary>
        /// Зарезервировано
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("JsonData")]
        [DataMember(Name="JsonData",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String JsonData  { get; set; }
    //Base Attrribute '' skipped
          /// <summary>
        /// Признак Первичного Договора
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Primary")]
        [DataMember(Name="Primary",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? Primary  { get; set; } = 0;
              /// <summary>
        /// Комментарий
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Remark")]
        [DataMember(Name="Remark",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Remark  { get; set; }
              /// <summary>
        /// Идентификатор статуса Договора
	    ///<list type='bullet'>
///<item>
///	<description>Идентификатор CTST_ID из CONTRACT_STATUSES</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("StatusID")]
        [DataMember(Name="StatusID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? StatusID  { get; set; }
              /// <summary>
        /// Пользователь данного изменения
	    ///<list type='bullet'>
///<item>
///	<term>Username </term>
///	<description> - пользователь из контекста</description>
///</item>
///<item>
///	<term>NULL </term>
///	<description> -если неизвестен</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedBy")]
        [DataMember(Name="ModifiedBy",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedBy  { get; set; }
              /// <summary>
        /// Источник данного изменения
	    ///<list type='bullet'>
///<item>
///	<term>IP </term>
///	<description> -адрес/имя компьютера</description>
///</item>
///<item>
///	<term>NULL </term>
///	<description> - если неизвестен</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedFrom")]
        [DataMember(Name="ModifiedFrom",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedFrom  { get; set; }
              /// <summary>
        /// Идентификатор Extentions (Номера MSISDN), который выдан согласно Договора 
	    ///<list type='bullet'>
///<item>
///	<description>значения NSET_ID</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ExtentionID")]
        [DataMember(Name="ExtentionID",EmitDefaultValue = false)]
		/*norestr*/

[SecondaryKey("Extentions_Request_SET","ExtentionID")]/*SET*/
	public global::System.Int32? ExtentionID  { get; set; }
              /// <summary>
        /// Признак передачи внешнего значения ID
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - внешний ID (для BIS всегда устанавливаем в 1)</description>
///</item>
///<item>
///	<term>0 </term>
///	<description> - внутренний ID</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 1</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("IDType")]
        [DataMember(Name="IDType",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? IDType  { get; set; } = 1;
              /// <summary>
        /// Код внешней системы - инициатора запроса
	    ///<list type='bullet'>
///<item>
///	<description>зарезервировано</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Header
        /// </remarks>
        [JsonProperty("System")]
        [DataMember(Name="System",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String System  { get; set; }
              /// <summary>
        /// Название сущности REST, для которой выполняется POST операция
	    ///<list type='bullet'>
///<item>
///	<description>зарезервировано</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("EntityName")]
        [DataMember(Name="EntityName",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String EntityName { get; set; } = "<empty>";
              /// <summary>
        /// Идентификатор Клиента (узла типа Customers) или Идентификатор Ассоциации
	    ///<list type='bullet'>
///<item>
///	<description>CLNT_ID из справочника CLIENT_HISTORIES или ID Ассоциации</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("ParentID")]
        [DataMember(Name="ParentID",EmitDefaultValue = false)]
		[JsonRestrictedByValue("<empty>")]

[SecondaryKey("Associations_Request_SET","ID")]/*SET*/
[SecondaryKey("Subscribers_Request_SET","ID")]/*SET*/
[SecondaryKey("Customers_Request_SET","ID")]/*SET*/
	public global::System.Int32? ParentID 	{
		get 
		{ 
			if(emptyId.Equals(this.ParentId))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.ParentId, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.ParentId = value.ToString(); }
	}
              /// <summary>
        /// Идентификатор Договора
	    ///<list type='bullet'>
///<item>
///	<description>CNTR_ID из справочника CONTRACTS_ALL</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("ID")]
        [DataMember(Name="ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? ID 	{
		get 
		{ 
			if(emptyId.Equals(this.Id))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.Id, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.Id = value.ToString(); }
	}
              /// <summary>
        /// Формат вывода ошибки
	    ///<list type='bullet'>
///<item>
///	<description>'json'</description>
///</item>
///<item>
///	<description>'xml'</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : xml</para>
///<para>Max length : 25</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ErrFormat")]
        [DataMember(Name="ErrFormat",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ErrFormat     {
		get { return Format ?? "xml"; }
		set { this.Format = value; }
	}
              /// <summary>
        /// Указание языка для набора multi-language данных 
	    ///<list type='bullet'>
///<item>
///	<term>'uk' </term>
///	<description> -украинский</description>
///</item>
///<item>
///	<term>'ru' </term>
///	<description> -руский </description>
///</item>
///<item>
///	<term>'en' </term>
///	<description> -английский</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 'uk'</para>
///<para>Max length : 3</para>
///<para>Mandatory : Yes</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("lang")]
        [DataMember(Name="lang",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
			[JsonIgnore]
	public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "DATAFORMAT": return DataFormat;
				    case "AUTHCODEID": return AuthCodeID;
				    case "CLASSID": return ClassID;
				    case "CATEGORYID": return CategoryID;
				    case "AMOUNT": return Amount;
				    case "DATEEND": return DateEnd;
				    case "DATESTART": return DateStart;
				    case "EXTERNALID": return ExternalID;
				    case "JSONDATA": return JsonData;
				    case "NAME": return Name;
				    case "PRIMARY": return Primary;
				    case "REMARK": return Remark;
				    case "STATUSID": return StatusID;
				    case "MODIFIEDBY": return ModifiedBy;
				    case "MODIFIEDFROM": return ModifiedFrom;
				    case "EXTENTIONID": return ExtentionID;
				    case "IDTYPE": return IDType;
				    case "SYSTEM": return System;
				    case "ENTITYNAME": return EntityName;
				    case "PARENTID": return ParentID;
				    case "ID": return ID;
				    case "ERRFORMAT": return ErrFormat;
				    case "LANG": return lang;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "DATAFORMAT":DataFormat=(string)value;break;
                case "AUTHCODEID":if (value == null)AuthCodeID=null;else AuthCodeID=Convert.ToInt32(value);break;
                case "CLASSID":if (value == null)ClassID=null;else ClassID=Convert.ToInt32(value);break;
                case "CATEGORYID":if (value == null)CategoryID=null;else CategoryID=Convert.ToInt32(value);break;
                case "AMOUNT":if (value == null)Amount=null;else Amount=Convert.ToDecimal(value);break;
                case "DATEEND":if (value == null)DateEnd=null;else DateEnd=Convert.ToDateTime(value);break;
                case "DATESTART":if (value == null)DateStart=null;else DateStart=Convert.ToDateTime(value);break;
                case "EXTERNALID":if (value == null)ExternalID=null;else ExternalID=Convert.ToInt32(value);break;
                case "JSONDATA":JsonData=(string)value;break;
                case "NAME":Name=(string)value;break;
                case "PRIMARY":if (value == null)Primary=null;else Primary=Convert.ToInt32(value);break;
                case "REMARK":Remark=(string)value;break;
                case "STATUSID":if (value == null)StatusID=null;else StatusID=Convert.ToInt32(value);break;
                case "MODIFIEDBY":ModifiedBy=(string)value;break;
                case "MODIFIEDFROM":ModifiedFrom=(string)value;break;
                case "EXTENTIONID":if (value == null)ExtentionID=null;else ExtentionID=Convert.ToInt32(value);break;
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                case "SYSTEM":System=(string)value;break;
                case "ENTITYNAME":EntityName=(string)value;break;
                case "PARENTID":if (value == null)ParentID=null;else ParentID=Convert.ToInt32(value);break;
                case "ID":if (value == null)ID=null;else ID=Convert.ToInt32(value);break;
                case "ERRFORMAT":ErrFormat=(string)value;break;
                case "LANG":lang=(string)value;break;
                }
            }
		}
		#endregion
	}
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Contracts_Response_SET",Namespace = "")]
	public class Contracts_Response_SET: BaseEntity, IModifiedTag
	{
         #region [Properties]
			/// <summary>
			/// Идентификатор Договора
			/// <para/>
			/// cntr_ID
			/// </summary>
			///<remarks>
			///Идентификатор Договора
			///</remarks>
			[JsonProperty("ID")]
			[DataMember(Name="ID", EmitDefaultValue = false)]
			/*norestr*/

            public global::System.Int32? ID 	{
		get 
		{ 
			if(emptyId.Equals(this.Id))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.Id, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.Id = value.ToString(); }
	}
			/// <summary>
			/// Признак передачи внешнего значения ID
			/// <para/>
			/// IsExternalID
			/// </summary>
			///<remarks>
			///Признак передачи внешнего значения ID
			///</remarks>
			[JsonProperty("IDType")]
			[DataMember(Name="IDType", EmitDefaultValue = false)]
			/*norestr*/

            public global::System.Int32? IDType  { get; set; } = 1;
			/// <summary>
			/// Указание языка для набора multi-language данных 
			/// <para/>
			/// Lang
			/// </summary>
			///<remarks>
			///Указание языка для набора multi-language данных 
			///</remarks>
			[JsonProperty("lang")]
			[DataMember(Name="lang", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
			[JsonIgnore]
            public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
         #endregion
        [JsonIgnore]
	    public DateTime? If_Modified_Since { get {return null;}}
        #region [IDateModified]
        [JsonIgnore]
	    public DateTime? LastModified { get { return If_Modified_Since;}}
        #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "ID": return ID;
				    case "IDTYPE": return IDType;
				    case "LANG": return lang;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "ID":if (value == null)ID=null;else ID=Convert.ToInt32(value);break;
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                case "LANG":lang=(string)value;break;
                }
            }
		}
		#endregion
    }
#endregion
#region [CustomerPayments]
  
    
    ///<remarks>GET &lt;host&gt;[:&lt;port&gt;]/api/v1/bss/CustomerPayments
///</remarks>
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="CustomerPayments_Request_GET",Namespace = "")]
	public class CustomerPayments_Request_GET : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("CustomerID")]
        [DataMember(Name="CustomerID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? CustomerID  { get; set; }
              /// <summary>
        /// Явное указание суммы подписки - для переопределения цены пакета в случае использования FMC подписок (сумма списания на основании суммы платежа)
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("Amount")]
        [DataMember(Name="Amount",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Amount  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("AmountFrom")]
        [DataMember(Name="AmountFrom",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Decimal? AmountFrom  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("AmountTo")]
        [DataMember(Name="AmountTo",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Decimal? AmountTo  { get; set; }
              /// <summary>
        /// Идентификатор расчетного банковского счета (для безналичніх платежных документов)
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("BankAccountID")]
        [DataMember(Name="BankAccountID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? BankAccountID  { get; set; }
              /// <summary>
        /// Национальный код банка (МФО, БИК, BLZ, sort code, ABA RTN)
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("BankCode")]
        [DataMember(Name="BankCode",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String BankCode  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("KassaRemark")]
        [DataMember(Name="KassaRemark",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String KassaRemark  { get; set; }
              /// <summary>
        /// Признак аннулирования платежа
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 1</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("Annul")]
        [DataMember(Name="Annul",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? Annul  { get; set; } = 1;
              /// <summary>
        /// Внутренний идентификатор разнесенного платежа клиента (суммы на Лицевом счету)
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ID")]
        [DataMember(Name="ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int64? ID 	{
		get 
		{ 
			if(emptyId.Equals(this.Id))
			{
return 0;
			}
			global::System.Int64 result = default(global::System.Int64);
			if(global::System.Int64.TryParse(this.Id, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.Id = value.ToString(); }
	}
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("Remark")]
        [DataMember(Name="Remark",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Remark  { get; set; }
              /// <summary>
        /// Класс платежа
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("PayClass")]
        [DataMember(Name="PayClass",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? PayClass  { get; set; }
              /// <summary>
        /// Уникальный идентификатор транзакции для идемпотентности
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ParentID")]
        [DataMember(Name="ParentID",EmitDefaultValue = false)]
		[JsonRestrictedByValue("<empty>")]

	public global::System.String ParentID 	{
		get {{return this.ParentId;}}
		set {{ this.ParentId = value; }}
	}
              /// <summary>
        /// Номер платежного документа (номер чека или платежки)
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("PayDocNumber")]
        [DataMember(Name="PayDocNumber",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String PayDocNumber  { get; set; }
              /// <summary>
        /// Идентификатор Платежного интерфейса 
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("PayInterfaceID")]
        [DataMember(Name="PayInterfaceID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? PayInterfaceID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("PayInterfaceName")]
        [DataMember(Name="PayInterfaceName",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String PayInterfaceName  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("DateFrom")]
        [DataMember(Name="DateFrom",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? DateFrom  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("DateTo")]
        [DataMember(Name="DateTo",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? DateTo  { get; set; }
              /// <summary>
        /// Формат вывода ошибки
	    ///<list type='bullet'>
///<item>
///	<description>'json'</description>
///</item>
///<item>
///	<description>'xml'</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 'xml'</para>
///<para>Max length : 25</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ErrFormat")]
        [DataMember(Name="ErrFormat",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ErrFormat     {
		get { return Format ?? "xml"; }
		set { this.Format = value; }
	}
              /// <summary>
        /// Признак передачи внешнего значения ID
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - внешний ID (для BIS всегда устанавливаем в 1)</description>
///</item>
///<item>
///	<term>0 </term>
///	<description> - внутренний ID</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 1</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("IDType")]
        [DataMember(Name="IDType",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? IDType  { get; set; } = 1;
              /// <summary>
        /// Дата модификации для http-тега If-Modified-Since
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("CacheControlDate")]
        [DataMember(Name="CacheControlDate",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? CacheControlDate  { get; set; }
              /// <summary>
        /// Указание языка для набора multi-language данных 
	    ///<list type='bullet'>
///<item>
///	<term>'uk' </term>
///	<description> -украинский</description>
///</item>
///<item>
///	<term>'ru' </term>
///	<description> -руский </description>
///</item>
///<item>
///	<term>'en' </term>
///	<description> -английский</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("lang")]
        [DataMember(Name="lang",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
			[JsonIgnore]
	public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 1</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("PageNumber")]
        [DataMember(Name="PageNumber",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? PageNumber  { get; set; } = 1;
              /// <summary>
        /// Кол-во записей на странице (server paging)
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 10000</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("PageSize")]
        [DataMember(Name="PageSize",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? PageSize  { get; set; } = 10000;
              /// <summary>
        /// Номер реестра (для кассовых) или банковской выписки (для безналичных платежных документов)
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ReestrNumber")]
        [DataMember(Name="ReestrNumber",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ReestrNumber  { get; set; }
              /// <summary>
        /// Идентификатор причины корректировки баланса. Ссылка на AccountAdjustReasons
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("aar_ID")]
        [DataMember(Name="aar_ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? aar_ID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("SortColumn")]
        [DataMember(Name="SortColumn",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String SortColumn  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("SortDirection")]
        [DataMember(Name="SortDirection",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String SortDirection  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("IsExternalSync")]
        [DataMember(Name="IsExternalSync",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? IsExternalSync  { get; set; }
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "CUSTOMERID": return CustomerID;
				    case "AMOUNT": return Amount;
				    case "AMOUNTFROM": return AmountFrom;
				    case "AMOUNTTO": return AmountTo;
				    case "BANKACCOUNTID": return BankAccountID;
				    case "BANKCODE": return BankCode;
				    case "KASSAREMARK": return KassaRemark;
				    case "ANNUL": return Annul;
				    case "ID": return ID;
				    case "REMARK": return Remark;
				    case "PAYCLASS": return PayClass;
				    case "PARENTID": return ParentID;
				    case "PAYDOCNUMBER": return PayDocNumber;
				    case "PAYINTERFACEID": return PayInterfaceID;
				    case "PAYINTERFACENAME": return PayInterfaceName;
				    case "DATEFROM": return DateFrom;
				    case "DATETO": return DateTo;
				    case "ERRFORMAT": return ErrFormat;
				    case "IDTYPE": return IDType;
				    case "CACHECONTROLDATE": return CacheControlDate;
				    case "LANG": return lang;
				    case "PAGENUMBER": return PageNumber;
				    case "PAGESIZE": return PageSize;
				    case "REESTRNUMBER": return ReestrNumber;
				    case "AAR_ID": return aar_ID;
				    case "SORTCOLUMN": return SortColumn;
				    case "SORTDIRECTION": return SortDirection;
				    case "ISEXTERNALSYNC": return IsExternalSync;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "CUSTOMERID":if (value == null)CustomerID=null;else CustomerID=Convert.ToInt32(value);break;
                case "AMOUNT":Amount=(string)value;break;
                case "AMOUNTFROM":if (value == null)AmountFrom=null;else AmountFrom=Convert.ToDecimal(value);break;
                case "AMOUNTTO":if (value == null)AmountTo=null;else AmountTo=Convert.ToDecimal(value);break;
                case "BANKACCOUNTID":if (value == null)BankAccountID=null;else BankAccountID=Convert.ToInt32(value);break;
                case "BANKCODE":BankCode=(string)value;break;
                case "KASSAREMARK":KassaRemark=(string)value;break;
                case "ANNUL":if (value == null)Annul=null;else Annul=Convert.ToInt32(value);break;
                case "ID":if (value == null)ID=null;else ID=Convert.ToInt64(value);break;
                case "REMARK":Remark=(string)value;break;
                case "PAYCLASS":if (value == null)PayClass=null;else PayClass=Convert.ToInt32(value);break;
                case "PARENTID":ParentID=(string)value;break;
                case "PAYDOCNUMBER":PayDocNumber=(string)value;break;
                case "PAYINTERFACEID":if (value == null)PayInterfaceID=null;else PayInterfaceID=Convert.ToInt32(value);break;
                case "PAYINTERFACENAME":PayInterfaceName=(string)value;break;
                case "DATEFROM":if (value == null)DateFrom=null;else DateFrom=Convert.ToDateTime(value);break;
                case "DATETO":if (value == null)DateTo=null;else DateTo=Convert.ToDateTime(value);break;
                case "ERRFORMAT":ErrFormat=(string)value;break;
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                case "CACHECONTROLDATE":if (value == null)CacheControlDate=null;else CacheControlDate=Convert.ToDateTime(value);break;
                case "LANG":lang=(string)value;break;
                case "PAGENUMBER":if (value == null)PageNumber=null;else PageNumber=Convert.ToInt32(value);break;
                case "PAGESIZE":if (value == null)PageSize=null;else PageSize=Convert.ToInt32(value);break;
                case "REESTRNUMBER":ReestrNumber=(string)value;break;
                case "AAR_ID":if (value == null)aar_ID=null;else aar_ID=Convert.ToInt32(value);break;
                case "SORTCOLUMN":SortColumn=(string)value;break;
                case "SORTDIRECTION":SortDirection=(string)value;break;
                case "ISEXTERNALSYNC":if (value == null)IsExternalSync=null;else IsExternalSync=Convert.ToInt32(value);break;
                }
            }
		}
		#endregion
	}
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="CustomerPayments_Response_GET",Namespace = "")]
	public class CustomerPayments_Response_GET: BaseEntity, IModifiedTag
	{
         #region [Properties]
			/// <summary>
			/// Признак передачи внешнего значения ID
			/// <para/>
			/// IsExternalID
			/// </summary>
			///<remarks>
			///Признак передачи внешнего значения ID
			///</remarks>
			[JsonProperty("IDType")]
			[DataMember(Name="IDType", EmitDefaultValue = false)]
			/*norestr*/

            public global::System.Int32? IDType  { get; set; } = 1;
			/// <summary>
			/// Дата модификации для http-тега If-Modified-Since
			/// <para/>
			/// IfModifiedSinceDate
			/// </summary>
			///<remarks>
			///Дата модификации для http-тега If-Modified-Since
			///</remarks>
			[JsonProperty("CacheControlDate")]
			[DataMember(Name="CacheControlDate", EmitDefaultValue = false)]
			/*norestr*/

            public global::System.DateTime? CacheControlDate  { get; set; }
			/// <summary>
			/// Указание языка для набора multi-language данных 
			/// <para/>
			/// Lang
			/// </summary>
			///<remarks>
			///Указание языка для набора multi-language данных 
			///</remarks>
			[JsonProperty("lang")]
			[DataMember(Name="lang", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
			[JsonIgnore]
            public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
         #endregion
        [JsonIgnore]
	    public DateTime? If_Modified_Since { get {return CacheControlDate;}}
        #region [IDateModified]
        [JsonIgnore]
	    public DateTime? LastModified { get { return If_Modified_Since;}}
        #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "IDTYPE": return IDType;
				    case "CACHECONTROLDATE": return CacheControlDate;
				    case "LANG": return lang;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                case "CACHECONTROLDATE":if (value == null)CacheControlDate=null;else CacheControlDate=Convert.ToDateTime(value);break;
                case "LANG":lang=(string)value;break;
                }
            }
		}
		#endregion
    }
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="CustomerPayments_Response_GET_OUTPUT",Namespace = "")]
	public class CustomerPayments_Response_GET_OUTPUT : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Moved")]
        [DataMember(Name="Moved",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? Moved  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("PayDocNumber")]
        [DataMember(Name="PayDocNumber",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String PayDocNumber  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("PayINN")]
        [DataMember(Name="PayINN",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String PayINN  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("PayInterfaceID")]
        [DataMember(Name="PayInterfaceID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? PayInterfaceID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("PayInterfaceName")]
        [DataMember(Name="PayInterfaceName",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String PayInterfaceName  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("currency_Name")]
        [DataMember(Name="currency_Name",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String currency_Name  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("customer_Name")]
        [DataMember(Name="customer_Name",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String customer_Name  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("IsPayDoc")]
        [DataMember(Name="IsPayDoc",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? IsPayDoc  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ReestrDate")]
        [DataMember(Name="ReestrDate",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.DateTime? ReestrDate  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ReestrNumber")]
        [DataMember(Name="ReestrNumber",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ReestrNumber  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Total")]
        [DataMember(Name="Total",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? Total  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("BankAccountNumber")]
        [DataMember(Name="BankAccountNumber",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String BankAccountNumber  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("BillDateCreate")]
        [DataMember(Name="BillDateCreate",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.DateTime? BillDateCreate  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("BillNumber")]
        [DataMember(Name="BillNumber",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String BillNumber  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("BankName")]
        [DataMember(Name="BankName",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String BankName  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("KassaRemark")]
        [DataMember(Name="KassaRemark",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String KassaRemark  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Account")]
        [DataMember(Name="Account",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String Account  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("cpay_Amount")]
        [DataMember(Name="cpay_Amount",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Decimal? cpay_Amount  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("cpay_AmountTaxes")]
        [DataMember(Name="cpay_AmountTaxes",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Decimal? cpay_AmountTaxes  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 1</para>
///<para>Max length : 4</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Annul")]
        [DataMember(Name="Annul",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? Annul  { get; set; } = 1;
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("DatePay")]
        [DataMember(Name="DatePay",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.DateTime? DatePay  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("cpay_ExternalID")]
        [DataMember(Name="cpay_ExternalID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String cpay_ExternalID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("cpay_ID")]
        [DataMember(Name="cpay_ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int64? cpay_ID  { get; set; }
              /// <summary>
        /// Пользователь данного изменения
	    ///<list type='bullet'>
///<item>
///	<term>Username </term>
///	<description> - пользователь из контекста</description>
///</item>
///<item>
///	<term>NULL </term>
///	<description> -если неизвестен</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedBy")]
        [DataMember(Name="ModifiedBy",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String ModifiedBy  { get; set; }
              /// <summary>
        /// Дата изменения записи
	    ///<list type='bullet'>
///<item>
///	<description>зарезервировано</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedDate")]
        [DataMember(Name="ModifiedDate",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.DateTime? ModifiedDate  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Remark")]
        [DataMember(Name="Remark",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Remark  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("RemoveBy")]
        [DataMember(Name="RemoveBy",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String RemoveBy  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("RemoveDate")]
        [DataMember(Name="RemoveDate",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.DateTime? RemoveDate  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("PayClassCode")]
        [DataMember(Name="PayClassCode",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String PayClassCode  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("PayClass")]
        [DataMember(Name="PayClass",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? PayClass  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("PayClassName")]
        [DataMember(Name="PayClassName",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String PayClassName  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("cpd_Amount")]
        [DataMember(Name="cpd_Amount",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Decimal? cpd_Amount  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("DealerId")]
        [DataMember(Name="DealerId",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? DealerId  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("DesAccount")]
        [DataMember(Name="DesAccount",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String DesAccount  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("DesContract")]
        [DataMember(Name="DesContract",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String DesContract  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("DesPhone")]
        [DataMember(Name="DesPhone",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String DesPhone  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ParentID")]
        [DataMember(Name="ParentID",EmitDefaultValue = false)]
		[JsonRestrictedByValue("<empty>")]

	public global::System.String ParentID 	{
		get {{return this.ParentId;}}
		set {{ this.ParentId = value; }}
	}
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_WorkPlace")]
        [DataMember(Name="abn_WorkPlace",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String abn_WorkPlace  { get; set; }
              /// <summary>
        /// Указание языка для набора multi-language данных 
	    ///<list type='bullet'>
///<item>
///	<term>'uk' </term>
///	<description> -украинский</description>
///</item>
///<item>
///	<term>'ru' </term>
///	<description> -руский </description>
///</item>
///<item>
///	<term>'en' </term>
///	<description> -английский</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("lang")]
        [DataMember(Name="lang",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
			[JsonIgnore]
	public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
              /// <summary>
        /// Признак передачи внешнего значения ID
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - внешний ID (для BIS всегда устанавливаем в 1)</description>
///</item>
///<item>
///	<term>0 </term>
///	<description> - внутренний ID</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 1</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("IDType")]
        [DataMember(Name="IDType",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? IDType  { get; set; } = 1;
              /// <summary>
        /// Ошибка внешней синхронизации
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("cpay_ExternalError")]
        [DataMember(Name="cpay_ExternalError",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String cpay_ExternalError  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("cps_Code")]
        [DataMember(Name="cps_Code",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String cps_Code  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("cps_ID")]
        [DataMember(Name="cps_ID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? cps_ID  { get; set; }
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "MOVED": return Moved;
				    case "PAYDOCNUMBER": return PayDocNumber;
				    case "PAYINN": return PayINN;
				    case "PAYINTERFACEID": return PayInterfaceID;
				    case "PAYINTERFACENAME": return PayInterfaceName;
				    case "CURRENCY_NAME": return currency_Name;
				    case "CUSTOMER_NAME": return customer_Name;
				    case "ISPAYDOC": return IsPayDoc;
				    case "REESTRDATE": return ReestrDate;
				    case "REESTRNUMBER": return ReestrNumber;
				    case "TOTAL": return Total;
				    case "BANKACCOUNTNUMBER": return BankAccountNumber;
				    case "BILLDATECREATE": return BillDateCreate;
				    case "BILLNUMBER": return BillNumber;
				    case "BANKNAME": return BankName;
				    case "KASSAREMARK": return KassaRemark;
				    case "ACCOUNT": return Account;
				    case "CPAY_AMOUNT": return cpay_Amount;
				    case "CPAY_AMOUNTTAXES": return cpay_AmountTaxes;
				    case "ANNUL": return Annul;
				    case "DATEPAY": return DatePay;
				    case "CPAY_EXTERNALID": return cpay_ExternalID;
				    case "CPAY_ID": return cpay_ID;
				    case "MODIFIEDBY": return ModifiedBy;
				    case "MODIFIEDDATE": return ModifiedDate;
				    case "REMARK": return Remark;
				    case "REMOVEBY": return RemoveBy;
				    case "REMOVEDATE": return RemoveDate;
				    case "PAYCLASSCODE": return PayClassCode;
				    case "PAYCLASS": return PayClass;
				    case "PAYCLASSNAME": return PayClassName;
				    case "CPD_AMOUNT": return cpd_Amount;
				    case "DEALERID": return DealerId;
				    case "DESACCOUNT": return DesAccount;
				    case "DESCONTRACT": return DesContract;
				    case "DESPHONE": return DesPhone;
				    case "PARENTID": return ParentID;
				    case "ABN_WORKPLACE": return abn_WorkPlace;
				    case "LANG": return lang;
				    case "IDTYPE": return IDType;
				    case "CPAY_EXTERNALERROR": return cpay_ExternalError;
				    case "CPS_CODE": return cps_Code;
				    case "CPS_ID": return cps_ID;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "MOVED":if (value == null)Moved=null;else Moved=Convert.ToInt32(value);break;
                case "PAYDOCNUMBER":PayDocNumber=(string)value;break;
                case "PAYINN":PayINN=(string)value;break;
                case "PAYINTERFACEID":if (value == null)PayInterfaceID=null;else PayInterfaceID=Convert.ToInt32(value);break;
                case "PAYINTERFACENAME":PayInterfaceName=(string)value;break;
                case "CURRENCY_NAME":currency_Name=(string)value;break;
                case "CUSTOMER_NAME":customer_Name=(string)value;break;
                case "ISPAYDOC":if (value == null)IsPayDoc=null;else IsPayDoc=Convert.ToInt32(value);break;
                case "REESTRDATE":if (value == null)ReestrDate=null;else ReestrDate=Convert.ToDateTime(value);break;
                case "REESTRNUMBER":ReestrNumber=(string)value;break;
                case "TOTAL":if (value == null)Total=null;else Total=Convert.ToInt32(value);break;
                case "BANKACCOUNTNUMBER":BankAccountNumber=(string)value;break;
                case "BILLDATECREATE":if (value == null)BillDateCreate=null;else BillDateCreate=Convert.ToDateTime(value);break;
                case "BILLNUMBER":BillNumber=(string)value;break;
                case "BANKNAME":BankName=(string)value;break;
                case "KASSAREMARK":KassaRemark=(string)value;break;
                case "ACCOUNT":Account=(string)value;break;
                case "CPAY_AMOUNT":if (value == null)cpay_Amount=null;else cpay_Amount=Convert.ToDecimal(value);break;
                case "CPAY_AMOUNTTAXES":if (value == null)cpay_AmountTaxes=null;else cpay_AmountTaxes=Convert.ToDecimal(value);break;
                case "ANNUL":if (value == null)Annul=null;else Annul=Convert.ToInt32(value);break;
                case "DATEPAY":if (value == null)DatePay=null;else DatePay=Convert.ToDateTime(value);break;
                case "CPAY_EXTERNALID":cpay_ExternalID=(string)value;break;
                case "CPAY_ID":if (value == null)cpay_ID=null;else cpay_ID=Convert.ToInt64(value);break;
                case "MODIFIEDBY":ModifiedBy=(string)value;break;
                case "MODIFIEDDATE":if (value == null)ModifiedDate=null;else ModifiedDate=Convert.ToDateTime(value);break;
                case "REMARK":Remark=(string)value;break;
                case "REMOVEBY":RemoveBy=(string)value;break;
                case "REMOVEDATE":if (value == null)RemoveDate=null;else RemoveDate=Convert.ToDateTime(value);break;
                case "PAYCLASSCODE":PayClassCode=(string)value;break;
                case "PAYCLASS":if (value == null)PayClass=null;else PayClass=Convert.ToInt32(value);break;
                case "PAYCLASSNAME":PayClassName=(string)value;break;
                case "CPD_AMOUNT":if (value == null)cpd_Amount=null;else cpd_Amount=Convert.ToDecimal(value);break;
                case "DEALERID":if (value == null)DealerId=null;else DealerId=Convert.ToInt32(value);break;
                case "DESACCOUNT":DesAccount=(string)value;break;
                case "DESCONTRACT":DesContract=(string)value;break;
                case "DESPHONE":DesPhone=(string)value;break;
                case "PARENTID":ParentID=(string)value;break;
                case "ABN_WORKPLACE":abn_WorkPlace=(string)value;break;
                case "LANG":lang=(string)value;break;
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                case "CPAY_EXTERNALERROR":cpay_ExternalError=(string)value;break;
                case "CPS_CODE":cps_Code=(string)value;break;
                case "CPS_ID":if (value == null)cps_ID=null;else cps_ID=Convert.ToInt32(value);break;
                }
            }
		}
		#endregion
	}
  
    
    ///<remarks>POST &lt;host&gt;[:&lt;port&gt;]/api/v1/bss/paymentdocuments/[parentid]/customerpayments
///POST &lt;host&gt;[:&lt;port&gt;]/api/v1/bss/accounts/[parentid]/customerpayments
///</remarks>
    ///Accounts,PaymentDocuments
    [EntitySubentity("Accounts")]
    [EntitySubentity("PaymentDocuments")]

	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="CustomerPayments_Request_SET",Namespace = "")]
	public class CustomerPayments_Request_SET : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// Дата разнесенного платежа, может не совпадать с датой платежного документа
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("DatePay")]
        [DataMember(Name="DatePay",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? DatePay  { get; set; }
              /// <summary>
        /// Класс платежа
	    ///<list type='bullet'>
///<item>
///	<description>PCLS_ID из справочника PAY_CLASSES</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("PayClass")]
        [DataMember(Name="PayClass",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? PayClass  { get; set; }
              /// <summary>
        /// Номер лицевого счета, переопределяет значение CustomerID
	    ///<list type='bullet'>
///<item>
///	<description>ACCOUNT из справочника CLIENT_HISTORIES</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("AccountNumber")]
        [DataMember(Name="AccountNumber",EmitDefaultValue = false)]
		/*norestr*/

[SecondaryKey("Accounts_Request_SET","Number")]/*SET*/
	public global::System.String AccountNumber  { get; set; }
              /// <summary>
        /// Сумма платежа, включая все налоги Лицевого счета
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Amount")]
        [DataMember(Name="Amount",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Decimal? Amount  { get; set; }
              /// <summary>
        /// Комментарий к платежу, обязателен при аннулировании
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Remark")]
        [DataMember(Name="Remark",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String Remark  { get; set; }
              /// <summary>
        /// Уникальный идентификатор платежного документа в спец. формате (20 символов), включающем в себя код системы, генерирующий платежный документ
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("PayDocID")]
        [DataMember(Name="PayDocID",EmitDefaultValue = false)]
		/*norestr*/

[SecondaryKey("PaymentDocuments_Request_SET","ID")]/*SET*/
[SecondaryKey("PaymentDocuments_Request_SET","global_unique_id")]/*SET*/
	public global::System.String PayDocID  { get; set; }
              /// <summary>
        /// Признак передачи внешнего значения ID
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - внешний ID (для BIS всегда устанавливаем в 1)</description>
///</item>
///<item>
///	<term>0 </term>
///	<description> - внутренний ID</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 1</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("IDType")]
        [DataMember(Name="IDType",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? IDType  { get; set; } = 1;
              /// <summary>
        /// Пользователь данного изменения
	    ///<list type='bullet'>
///<item>
///	<term>Username </term>
///	<description> - пользователь из контекста</description>
///</item>
///<item>
///	<term>NULL </term>
///	<description> -если неизвестен</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedBy")]
        [DataMember(Name="ModifiedBy",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedBy  { get; set; }
              /// <summary>
        /// Источник данного изменения
	    ///<list type='bullet'>
///<item>
///	<term>IP </term>
///	<description> -адрес/имя компьютера</description>
///</item>
///<item>
///	<term>NULL </term>
///	<description> - если неизвестен</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedFrom")]
        [DataMember(Name="ModifiedFrom",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedFrom  { get; set; }
              /// <summary>
        /// Признак разделения сумм аванса и сумм погашения инвойсов из указанной суммы Amount
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - разделять суммы</description>
///</item>
///<item>
///	<term>0 </term>
///	<description> - не разделять</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 1</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("AllocateAmount")]
        [DataMember(Name="AllocateAmount",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? AllocateAmount  { get; set; } = 1;
              /// <summary>
        /// Внутренний ID инвойса для погашения
	    ///<list type='bullet'>
///<item>
///	<description>зарезервировано (используется при Moved = 0)</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("InvoiceID")]
        [DataMember(Name="InvoiceID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? InvoiceID  { get; set; }
              /// <summary>
        /// Номер инвойса для погашения
	    ///<list type='bullet'>
///<item>
///	<description>зарезервировано (используется при Moved = 0)</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("InvoiceNumber")]
        [DataMember(Name="InvoiceNumber",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String InvoiceNumber  { get; set; }
              /// <summary>
        /// Признак аннулирования платежа
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Annul")]
        [DataMember(Name="Annul",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? Annul  { get; set; } = 0;
              /// <summary>
        /// Кем аннулирован платеж (имя пользователя из контекста приложения)
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("RemoveBy")]
        [DataMember(Name="RemoveBy",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String RemoveBy  { get; set; }
              /// <summary>
        /// Откуда было сделано аннулирование (IP-адрес или имя компьютера из контекста приложения)
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("RemoveFrom")]
        [DataMember(Name="RemoveFrom",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String RemoveFrom  { get; set; }
              /// <summary>
        /// Идентификатор платежного интерфейса
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - Кассовый</description>
///</item>
///<item>
///	<term>2 </term>
///	<description> - Банковский и т.д. (справочник PAY_INTERFACE)</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("PayInterfaceID")]
        [DataMember(Name="PayInterfaceID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? PayInterfaceID  { get; set; }
              /// <summary>
        /// Идентификатор Диллера из внешней системы
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("DealerID")]
        [DataMember(Name="DealerID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? DealerID  { get; set; }
              /// <summary>
        /// Код внешней системы
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Header
        /// </remarks>
        [JsonProperty("System")]
        [DataMember(Name="System",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String System  { get; set; }
              /// <summary>
        /// Уникальный идентификатор платежа в спец. формате (20 символов), включающем в себя код системы, генерирующий платежный документ
	    ///<list type='bullet'>
///<item>
///	<term>20 символов (включающих в себя код системы </term>
///	<description> -инициатора платежа)</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Header
        /// </remarks>
        [JsonProperty("global_unique_id")]
        [DataMember(Name="global_unique_id",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String global_unique_id  { get; set; }
              /// <summary>
        /// Идентификатор Клиента
	    ///<list type='bullet'>
///<item>
///	<description>CLNT_ID из справочника CLIENT_HISTORIES</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("ParentID")]
        [DataMember(Name="ParentID",EmitDefaultValue = false)]
		[JsonRestrictedByValue("<empty>")]

[SecondaryKey("Accounts_Request_SET","ID")]/*SET*/
[SecondaryKey("PaymentDocuments_Request_SET","ID")]/*SET*/
[SecondaryKey("PaymentDocuments_Request_SET","global_unique_id")]/*SET*/
	public global::System.Int32? ParentID 	{
		get 
		{ 
			if(emptyId.Equals(this.ParentId))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.ParentId, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.ParentId = value.ToString(); }
	}
              /// <summary>
        /// Внутренний идентификатор разнесенного платежа клиента (суммы на Лицевом счету)
	    ///<list type='bullet'>
///<item>
///	<term>для аннулирования </term>
///	<description> - PAY_ID из справочника PAYMENTS</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("ID")]
        [DataMember(Name="ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int64? ID 	{
		get 
		{ 
			if(emptyId.Equals(this.Id))
			{
return 0;
			}
			global::System.Int64 result = default(global::System.Int64);
			if(global::System.Int64.TryParse(this.Id, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.Id = value.ToString(); }
	}
              /// <summary>
        /// Название сущности REST, для которой выполняется POST операция
	    ///<list type='bullet'>
///<item>
///	<description>зарезервировано</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("EntityName")]
        [DataMember(Name="EntityName",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String EntityName { get; set; } = "<empty>";
    //Base Attrribute '' skipped
          /// <summary>
        /// Формат вывода ошибки
	    ///<list type='bullet'>
///<item>
///	<description>'json'</description>
///</item>
///<item>
///	<description>'xml'</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : xml</para>
///<para>Max length : 25</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ErrFormat")]
        [DataMember(Name="ErrFormat",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ErrFormat     {
		get { return Format ?? "xml"; }
		set { this.Format = value; }
	}
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("IsDenyPayOff")]
        [DataMember(Name="IsDenyPayOff",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? IsDenyPayOff  { get; set; }
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "DATEPAY": return DatePay;
				    case "PAYCLASS": return PayClass;
				    case "ACCOUNTNUMBER": return AccountNumber;
				    case "AMOUNT": return Amount;
				    case "REMARK": return Remark;
				    case "PAYDOCID": return PayDocID;
				    case "IDTYPE": return IDType;
				    case "MODIFIEDBY": return ModifiedBy;
				    case "MODIFIEDFROM": return ModifiedFrom;
				    case "ALLOCATEAMOUNT": return AllocateAmount;
				    case "INVOICEID": return InvoiceID;
				    case "INVOICENUMBER": return InvoiceNumber;
				    case "ANNUL": return Annul;
				    case "REMOVEBY": return RemoveBy;
				    case "REMOVEFROM": return RemoveFrom;
				    case "PAYINTERFACEID": return PayInterfaceID;
				    case "DEALERID": return DealerID;
				    case "SYSTEM": return System;
				    case "GLOBAL_UNIQUE_ID": return global_unique_id;
				    case "PARENTID": return ParentID;
				    case "ID": return ID;
				    case "ENTITYNAME": return EntityName;
				    case "LANG": return Lang;
				    case "ERRFORMAT": return ErrFormat;
				    case "ISDENYPAYOFF": return IsDenyPayOff;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "DATEPAY":if (value == null)DatePay=null;else DatePay=Convert.ToDateTime(value);break;
                case "PAYCLASS":if (value == null)PayClass=null;else PayClass=Convert.ToInt32(value);break;
                case "ACCOUNTNUMBER":AccountNumber=(string)value;break;
                case "AMOUNT":if (value == null)Amount=null;else Amount=Convert.ToDecimal(value);break;
                case "REMARK":Remark=(string)value;break;
                case "PAYDOCID":PayDocID=(string)value;break;
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                case "MODIFIEDBY":ModifiedBy=(string)value;break;
                case "MODIFIEDFROM":ModifiedFrom=(string)value;break;
                case "ALLOCATEAMOUNT":if (value == null)AllocateAmount=null;else AllocateAmount=Convert.ToInt32(value);break;
                case "INVOICEID":if (value == null)InvoiceID=null;else InvoiceID=Convert.ToInt32(value);break;
                case "INVOICENUMBER":InvoiceNumber=(string)value;break;
                case "ANNUL":if (value == null)Annul=null;else Annul=Convert.ToInt32(value);break;
                case "REMOVEBY":RemoveBy=(string)value;break;
                case "REMOVEFROM":RemoveFrom=(string)value;break;
                case "PAYINTERFACEID":if (value == null)PayInterfaceID=null;else PayInterfaceID=Convert.ToInt32(value);break;
                case "DEALERID":if (value == null)DealerID=null;else DealerID=Convert.ToInt32(value);break;
                case "SYSTEM":System=(string)value;break;
                case "GLOBAL_UNIQUE_ID":global_unique_id=(string)value;break;
                case "PARENTID":if (value == null)ParentID=null;else ParentID=Convert.ToInt32(value);break;
                case "ID":if (value == null)ID=null;else ID=Convert.ToInt64(value);break;
                case "ENTITYNAME":EntityName=(string)value;break;
                case "LANG":Lang=(string)value;break;
                case "ERRFORMAT":ErrFormat=(string)value;break;
                case "ISDENYPAYOFF":if (value == null)IsDenyPayOff=null;else IsDenyPayOff=Convert.ToInt32(value);break;
                }
            }
		}
		#endregion
	}
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="CustomerPayments_Response_SET",Namespace = "")]
	public class CustomerPayments_Response_SET: BaseEntity, IModifiedTag
	{
         #region [Properties]
			/// <summary>
			/// Уникальный идентификатор платежа в спец. формате (20 символов), включающем в себя код системы, генерирующий платежный документ
			/// <para/>
			/// Cpay_ExternalID
			/// </summary>
			///<remarks>
			///Уникальный идентификатор платежа в спец. формате (20 символов), включающем в себя код системы, генерирующий платежный документ
			///</remarks>
			[JsonProperty("global_unique_id")]
			[DataMember(Name="global_unique_id", EmitDefaultValue = false)]
			/*norestr*/

            public global::System.String global_unique_id  { get; set; }
			/// <summary>
			/// Внутренний идентификатор разнесенного платежа клиента (суммы на Лицевом счету)
			/// <para/>
			/// Cpay_ID
			/// </summary>
			///<remarks>
			///Внутренний идентификатор разнесенного платежа клиента (суммы на Лицевом счету)
			///</remarks>
			[JsonProperty("ID")]
			[DataMember(Name="ID", EmitDefaultValue = false)]
			/*norestr*/

            public global::System.Int64? ID 	{
		get 
		{ 
			if(emptyId.Equals(this.Id))
			{
return 0;
			}
			global::System.Int64 result = default(global::System.Int64);
			if(global::System.Int64.TryParse(this.Id, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.Id = value.ToString(); }
	}
//Base Attrribute '' skipped
         #endregion
        [JsonIgnore]
	    public DateTime? If_Modified_Since { get {return null;}}
        #region [IDateModified]
        [JsonIgnore]
	    public DateTime? LastModified { get { return If_Modified_Since;}}
        #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "GLOBAL_UNIQUE_ID": return global_unique_id;
				    case "ID": return ID;
				    case "LANG": return Lang;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "GLOBAL_UNIQUE_ID":global_unique_id=(string)value;break;
                case "ID":if (value == null)ID=null;else ID=Convert.ToInt64(value);break;
                case "LANG":Lang=(string)value;break;
                }
            }
		}
		#endregion
    }
#endregion
#region [CustomerPayments/AllocatedPayments]
  
    
    ///<remarks>GET &lt;host&gt;[:&lt;port&gt;]/api/v1/bss/CustomerPayments/AllocatedPayments
///</remarks>
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="CustomerPayments_AllocatedPayments_Request_GET",Namespace = "")]
	public class CustomerPayments_AllocatedPayments_Request_GET : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// Идентификатор абонента
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ParentID")]
        [DataMember(Name="ParentID",EmitDefaultValue = false)]
		[JsonRestrictedByValue("<empty>")]

	public global::System.Int32? ParentID 	{
		get 
		{ 
			if(emptyId.Equals(this.ParentId))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.ParentId, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.ParentId = value.ToString(); }
	}
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("abn_WorkPlace")]
        [DataMember(Name="abn_WorkPlace",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String abn_WorkPlace  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("acnt_Number")]
        [DataMember(Name="acnt_Number",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String acnt_Number  { get; set; }
              /// <summary>
        /// Признак разделения сумм аванса и сум погашения инвойсов из указанной суммы Amount
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("AllocateAmount")]
        [DataMember(Name="AllocateAmount",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? AllocateAmount  { get; set; } = 0;
              /// <summary>
        /// Явное указание суммы подписки - для переопределения цены пакета в случае использования FMC подписок (сумма списания на основании суммы платежа)
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("Amount")]
        [DataMember(Name="Amount",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Decimal? Amount  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("bll_Amount")]
        [DataMember(Name="bll_Amount",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Decimal? bll_Amount  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("cpd_ExportID")]
        [DataMember(Name="cpd_ExportID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? cpd_ExportID  { get; set; }
              /// <summary>
        /// дата активации
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("EffectiveDate")]
        [DataMember(Name="EffectiveDate",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? EffectiveDate  { get; set; }
              /// <summary>
        /// Формат вывода ошибки
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : xml</para>
///<para>Max length : 25</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ErrFormat")]
        [DataMember(Name="ErrFormat",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ErrFormat     {
		get { return Format ?? "xml"; }
		set { this.Format = value; }
	}
              /// <summary>
        /// Признак передачи внешнего значения ID
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("IDType")]
        [DataMember(Name="IDType",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? IDType  { get; set; } = 0;
              /// <summary>
        /// Указание языка для набора multi-language данных 
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("lang")]
        [DataMember(Name="lang",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
			[JsonIgnore]
	public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("PromisedPayLogic")]
        [DataMember(Name="PromisedPayLogic",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? PromisedPayLogic  { get; set; } = 0;
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "PARENTID": return ParentID;
				    case "ABN_WORKPLACE": return abn_WorkPlace;
				    case "ACNT_NUMBER": return acnt_Number;
				    case "ALLOCATEAMOUNT": return AllocateAmount;
				    case "AMOUNT": return Amount;
				    case "BLL_AMOUNT": return bll_Amount;
				    case "CPD_EXPORTID": return cpd_ExportID;
				    case "EFFECTIVEDATE": return EffectiveDate;
				    case "ERRFORMAT": return ErrFormat;
				    case "IDTYPE": return IDType;
				    case "LANG": return lang;
				    case "PROMISEDPAYLOGIC": return PromisedPayLogic;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "PARENTID":if (value == null)ParentID=null;else ParentID=Convert.ToInt32(value);break;
                case "ABN_WORKPLACE":abn_WorkPlace=(string)value;break;
                case "ACNT_NUMBER":acnt_Number=(string)value;break;
                case "ALLOCATEAMOUNT":if (value == null)AllocateAmount=null;else AllocateAmount=Convert.ToInt32(value);break;
                case "AMOUNT":if (value == null)Amount=null;else Amount=Convert.ToDecimal(value);break;
                case "BLL_AMOUNT":if (value == null)bll_Amount=null;else bll_Amount=Convert.ToDecimal(value);break;
                case "CPD_EXPORTID":if (value == null)cpd_ExportID=null;else cpd_ExportID=Convert.ToInt32(value);break;
                case "EFFECTIVEDATE":if (value == null)EffectiveDate=null;else EffectiveDate=Convert.ToDateTime(value);break;
                case "ERRFORMAT":ErrFormat=(string)value;break;
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                case "LANG":lang=(string)value;break;
                case "PROMISEDPAYLOGIC":if (value == null)PromisedPayLogic=null;else PromisedPayLogic=Convert.ToInt32(value);break;
                }
            }
		}
		#endregion
	}
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="CustomerPayments_AllocatedPayments_Response_GET",Namespace = "")]
	public class CustomerPayments_AllocatedPayments_Response_GET: BaseEntity, IModifiedTag
	{
         #region [Properties]
			/// <summary>
			/// Указание языка для набора multi-language данных 
			/// <para/>
			/// Lang
			/// </summary>
			///<remarks>
			///Указание языка для набора multi-language данных 
			///</remarks>
			[JsonProperty("lang")]
			[DataMember(Name="lang", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
			[JsonIgnore]
            public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
         #endregion
        [JsonIgnore]
	    public DateTime? If_Modified_Since { get {return null;}}
        #region [IDateModified]
        [JsonIgnore]
	    public DateTime? LastModified { get { return If_Modified_Since;}}
        #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "LANG": return lang;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "LANG":lang=(string)value;break;
                }
            }
		}
		#endregion
    }
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="CustomerPayments_AllocatedPayments_Response_GET_OUTPUT",Namespace = "")]
	public class CustomerPayments_AllocatedPayments_Response_GET_OUTPUT : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("cpc_ID")]
        [DataMember(Name="cpc_ID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? cpc_ID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("cpif_ID")]
        [DataMember(Name="cpif_ID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? cpif_ID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("cpay_ID")]
        [DataMember(Name="cpay_ID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? cpay_ID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Max length : 4</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_ID")]
        [DataMember(Name="abn_ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? abn_ID  { get; set; } = 0;
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_WorkPlace")]
        [DataMember(Name="abn_WorkPlace",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String abn_WorkPlace  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("acnt_ID")]
        [DataMember(Name="acnt_ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? acnt_ID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("acnt_Number")]
        [DataMember(Name="acnt_Number",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String acnt_Number  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("cpay_ExternalID")]
        [DataMember(Name="cpay_ExternalID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String cpay_ExternalID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("cpc_ExternalID")]
        [DataMember(Name="cpc_ExternalID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? cpc_ExternalID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("cpd_ExportedDate")]
        [DataMember(Name="cpd_ExportedDate",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.DateTime? cpd_ExportedDate  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("cpd_ExternalID")]
        [DataMember(Name="cpd_ExternalID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String cpd_ExternalID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("cpd_Moved")]
        [DataMember(Name="cpd_Moved",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? cpd_Moved  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("cpif_ExternalID")]
        [DataMember(Name="cpif_ExternalID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? cpif_ExternalID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("crn_CodeISO")]
        [DataMember(Name="crn_CodeISO",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String crn_CodeISO  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("divided_Amount")]
        [DataMember(Name="divided_Amount",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Decimal? divided_Amount  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("inv_One_String")]
        [DataMember(Name="inv_One_String",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String inv_One_String  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("isBlocked")]
        [DataMember(Name="isBlocked",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? isBlocked  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("order_ID")]
        [DataMember(Name="order_ID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int64? order_ID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("pinv_Amount")]
        [DataMember(Name="pinv_Amount",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Decimal? pinv_Amount  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("pinv_Date")]
        [DataMember(Name="pinv_Date",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.DateTime? pinv_Date  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("pinv_ID")]
        [DataMember(Name="pinv_ID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int64? pinv_ID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("pinv_Number")]
        [DataMember(Name="pinv_Number",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String pinv_Number  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Retry")]
        [DataMember(Name="Retry",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? Retry  { get; set; }
              /// <summary>
        /// Указание языка для набора multi-language данных 
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("lang")]
        [DataMember(Name="lang",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
			[JsonIgnore]
	public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("global_unique_id")]
        [DataMember(Name="global_unique_id",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String global_unique_id  { get; set; }
              /// <summary>
        /// Идентификатор результирующей таблицы, например, pkt_ID для Packets...
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ID")]
        [DataMember(Name="ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int64? ID 	{
		get 
		{ 
			if(emptyId.Equals(this.Id))
			{
return 0;
			}
			global::System.Int64 result = default(global::System.Int64);
			if(global::System.Int64.TryParse(this.Id, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.Id = value.ToString(); }
	}
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ParentID")]
        [DataMember(Name="ParentID",EmitDefaultValue = false)]
		[JsonRestrictedByValue("<empty>")]

	public global::System.Int32? ParentID 	{
		get 
		{ 
			if(emptyId.Equals(this.ParentId))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.ParentId, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.ParentId = value.ToString(); }
	}
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "CPC_ID": return cpc_ID;
				    case "CPIF_ID": return cpif_ID;
				    case "CPAY_ID": return cpay_ID;
				    case "ABN_ID": return abn_ID;
				    case "ABN_WORKPLACE": return abn_WorkPlace;
				    case "ACNT_ID": return acnt_ID;
				    case "ACNT_NUMBER": return acnt_Number;
				    case "CPAY_EXTERNALID": return cpay_ExternalID;
				    case "CPC_EXTERNALID": return cpc_ExternalID;
				    case "CPD_EXPORTEDDATE": return cpd_ExportedDate;
				    case "CPD_EXTERNALID": return cpd_ExternalID;
				    case "CPD_MOVED": return cpd_Moved;
				    case "CPIF_EXTERNALID": return cpif_ExternalID;
				    case "CRN_CODEISO": return crn_CodeISO;
				    case "DIVIDED_AMOUNT": return divided_Amount;
				    case "INV_ONE_STRING": return inv_One_String;
				    case "ISBLOCKED": return isBlocked;
				    case "ORDER_ID": return order_ID;
				    case "PINV_AMOUNT": return pinv_Amount;
				    case "PINV_DATE": return pinv_Date;
				    case "PINV_ID": return pinv_ID;
				    case "PINV_NUMBER": return pinv_Number;
				    case "RETRY": return Retry;
				    case "LANG": return lang;
				    case "GLOBAL_UNIQUE_ID": return global_unique_id;
				    case "ID": return ID;
				    case "PARENTID": return ParentID;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "CPC_ID":if (value == null)cpc_ID=null;else cpc_ID=Convert.ToInt32(value);break;
                case "CPIF_ID":if (value == null)cpif_ID=null;else cpif_ID=Convert.ToInt32(value);break;
                case "CPAY_ID":if (value == null)cpay_ID=null;else cpay_ID=Convert.ToInt32(value);break;
                case "ABN_ID":if (value == null)abn_ID=null;else abn_ID=Convert.ToInt32(value);break;
                case "ABN_WORKPLACE":abn_WorkPlace=(string)value;break;
                case "ACNT_ID":if (value == null)acnt_ID=null;else acnt_ID=Convert.ToInt32(value);break;
                case "ACNT_NUMBER":acnt_Number=(string)value;break;
                case "CPAY_EXTERNALID":cpay_ExternalID=(string)value;break;
                case "CPC_EXTERNALID":if (value == null)cpc_ExternalID=null;else cpc_ExternalID=Convert.ToInt32(value);break;
                case "CPD_EXPORTEDDATE":if (value == null)cpd_ExportedDate=null;else cpd_ExportedDate=Convert.ToDateTime(value);break;
                case "CPD_EXTERNALID":cpd_ExternalID=(string)value;break;
                case "CPD_MOVED":if (value == null)cpd_Moved=null;else cpd_Moved=Convert.ToInt32(value);break;
                case "CPIF_EXTERNALID":if (value == null)cpif_ExternalID=null;else cpif_ExternalID=Convert.ToInt32(value);break;
                case "CRN_CODEISO":crn_CodeISO=(string)value;break;
                case "DIVIDED_AMOUNT":if (value == null)divided_Amount=null;else divided_Amount=Convert.ToDecimal(value);break;
                case "INV_ONE_STRING":inv_One_String=(string)value;break;
                case "ISBLOCKED":if (value == null)isBlocked=null;else isBlocked=Convert.ToInt32(value);break;
                case "ORDER_ID":if (value == null)order_ID=null;else order_ID=Convert.ToInt64(value);break;
                case "PINV_AMOUNT":if (value == null)pinv_Amount=null;else pinv_Amount=Convert.ToDecimal(value);break;
                case "PINV_DATE":if (value == null)pinv_Date=null;else pinv_Date=Convert.ToDateTime(value);break;
                case "PINV_ID":if (value == null)pinv_ID=null;else pinv_ID=Convert.ToInt64(value);break;
                case "PINV_NUMBER":pinv_Number=(string)value;break;
                case "RETRY":if (value == null)Retry=null;else Retry=Convert.ToInt32(value);break;
                case "LANG":lang=(string)value;break;
                case "GLOBAL_UNIQUE_ID":global_unique_id=(string)value;break;
                case "ID":if (value == null)ID=null;else ID=Convert.ToInt64(value);break;
                case "PARENTID":if (value == null)ParentID=null;else ParentID=Convert.ToInt32(value);break;
                }
            }
		}
		#endregion
	}
#endregion
#region [Customers]
  ///<summary>
///The Customers entity provides a standardized mechanism for customer and customer account management such as creation, update, retrieval, and close. Customers can be a person, an organization, or another service provider who buys products from an enterprise. 
///
///The GET method allows retrieve of identification and financial information about the Customer and the following data resources:
///- Subscribers
///- Profiles
///- Accounts
///- Addresses
///- Contracts
///- TreenodeProperties
///- Discounts
///- AuthCodes
///- Gains
///</summary>
    
    ///<remarks>GET &lt;host&gt;[:&lt;port&gt;]/api/v1/bss/Customers
///</remarks>
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Customers_Request_GET",Namespace = "")]
	public class Customers_Request_GET : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("Dls_ID")]
        [DataMember(Name="Dls_ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? Dls_ID  { get; set; } = 0;
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("com_ID")]
        [DataMember(Name="com_ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? com_ID  { get; set; } = 0;
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("dep_ID")]
        [DataMember(Name="dep_ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? dep_ID  { get; set; } = 0;
              /// <summary>
        /// Формат вывода ошибки
	    ///<list type='bullet'>
///<item>
///	<description>'json'</description>
///</item>
///<item>
///	<description>'xml'</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : xml</para>
///<para>Max length : 25</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ErrFormat")]
        [DataMember(Name="ErrFormat",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ErrFormat     {
		get { return Format ?? "xml"; }
		set { this.Format = value; }
	}
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ext_ExtNum")]
        [DataMember(Name="ext_ExtNum",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ext_ExtNum  { get; set; }
    //Base Attrribute '' skipped
          /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("grp_ID")]
        [DataMember(Name="grp_ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? grp_ID  { get; set; } = 0;
              /// <summary>
        /// Признак передачи внешнего значения ID
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - внешний ID (для BIS всегда устанавливаем в 1)</description>
///</item>
///<item>
///	<term>0 </term>
///	<description> - внутренний ID</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("IDType")]
        [DataMember(Name="IDType",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? IDType  { get; set; } = 0;
              /// <summary>
        /// Дата модификации для http-тега If-Modified-Since
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("CacheControlDate")]
        [DataMember(Name="CacheControlDate",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? CacheControlDate  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("jsonFieldsName")]
        [DataMember(Name="jsonFieldsName",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String jsonFieldsName  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("jsonFilter")]
        [DataMember(Name="jsonFilter",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String jsonFilter  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("jsonFilterContain")]
        [DataMember(Name="jsonFilterContain",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? jsonFilterContain  { get; set; } = 0;
              /// <summary>
        /// Указание языка для набора multi-language данных 
	    ///<list type='bullet'>
///<item>
///	<term>'uk' </term>
///	<description> -украинский</description>
///</item>
///<item>
///	<term>'ru' </term>
///	<description> -руский </description>
///</item>
///<item>
///	<term>'en' </term>
///	<description> -английский</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("lang")]
        [DataMember(Name="lang",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
			[JsonIgnore]
	public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("Lng_ID")]
        [DataMember(Name="Lng_ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? Lng_ID  { get; set; }
              /// <summary>
        /// Режим подключения Пакетов и услуг
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("mode")]
        [DataMember(Name="mode",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? mode  { get; set; } = 0;
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("Ntw_ID")]
        [DataMember(Name="Ntw_ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? Ntw_ID  { get; set; } = 0;
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 1</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("PageNumber")]
        [DataMember(Name="PageNumber",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? PageNumber  { get; set; } = 1;
              /// <summary>
        /// Кол-во записей на странице (server paging)
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 50</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("PageSize")]
        [DataMember(Name="PageSize",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? PageSize  { get; set; } = 50;
              /// <summary>
        /// Тип профиля
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ProfileType")]
        [DataMember(Name="ProfileType",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? ProfileType  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("Rgsc_ID")]
        [DataMember(Name="Rgsc_ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? Rgsc_ID  { get; set; } = 0;
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ShowBalances")]
        [DataMember(Name="ShowBalances",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? ShowBalances  { get; set; } = 0;
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ShowEntities")]
        [DataMember(Name="ShowEntities",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ShowEntities  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("SortColumn")]
        [DataMember(Name="SortColumn",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String SortColumn  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : ASC</para>
///<para>Max length : 20</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("SortDirection")]
        [DataMember(Name="SortDirection",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String SortDirection  { get; set; } = "ASC";
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("Srv_ID")]
        [DataMember(Name="Srv_ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? Srv_ID  { get; set; } = 0;
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("Srv_Name")]
        [DataMember(Name="Srv_Name",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Srv_Name  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("Sst_ID")]
        [DataMember(Name="Sst_ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? Sst_ID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("tnst_Code")]
        [DataMember(Name="tnst_Code",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String tnst_Code  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("trf_ID")]
        [DataMember(Name="trf_ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? trf_ID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("abn_Employee_ID")]
        [DataMember(Name="abn_Employee_ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String abn_Employee_ID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("abn_ExternalID")]
        [DataMember(Name="abn_ExternalID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? abn_ExternalID  { get; set; }
              /// <summary>
        /// Идентификатор Абонента
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ID")]
        [DataMember(Name="ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? ID 	{
		get 
		{ 
			if(emptyId.Equals(this.Id))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.Id, out result))
				return result; 
			else
            {
return 0;
            }
		}
		set { this.Id = value.ToString(); }
	}
              /// <summary>
        /// Идентификатор Ассоциации или корня 
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ParentID")]
        [DataMember(Name="ParentID",EmitDefaultValue = false)]
		[JsonRestrictedByValue("<empty>")]

	public global::System.Int32? ParentID 	{
		get 
		{ 
			if(emptyId.Equals(this.ParentId))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.ParentId, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.ParentId = value.ToString(); }
	}
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("abn_IsExistAD")]
        [DataMember(Name="abn_IsExistAD",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? abn_IsExistAD  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("abn_LastName")]
        [DataMember(Name="abn_LastName",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String abn_LastName  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("abn_WorkPlace")]
        [DataMember(Name="abn_WorkPlace",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String abn_WorkPlace  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("Acat_ID")]
        [DataMember(Name="Acat_ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? Acat_ID  { get; set; } = 0;
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("Accl_ID")]
        [DataMember(Name="Accl_ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? Accl_ID  { get; set; } = 0;
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("Acnt_Number")]
        [DataMember(Name="Acnt_Number",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Acnt_Number  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("Actp_ID")]
        [DataMember(Name="Actp_ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? Actp_ID  { get; set; } = 0;
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("Adlsb_Code")]
        [DataMember(Name="Adlsb_Code",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? Adlsb_Code  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("Aptp_ID")]
        [DataMember(Name="Aptp_ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? Aptp_ID  { get; set; } = 0;
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("aut_NameAuthCode")]
        [DataMember(Name="aut_NameAuthCode",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String aut_NameAuthCode  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("Bac_Number")]
        [DataMember(Name="Bac_Number",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Bac_Number  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("bll_Number")]
        [DataMember(Name="bll_Number",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String bll_Number  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("BossLastName")]
        [DataMember(Name="BossLastName",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String BossLastName  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("Cntr_Name")]
        [DataMember(Name="Cntr_Name",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Cntr_Name  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("LastModifiedDate")]
        [DataMember(Name="LastModifiedDate",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? LastModifiedDate  { get; set; }
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "DLS_ID": return Dls_ID;
				    case "COM_ID": return com_ID;
				    case "DEP_ID": return dep_ID;
				    case "ERRFORMAT": return ErrFormat;
				    case "EXT_EXTNUM": return ext_ExtNum;
				    case "FORMAT": return Format;
				    case "GRP_ID": return grp_ID;
				    case "IDTYPE": return IDType;
				    case "CACHECONTROLDATE": return CacheControlDate;
				    case "JSONFIELDSNAME": return jsonFieldsName;
				    case "JSONFILTER": return jsonFilter;
				    case "JSONFILTERCONTAIN": return jsonFilterContain;
				    case "LANG": return lang;
				    case "LNG_ID": return Lng_ID;
				    case "MODE": return mode;
				    case "NTW_ID": return Ntw_ID;
				    case "PAGENUMBER": return PageNumber;
				    case "PAGESIZE": return PageSize;
				    case "PROFILETYPE": return ProfileType;
				    case "RGSC_ID": return Rgsc_ID;
				    case "SHOWBALANCES": return ShowBalances;
				    case "SHOWENTITIES": return ShowEntities;
				    case "SORTCOLUMN": return SortColumn;
				    case "SORTDIRECTION": return SortDirection;
				    case "SRV_ID": return Srv_ID;
				    case "SRV_NAME": return Srv_Name;
				    case "SST_ID": return Sst_ID;
				    case "TNST_CODE": return tnst_Code;
				    case "TRF_ID": return trf_ID;
				    case "ABN_EMPLOYEE_ID": return abn_Employee_ID;
				    case "ABN_EXTERNALID": return abn_ExternalID;
				    case "ID": return ID;
				    case "PARENTID": return ParentID;
				    case "ABN_ISEXISTAD": return abn_IsExistAD;
				    case "ABN_LASTNAME": return abn_LastName;
				    case "ABN_WORKPLACE": return abn_WorkPlace;
				    case "ACAT_ID": return Acat_ID;
				    case "ACCL_ID": return Accl_ID;
				    case "ACNT_NUMBER": return Acnt_Number;
				    case "ACTP_ID": return Actp_ID;
				    case "ADLSB_CODE": return Adlsb_Code;
				    case "APTP_ID": return Aptp_ID;
				    case "AUT_NAMEAUTHCODE": return aut_NameAuthCode;
				    case "BAC_NUMBER": return Bac_Number;
				    case "BLL_NUMBER": return bll_Number;
				    case "BOSSLASTNAME": return BossLastName;
				    case "CNTR_NAME": return Cntr_Name;
				    case "LASTMODIFIEDDATE": return LastModifiedDate;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "DLS_ID":if (value == null)Dls_ID=null;else Dls_ID=Convert.ToInt32(value);break;
                case "COM_ID":if (value == null)com_ID=null;else com_ID=Convert.ToInt32(value);break;
                case "DEP_ID":if (value == null)dep_ID=null;else dep_ID=Convert.ToInt32(value);break;
                case "ERRFORMAT":ErrFormat=(string)value;break;
                case "EXT_EXTNUM":ext_ExtNum=(string)value;break;
                case "FORMAT":Format=(string)value;break;
                case "GRP_ID":if (value == null)grp_ID=null;else grp_ID=Convert.ToInt32(value);break;
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                case "CACHECONTROLDATE":if (value == null)CacheControlDate=null;else CacheControlDate=Convert.ToDateTime(value);break;
                case "JSONFIELDSNAME":jsonFieldsName=(string)value;break;
                case "JSONFILTER":jsonFilter=(string)value;break;
                case "JSONFILTERCONTAIN":if (value == null)jsonFilterContain=null;else jsonFilterContain=Convert.ToInt32(value);break;
                case "LANG":lang=(string)value;break;
                case "LNG_ID":if (value == null)Lng_ID=null;else Lng_ID=Convert.ToInt32(value);break;
                case "MODE":if (value == null)mode=null;else mode=Convert.ToInt32(value);break;
                case "NTW_ID":if (value == null)Ntw_ID=null;else Ntw_ID=Convert.ToInt32(value);break;
                case "PAGENUMBER":if (value == null)PageNumber=null;else PageNumber=Convert.ToInt32(value);break;
                case "PAGESIZE":if (value == null)PageSize=null;else PageSize=Convert.ToInt32(value);break;
                case "PROFILETYPE":if (value == null)ProfileType=null;else ProfileType=Convert.ToInt32(value);break;
                case "RGSC_ID":if (value == null)Rgsc_ID=null;else Rgsc_ID=Convert.ToInt32(value);break;
                case "SHOWBALANCES":if (value == null)ShowBalances=null;else ShowBalances=Convert.ToInt32(value);break;
                case "SHOWENTITIES":ShowEntities=(string)value;break;
                case "SORTCOLUMN":SortColumn=(string)value;break;
                case "SORTDIRECTION":SortDirection=(string)value;break;
                case "SRV_ID":if (value == null)Srv_ID=null;else Srv_ID=Convert.ToInt32(value);break;
                case "SRV_NAME":Srv_Name=(string)value;break;
                case "SST_ID":if (value == null)Sst_ID=null;else Sst_ID=Convert.ToInt32(value);break;
                case "TNST_CODE":tnst_Code=(string)value;break;
                case "TRF_ID":if (value == null)trf_ID=null;else trf_ID=Convert.ToInt32(value);break;
                case "ABN_EMPLOYEE_ID":abn_Employee_ID=(string)value;break;
                case "ABN_EXTERNALID":if (value == null)abn_ExternalID=null;else abn_ExternalID=Convert.ToInt32(value);break;
                case "ID":if (value == null)ID=null;else ID=Convert.ToInt32(value);break;
                case "PARENTID":if (value == null)ParentID=null;else ParentID=Convert.ToInt32(value);break;
                case "ABN_ISEXISTAD":if (value == null)abn_IsExistAD=null;else abn_IsExistAD=Convert.ToInt32(value);break;
                case "ABN_LASTNAME":abn_LastName=(string)value;break;
                case "ABN_WORKPLACE":abn_WorkPlace=(string)value;break;
                case "ACAT_ID":if (value == null)Acat_ID=null;else Acat_ID=Convert.ToInt32(value);break;
                case "ACCL_ID":if (value == null)Accl_ID=null;else Accl_ID=Convert.ToInt32(value);break;
                case "ACNT_NUMBER":Acnt_Number=(string)value;break;
                case "ACTP_ID":if (value == null)Actp_ID=null;else Actp_ID=Convert.ToInt32(value);break;
                case "ADLSB_CODE":if (value == null)Adlsb_Code=null;else Adlsb_Code=Convert.ToInt32(value);break;
                case "APTP_ID":if (value == null)Aptp_ID=null;else Aptp_ID=Convert.ToInt32(value);break;
                case "AUT_NAMEAUTHCODE":aut_NameAuthCode=(string)value;break;
                case "BAC_NUMBER":Bac_Number=(string)value;break;
                case "BLL_NUMBER":bll_Number=(string)value;break;
                case "BOSSLASTNAME":BossLastName=(string)value;break;
                case "CNTR_NAME":Cntr_Name=(string)value;break;
                case "LASTMODIFIEDDATE":if (value == null)LastModifiedDate=null;else LastModifiedDate=Convert.ToDateTime(value);break;
                }
            }
		}
		#endregion
	}
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Customers_Response_GET",Namespace = "")]
	public class Customers_Response_GET: BaseEntity, IModifiedTag
	{
         #region [Properties]
			/// <summary>
			/// Дата модификации для http-тега If-Modified-Since
			/// <para/>
			/// IfModifiedSinceDate
			/// </summary>
			///<remarks>
			///Дата модификации для http-тега If-Modified-Since
			///</remarks>
			[JsonProperty("CacheControlDate")]
			[DataMember(Name="CacheControlDate", EmitDefaultValue = false)]
			/*norestr*/

            public global::System.DateTime? CacheControlDate  { get; set; }
			/// <summary>
			/// Указание языка для набора multi-language данных 
			/// <para/>
			/// Lang
			/// </summary>
			///<remarks>
			///Указание языка для набора multi-language данных 
			///</remarks>
			[JsonProperty("lang")]
			[DataMember(Name="lang", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
			[JsonIgnore]
            public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
			/// <summary>
			/// No description
			/// <para/>
			/// LastModifiedDate
			/// </summary>
			///<remarks>
			///No description
			///</remarks>
			[JsonProperty("LastModifiedDate")]
			[DataMember(Name="LastModifiedDate", EmitDefaultValue = false)]
			/*norestr*/

            public global::System.DateTime? LastModifiedDate  { get; set; }
         #endregion
        [JsonIgnore]
	    public DateTime? If_Modified_Since { get {return CacheControlDate;}}
        #region [IDateModified]
        [JsonIgnore]
	    public DateTime? LastModified { get { return If_Modified_Since;}}
        #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "CACHECONTROLDATE": return CacheControlDate;
				    case "LANG": return lang;
				    case "LASTMODIFIEDDATE": return LastModifiedDate;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "CACHECONTROLDATE":if (value == null)CacheControlDate=null;else CacheControlDate=Convert.ToDateTime(value);break;
                case "LANG":lang=(string)value;break;
                case "LASTMODIFIEDDATE":if (value == null)LastModifiedDate=null;else LastModifiedDate=Convert.ToDateTime(value);break;
                }
            }
		}
		#endregion
    }
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Customers_Response_GET_OUTPUT",Namespace = "")]
	public class Customers_Response_GET_OUTPUT : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("tnt_AccountMandatory")]
        [DataMember(Name="tnt_AccountMandatory",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? tnt_AccountMandatory  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("tnt_ID")]
        [DataMember(Name="tnt_ID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? tnt_ID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Total")]
        [DataMember(Name="Total",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? Total  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("TreeNodeType")]
        [DataMember(Name="TreeNodeType",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String TreeNodeType  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("trf_ID")]
        [DataMember(Name="trf_ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? trf_ID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Max length : 4</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ID")]
        [DataMember(Name="ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? ID 	{
		get 
		{ 
			if(emptyId.Equals(this.Id))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.Id, out result))
				return result; 
			else
            {
return 0;
            }
		}
		set { this.Id = value.ToString(); }
	}
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ParentID")]
        [DataMember(Name="ParentID",EmitDefaultValue = false)]
		[JsonRestrictedByValue("<empty>")]

	public global::System.Int32? ParentID 	{
		get 
		{ 
			if(emptyId.Equals(this.ParentId))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.ParentId, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.ParentId = value.ToString(); }
	}
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_IsExistAD")]
        [DataMember(Name="abn_IsExistAD",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? abn_IsExistAD  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_IsGuest")]
        [DataMember(Name="abn_IsGuest",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? abn_IsGuest  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_LastName")]
        [DataMember(Name="abn_LastName",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String abn_LastName  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_Login")]
        [DataMember(Name="abn_Login",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String abn_Login  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_MiddleName")]
        [DataMember(Name="abn_MiddleName",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String abn_MiddleName  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_ModifiedBy")]
        [DataMember(Name="abn_ModifiedBy",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String abn_ModifiedBy  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_ModifiedDate")]
        [DataMember(Name="abn_ModifiedDate",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.DateTime? abn_ModifiedDate  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_ModifiedFrom")]
        [DataMember(Name="abn_ModifiedFrom",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String abn_ModifiedFrom  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_NestedSets_Left")]
        [DataMember(Name="abn_NestedSets_Left",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? abn_NestedSets_Left  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_NestedSets_Right")]
        [DataMember(Name="abn_NestedSets_Right",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? abn_NestedSets_Right  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_Password")]
        [DataMember(Name="abn_Password",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String abn_Password  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_PositionCode")]
        [DataMember(Name="abn_PositionCode",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String abn_PositionCode  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_ShowPhoneDirectory")]
        [DataMember(Name="abn_ShowPhoneDirectory",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? abn_ShowPhoneDirectory  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_WorkPlace")]
        [DataMember(Name="abn_WorkPlace",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String abn_WorkPlace  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("AbonentFullName")]
        [DataMember(Name="AbonentFullName",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String AbonentFullName  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("acnt_ID")]
        [DataMember(Name="acnt_ID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? acnt_ID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("acnt_ID_count")]
        [DataMember(Name="acnt_ID_count",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? acnt_ID_count  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("acnt_IsPersonal")]
        [DataMember(Name="acnt_IsPersonal",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? acnt_IsPersonal  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("acnt_Number")]
        [DataMember(Name="acnt_Number",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String acnt_Number  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("acnt_Number_Personal")]
        [DataMember(Name="acnt_Number_Personal",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String acnt_Number_Personal  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Max length : 4</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("actp_ID")]
        [DataMember(Name="actp_ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? actp_ID  { get; set; } = 0;
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("actpd_Name")]
        [DataMember(Name="actpd_Name",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String actpd_Name  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Actpd_Name_Personal")]
        [DataMember(Name="Actpd_Name_Personal",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String Actpd_Name_Personal  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("aut_ID_count")]
        [DataMember(Name="aut_ID_count",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? aut_ID_count  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("aut_NameAuthCode")]
        [DataMember(Name="aut_NameAuthCode",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String aut_NameAuthCode  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("aut_NumberAts")]
        [DataMember(Name="aut_NumberAts",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? aut_NumberAts  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("BossFullName")]
        [DataMember(Name="BossFullName",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String BossFullName  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("cntr_ID_count")]
        [DataMember(Name="cntr_ID_count",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? cntr_ID_count  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("cntr_Name")]
        [DataMember(Name="cntr_Name",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String cntr_Name  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Max length : 4</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("com_Id")]
        [DataMember(Name="com_Id",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? com_Id  { get; set; } = 0;
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Max length : 4</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("dep_ID")]
        [DataMember(Name="dep_ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? dep_ID  { get; set; } = 0;
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ext_ExtNum")]
        [DataMember(Name="ext_ExtNum",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ext_ExtNum  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ext_ID_count")]
        [DataMember(Name="ext_ID_count",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? ext_ID_count  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Max length : 4</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("grp_ID")]
        [DataMember(Name="grp_ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? grp_ID  { get; set; } = 0;
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("grp_Name")]
        [DataMember(Name="grp_Name",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String grp_Name  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("CacheControlDate")]
        [DataMember(Name="CacheControlDate",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? CacheControlDate  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("isEditAllow")]
        [DataMember(Name="isEditAllow",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? isEditAllow  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("isEditWorkPlace")]
        [DataMember(Name="isEditWorkPlace",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? isEditWorkPlace  { get; set; }
              /// <summary>
        /// Указание языка для набора multi-language данных 
	    ///<list type='bullet'>
///<item>
///	<term>'uk' </term>
///	<description> -украинский</description>
///</item>
///<item>
///	<term>'ru' </term>
///	<description> -руский </description>
///</item>
///<item>
///	<term>'en' </term>
///	<description> -английский</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("lang")]
        [DataMember(Name="lang",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
			[JsonIgnore]
	public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("lng_ID")]
        [DataMember(Name="lng_ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? lng_ID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("loc_Name")]
        [DataMember(Name="loc_Name",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String loc_Name  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Location_ID")]
        [DataMember(Name="Location_ID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? Location_ID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Max length : 4</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ntw_ID")]
        [DataMember(Name="ntw_ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? ntw_ID  { get; set; } = 0;
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("pbx_networkName")]
        [DataMember(Name="pbx_networkName",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String pbx_networkName  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ProfileType")]
        [DataMember(Name="ProfileType",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? ProfileType  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("rptURL")]
        [DataMember(Name="rptURL",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String rptURL  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("SubsCount")]
        [DataMember(Name="SubsCount",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? SubsCount  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("tnst_ExternalID")]
        [DataMember(Name="tnst_ExternalID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? tnst_ExternalID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("tnst_ID")]
        [DataMember(Name="tnst_ID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? tnst_ID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_Balance")]
        [DataMember(Name="abn_Balance",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Decimal? abn_Balance  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_CreateDate")]
        [DataMember(Name="abn_CreateDate",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.DateTime? abn_CreateDate  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_Date")]
        [DataMember(Name="abn_Date",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.DateTime? abn_Date  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_Employe_Export_ID")]
        [DataMember(Name="abn_Employe_Export_ID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String abn_Employe_Export_ID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_Employee_ID")]
        [DataMember(Name="abn_Employee_ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String abn_Employee_ID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_ExternalID")]
        [DataMember(Name="abn_ExternalID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? abn_ExternalID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_FirstName")]
        [DataMember(Name="abn_FirstName",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String abn_FirstName  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_Guid")]
        [DataMember(Name="abn_Guid",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Guid? abn_Guid  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_HasNotEmptyPrepaid")]
        [DataMember(Name="abn_HasNotEmptyPrepaid",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? abn_HasNotEmptyPrepaid  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("dep_id_boss")]
        [DataMember(Name="dep_id_boss",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? dep_id_boss  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("dep_Name_boss")]
        [DataMember(Name="dep_Name_boss",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String dep_Name_boss  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("isRefusalChangeName")]
        [DataMember(Name="isRefusalChangeName",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? isRefusalChangeName  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("max_ModDate")]
        [DataMember(Name="max_ModDate",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? max_ModDate  { get; set; }
              /// <summary>
        /// Идентификатор причины версии
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("vrr_ID")]
        [DataMember(Name="vrr_ID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? vrr_ID  { get; set; }
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "TNT_ACCOUNTMANDATORY": return tnt_AccountMandatory;
				    case "TNT_ID": return tnt_ID;
				    case "TOTAL": return Total;
				    case "TREENODETYPE": return TreeNodeType;
				    case "TRF_ID": return trf_ID;
				    case "ID": return ID;
				    case "PARENTID": return ParentID;
				    case "ABN_ISEXISTAD": return abn_IsExistAD;
				    case "ABN_ISGUEST": return abn_IsGuest;
				    case "ABN_LASTNAME": return abn_LastName;
				    case "ABN_LOGIN": return abn_Login;
				    case "ABN_MIDDLENAME": return abn_MiddleName;
				    case "ABN_MODIFIEDBY": return abn_ModifiedBy;
				    case "ABN_MODIFIEDDATE": return abn_ModifiedDate;
				    case "ABN_MODIFIEDFROM": return abn_ModifiedFrom;
				    case "ABN_NESTEDSETS_LEFT": return abn_NestedSets_Left;
				    case "ABN_NESTEDSETS_RIGHT": return abn_NestedSets_Right;
				    case "ABN_PASSWORD": return abn_Password;
				    case "ABN_POSITIONCODE": return abn_PositionCode;
				    case "ABN_SHOWPHONEDIRECTORY": return abn_ShowPhoneDirectory;
				    case "ABN_WORKPLACE": return abn_WorkPlace;
				    case "ABONENTFULLNAME": return AbonentFullName;
				    case "ACNT_ID": return acnt_ID;
				    case "ACNT_ID_COUNT": return acnt_ID_count;
				    case "ACNT_ISPERSONAL": return acnt_IsPersonal;
				    case "ACNT_NUMBER": return acnt_Number;
				    case "ACNT_NUMBER_PERSONAL": return acnt_Number_Personal;
				    case "ACTP_ID": return actp_ID;
				    case "ACTPD_NAME": return actpd_Name;
				    case "ACTPD_NAME_PERSONAL": return Actpd_Name_Personal;
				    case "AUT_ID_COUNT": return aut_ID_count;
				    case "AUT_NAMEAUTHCODE": return aut_NameAuthCode;
				    case "AUT_NUMBERATS": return aut_NumberAts;
				    case "BOSSFULLNAME": return BossFullName;
				    case "CNTR_ID_COUNT": return cntr_ID_count;
				    case "CNTR_NAME": return cntr_Name;
				    case "COM_ID": return com_Id;
				    case "DEP_ID": return dep_ID;
				    case "EXT_EXTNUM": return ext_ExtNum;
				    case "EXT_ID_COUNT": return ext_ID_count;
				    case "GRP_ID": return grp_ID;
				    case "GRP_NAME": return grp_Name;
				    case "CACHECONTROLDATE": return CacheControlDate;
				    case "ISEDITALLOW": return isEditAllow;
				    case "ISEDITWORKPLACE": return isEditWorkPlace;
				    case "LANG": return lang;
				    case "LNG_ID": return lng_ID;
				    case "LOC_NAME": return loc_Name;
				    case "LOCATION_ID": return Location_ID;
				    case "NTW_ID": return ntw_ID;
				    case "PBX_NETWORKNAME": return pbx_networkName;
				    case "PROFILETYPE": return ProfileType;
				    case "RPTURL": return rptURL;
				    case "SUBSCOUNT": return SubsCount;
				    case "TNST_EXTERNALID": return tnst_ExternalID;
				    case "TNST_ID": return tnst_ID;
				    case "ABN_BALANCE": return abn_Balance;
				    case "ABN_CREATEDATE": return abn_CreateDate;
				    case "ABN_DATE": return abn_Date;
				    case "ABN_EMPLOYE_EXPORT_ID": return abn_Employe_Export_ID;
				    case "ABN_EMPLOYEE_ID": return abn_Employee_ID;
				    case "ABN_EXTERNALID": return abn_ExternalID;
				    case "ABN_FIRSTNAME": return abn_FirstName;
				    case "ABN_GUID": return abn_Guid;
				    case "ABN_HASNOTEMPTYPREPAID": return abn_HasNotEmptyPrepaid;
				    case "DEP_ID_BOSS": return dep_id_boss;
				    case "DEP_NAME_BOSS": return dep_Name_boss;
				    case "ISREFUSALCHANGENAME": return isRefusalChangeName;
				    case "MAX_MODDATE": return max_ModDate;
				    case "VRR_ID": return vrr_ID;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "TNT_ACCOUNTMANDATORY":if (value == null)tnt_AccountMandatory=null;else tnt_AccountMandatory=Convert.ToInt32(value);break;
                case "TNT_ID":if (value == null)tnt_ID=null;else tnt_ID=Convert.ToInt32(value);break;
                case "TOTAL":if (value == null)Total=null;else Total=Convert.ToInt32(value);break;
                case "TREENODETYPE":TreeNodeType=(string)value;break;
                case "TRF_ID":if (value == null)trf_ID=null;else trf_ID=Convert.ToInt32(value);break;
                case "ID":if (value == null)ID=null;else ID=Convert.ToInt32(value);break;
                case "PARENTID":if (value == null)ParentID=null;else ParentID=Convert.ToInt32(value);break;
                case "ABN_ISEXISTAD":if (value == null)abn_IsExistAD=null;else abn_IsExistAD=Convert.ToInt32(value);break;
                case "ABN_ISGUEST":if (value == null)abn_IsGuest=null;else abn_IsGuest=Convert.ToInt32(value);break;
                case "ABN_LASTNAME":abn_LastName=(string)value;break;
                case "ABN_LOGIN":abn_Login=(string)value;break;
                case "ABN_MIDDLENAME":abn_MiddleName=(string)value;break;
                case "ABN_MODIFIEDBY":abn_ModifiedBy=(string)value;break;
                case "ABN_MODIFIEDDATE":if (value == null)abn_ModifiedDate=null;else abn_ModifiedDate=Convert.ToDateTime(value);break;
                case "ABN_MODIFIEDFROM":abn_ModifiedFrom=(string)value;break;
                case "ABN_NESTEDSETS_LEFT":if (value == null)abn_NestedSets_Left=null;else abn_NestedSets_Left=Convert.ToInt32(value);break;
                case "ABN_NESTEDSETS_RIGHT":if (value == null)abn_NestedSets_Right=null;else abn_NestedSets_Right=Convert.ToInt32(value);break;
                case "ABN_PASSWORD":abn_Password=(string)value;break;
                case "ABN_POSITIONCODE":abn_PositionCode=(string)value;break;
                case "ABN_SHOWPHONEDIRECTORY":if (value == null)abn_ShowPhoneDirectory=null;else abn_ShowPhoneDirectory=Convert.ToInt32(value);break;
                case "ABN_WORKPLACE":abn_WorkPlace=(string)value;break;
                case "ABONENTFULLNAME":AbonentFullName=(string)value;break;
                case "ACNT_ID":if (value == null)acnt_ID=null;else acnt_ID=Convert.ToInt32(value);break;
                case "ACNT_ID_COUNT":if (value == null)acnt_ID_count=null;else acnt_ID_count=Convert.ToInt32(value);break;
                case "ACNT_ISPERSONAL":if (value == null)acnt_IsPersonal=null;else acnt_IsPersonal=Convert.ToInt32(value);break;
                case "ACNT_NUMBER":acnt_Number=(string)value;break;
                case "ACNT_NUMBER_PERSONAL":acnt_Number_Personal=(string)value;break;
                case "ACTP_ID":if (value == null)actp_ID=null;else actp_ID=Convert.ToInt32(value);break;
                case "ACTPD_NAME":actpd_Name=(string)value;break;
                case "ACTPD_NAME_PERSONAL":Actpd_Name_Personal=(string)value;break;
                case "AUT_ID_COUNT":if (value == null)aut_ID_count=null;else aut_ID_count=Convert.ToInt32(value);break;
                case "AUT_NAMEAUTHCODE":aut_NameAuthCode=(string)value;break;
                case "AUT_NUMBERATS":if (value == null)aut_NumberAts=null;else aut_NumberAts=Convert.ToInt32(value);break;
                case "BOSSFULLNAME":BossFullName=(string)value;break;
                case "CNTR_ID_COUNT":if (value == null)cntr_ID_count=null;else cntr_ID_count=Convert.ToInt32(value);break;
                case "CNTR_NAME":cntr_Name=(string)value;break;
                case "COM_ID":if (value == null)com_Id=null;else com_Id=Convert.ToInt32(value);break;
                case "DEP_ID":if (value == null)dep_ID=null;else dep_ID=Convert.ToInt32(value);break;
                case "EXT_EXTNUM":ext_ExtNum=(string)value;break;
                case "EXT_ID_COUNT":if (value == null)ext_ID_count=null;else ext_ID_count=Convert.ToInt32(value);break;
                case "GRP_ID":if (value == null)grp_ID=null;else grp_ID=Convert.ToInt32(value);break;
                case "GRP_NAME":grp_Name=(string)value;break;
                case "CACHECONTROLDATE":if (value == null)CacheControlDate=null;else CacheControlDate=Convert.ToDateTime(value);break;
                case "ISEDITALLOW":if (value == null)isEditAllow=null;else isEditAllow=Convert.ToInt32(value);break;
                case "ISEDITWORKPLACE":if (value == null)isEditWorkPlace=null;else isEditWorkPlace=Convert.ToInt32(value);break;
                case "LANG":lang=(string)value;break;
                case "LNG_ID":if (value == null)lng_ID=null;else lng_ID=Convert.ToInt32(value);break;
                case "LOC_NAME":loc_Name=(string)value;break;
                case "LOCATION_ID":if (value == null)Location_ID=null;else Location_ID=Convert.ToInt32(value);break;
                case "NTW_ID":if (value == null)ntw_ID=null;else ntw_ID=Convert.ToInt32(value);break;
                case "PBX_NETWORKNAME":pbx_networkName=(string)value;break;
                case "PROFILETYPE":if (value == null)ProfileType=null;else ProfileType=Convert.ToInt32(value);break;
                case "RPTURL":rptURL=(string)value;break;
                case "SUBSCOUNT":if (value == null)SubsCount=null;else SubsCount=Convert.ToInt32(value);break;
                case "TNST_EXTERNALID":if (value == null)tnst_ExternalID=null;else tnst_ExternalID=Convert.ToInt32(value);break;
                case "TNST_ID":if (value == null)tnst_ID=null;else tnst_ID=Convert.ToInt32(value);break;
                case "ABN_BALANCE":if (value == null)abn_Balance=null;else abn_Balance=Convert.ToDecimal(value);break;
                case "ABN_CREATEDATE":if (value == null)abn_CreateDate=null;else abn_CreateDate=Convert.ToDateTime(value);break;
                case "ABN_DATE":if (value == null)abn_Date=null;else abn_Date=Convert.ToDateTime(value);break;
                case "ABN_EMPLOYE_EXPORT_ID":abn_Employe_Export_ID=(string)value;break;
                case "ABN_EMPLOYEE_ID":abn_Employee_ID=(string)value;break;
                case "ABN_EXTERNALID":if (value == null)abn_ExternalID=null;else abn_ExternalID=Convert.ToInt32(value);break;
                case "ABN_FIRSTNAME":abn_FirstName=(string)value;break;
                case "ABN_GUID":if (value == null)abn_Guid=null;else abn_Guid=(Guid)value;break;
                case "ABN_HASNOTEMPTYPREPAID":if (value == null)abn_HasNotEmptyPrepaid=null;else abn_HasNotEmptyPrepaid=Convert.ToInt32(value);break;
                case "DEP_ID_BOSS":if (value == null)dep_id_boss=null;else dep_id_boss=Convert.ToInt32(value);break;
                case "DEP_NAME_BOSS":dep_Name_boss=(string)value;break;
                case "ISREFUSALCHANGENAME":if (value == null)isRefusalChangeName=null;else isRefusalChangeName=Convert.ToInt32(value);break;
                case "MAX_MODDATE":if (value == null)max_ModDate=null;else max_ModDate=Convert.ToDateTime(value);break;
                case "VRR_ID":if (value == null)vrr_ID=null;else vrr_ID=Convert.ToInt32(value);break;
                }
            }
		}
		#endregion
	}
  ///<summary>
///The Customers entity provides a standardized mechanism for customer and customer account management such as creation, update, retrieval, and close. Customers can be a person, an organization, or another service provider who buys products from an enterprise. 
///
///The POST method allows creating an identification and financial information about the Customer and manages the following data resources:
///- Subscribers
///- Profiles
///- Accounts
///- Addresses
///- Contracts
///- TreenodeProperties
///- Discounts
///- AuthCodes
///- Gains
///and support the following Actions:
///- ChangeStatus
///- ChangeName
///- CalcCharges
///</summary>
    
    ///<remarks>POST &lt;host&gt;[:&lt;port&gt;]/api/v1/bss/customers
///POST &lt;host&gt;[:&lt;port&gt;]/api/v1/bss/associations/[parentid]/customers
///</remarks>
    ///Associations,<empty>
    [EntitySubentity("Associations")]

	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Customers_Request_SET",Namespace = "")]
	public class Customers_Request_SET : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// Язык общения с клиентом
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - Русский</description>
///</item>
///<item>
///	<term>2 </term>
///	<description> - Английский</description>
///</item>
///<item>
///	<term>3 </term>
///	<description> - Украинский</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("CustomerLanguageId")]
        [DataMember(Name="CustomerLanguageId",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? CustomerLanguageId  { get; set; }
              /// <summary>
        /// Идентификатор статуса узла дерева
	    ///<list type='bullet'>
///<item>
///	<description>указываем значение CLIS_ID из справочника Client_statuses</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("StatusID")]
        [DataMember(Name="StatusID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? StatusID  { get; set; }
              /// <summary>
        /// Идентификатор сегмента
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - SME</description>
///</item>
///<item>
///	<term>2 </term>
///	<description> - LA</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("SegmentID")]
        [DataMember(Name="SegmentID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? SegmentID  { get; set; } = 0;
              /// <summary>
        /// Имя клиента Физ.лица (владельца лицевого счета)
	    ///<list type='bullet'>
///<item>
///	<description>для Юр.лиц не передаем</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Customer_FirstName")]
        [DataMember(Name="Customer_FirstName",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Customer_FirstName  { get; set; }
              /// <summary>
        /// PositionCode для синхронизации иерархии узлов дерева
	    ///<list type='bullet'>
///<item>
///	<description>Зарезервировано</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("PositionCode")]
        [DataMember(Name="PositionCode",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String PositionCode  { get; set; }
              /// <summary>
        /// Логин Клиента (в личный кабинет)
	    ///<list type='bullet'>
///<item>
///	<description>Зарезервировано</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("CustomerLogin")]
        [DataMember(Name="CustomerLogin",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String CustomerLogin  { get; set; }
              /// <summary>
        /// Отчество клиента Физ.лица (владельца лицевого счета) 
	    ///<list type='bullet'>
///<item>
///	<description>для Юр.лиц не передаем</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Customer_MiddleName")]
        [DataMember(Name="Customer_MiddleName",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Customer_MiddleName  { get; set; }
              /// <summary>
        /// Пароль клиента (личный кабинет)
	    ///<list type='bullet'>
///<item>
///	<description>Зарезервировано</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("CustomerPassword")]
        [DataMember(Name="CustomerPassword",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String CustomerPassword  { get; set; }
              /// <summary>
        /// Признак ""создание узла дерева не завершено
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - да</description>
///</item>
///<item>
///	<term>0 </term>
///	<description> - нет</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("IsCreatedWithTariffication")]
        [DataMember(Name="IsCreatedWithTariffication",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? IsCreatedWithTariffication  { get; set; } = 0;
              /// <summary>
        /// Признак узла дерева, исключенного из расчетов (техническая запись)
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - да</description>
///</item>
///<item>
///	<term>0 </term>
///	<description> - нет</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("TechnicalTag")]
        [DataMember(Name="TechnicalTag",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? TechnicalTag  { get; set; } = 0;
              /// <summary>
        /// Уникальный идентификатор для экспорта
	    ///<list type='bullet'>
///<item>
///	<description>Зарезервировано</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Export_ID")]
        [DataMember(Name="Export_ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Export_ID  { get; set; }
              /// <summary>
        /// Уникальный номер узла дерева для синхронизации с внешней системой
	    ///<list type='bullet'>
///<item>
///	<description>Зарезервировано</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("SyncId")]
        [DataMember(Name="SyncId",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String SyncId  { get; set; }
    //Base Attrribute '' skipped
          /// <summary>
        /// Дата с которой начинается отсчёт стажа клиента
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("CustomerDate")]
        [DataMember(Name="CustomerDate",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? CustomerDate  { get; set; }
              /// <summary>
        /// Признак выполнясть нормализацию дерева узлов
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - да</description>
///</item>
///<item>
///	<term>0 </term>
///	<description> - нет</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("isUpdateNodeTree")]
        [DataMember(Name="isUpdateNodeTree",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? isUpdateNodeTree  { get; set; } = 0;
              /// <summary>
        /// Идентификатор для поиска
	    ///<list type='bullet'>
///<item>
///	<description>ОКПО для Юр.лиц и паспорт для физ.лиц</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Customer_SearchName")]
        [DataMember(Name="Customer_SearchName",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Customer_SearchName  { get; set; }
              /// <summary>
        /// Идентификатор биллинговой группы 
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> -PSTN</description>
///</item>
///<item>
///	<term>2 </term>
///	<description> -GSM</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("GroupID")]
        [DataMember(Name="GroupID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? GroupID  { get; set; } = 0;
              /// <summary>
        /// Номер Филиала
	    ///<list type='bullet'>
///<item>
///	<description>указываем значение справочника Branches</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("LocationID")]
        [DataMember(Name="LocationID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? LocationID  { get; set; }
              /// <summary>
        /// Дата применения изменений
	    ///<list type='bullet'>
///<item>
///	<description>Зарезервировано</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("EffectiveDate")]
        [DataMember(Name="EffectiveDate",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? EffectiveDate  { get; set; }
              /// <summary>
        /// Режим отладки (зарезервировано)
	    ///<list type='bullet'>
///<item>
///	<description>Зарезервировано</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("DebugLevel")]
        [DataMember(Name="DebugLevel",EmitDefaultValue = false)]
		/*norestr*/
[DocIgnore]

	public global::System.Int32? DebugLevel  { get; set; } = 0;
              /// <summary>
        /// Признак передачи внешнего значения ID
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - внешний ID (для BIS всегда устанавливаем в 1)</description>
///</item>
///<item>
///	<term>0 </term>
///	<description> - внутренний ID</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("IDType")]
        [DataMember(Name="IDType",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? IDType  { get; set; }
              /// <summary>
        /// Тип профиля
	    ///<list type='bullet'>
///<item>
///	<term>0 </term>
///	<description> - не указан</description>
///</item>
///<item>
///	<term>1 </term>
///	<description> - физ.лицо</description>
///</item>
///<item>
///	<term>2 </term>
///	<description> - юр.лицо</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ProfileType")]
        [DataMember(Name="ProfileType",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? ProfileType  { get; set; }
              /// <summary>
        /// Полное юридическое наименование 
	    ///<list type='bullet'>
///<item>
///	<description>Полное юридическое наименование (опционально)</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("FullName")]
        [DataMember(Name="FullName",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String FullName  { get; set; }
              /// <summary>
        /// Короткое наименование
	    ///<list type='bullet'>
///<item>
///	<description>Короткое наименование для учета (опционально)</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ShortName")]
        [DataMember(Name="ShortName",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ShortName  { get; set; }
              /// <summary>
        /// Код диллера
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("AgentCode")]
        [DataMember(Name="AgentCode",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String AgentCode  { get; set; }
              /// <summary>
        /// Уникальный идентификатор диллера
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("AgentID")]
        [DataMember(Name="AgentID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? AgentID  { get; set; }
              /// <summary>
        /// Код точки продаж
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("SalesPointCode")]
        [DataMember(Name="SalesPointCode",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String SalesPointCode  { get; set; }
              /// <summary>
        /// Уникальный идентификатор точки продаж
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("SalesPointID")]
        [DataMember(Name="SalesPointID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? SalesPointID  { get; set; }
              /// <summary>
        /// Пользователь данного изменения
	    ///<list type='bullet'>
///<item>
///	<term>Username </term>
///	<description> - пользователь из контекста</description>
///</item>
///<item>
///	<term>NULL </term>
///	<description> -если неизвестен</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedBy")]
        [DataMember(Name="ModifiedBy",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedBy  { get; set; }
              /// <summary>
        /// Источник данного изменения
	    ///<list type='bullet'>
///<item>
///	<term>IP </term>
///	<description> -адрес/имя компьютера</description>
///</item>
///<item>
///	<term>NULL </term>
///	<description> - если неизвестен</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedFrom")]
        [DataMember(Name="ModifiedFrom",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedFrom  { get; set; }
              /// <summary>
        /// Комментарий изменения
	    ///<list type='bullet'>
///<item>
///	<description>Заполняем причину изменений для истории</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Remark")]
        [DataMember(Name="Remark",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Remark  { get; set; }
              /// <summary>
        /// Идентификатор Стандарта 
	    ///<list type='bullet'>
///<item>
///	<description>STND_ID из STANDARTS</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("NetworkID")]
        [DataMember(Name="NetworkID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? NetworkID  { get; set; }
              /// <summary>
        /// Уникальный идентификатор транзакции для идемпотентности
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Header
        /// </remarks>
        [JsonProperty("global_unique_id")]
        [DataMember(Name="global_unique_id",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String global_unique_id  { get; set; }
              /// <summary>
        /// Идентификатор Ассоциации или корня 
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> -корень дерева учета</description>
///</item>
///<item>
///	<term>ASSC_ID </term>
///	<description> -справочник ASSOCIATIONS</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("ParentID")]
        [DataMember(Name="ParentID",EmitDefaultValue = false)]
		[JsonRestrictedByValue("<empty>")]

	public global::System.Int32? ParentID 	{
		get 
		{ 
			if(emptyId.Equals(this.ParentId))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.ParentId, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.ParentId = value.ToString(); }
	}
              /// <summary>
        /// Идентификатор лицевого счета (соответствует CustomerID)
	    ///<list type='bullet'>
///<item>
///	<description>CLNT_ID из справочника CLIENT_HISTORIES</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("ID")]
        [DataMember(Name="ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? ID 	{
		get 
		{ 
			if(emptyId.Equals(this.Id))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.Id, out result))
				return result; 
			else
            {
return 0;
            }
		}
		set { this.Id = value.ToString(); }
	}
              /// <summary>
        /// Название сущности REST, для которой выполняется POST операция
	    ///<list type='bullet'>
///<item>
///	<description>зарезервировано</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("EntityName")]
        [DataMember(Name="EntityName",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String EntityName { get; set; } = "<empty>";
              /// <summary>
        /// Формат вывода ошибки
	    ///<list type='bullet'>
///<item>
///	<description>'json'</description>
///</item>
///<item>
///	<description>'xml'</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : xml</para>
///<para>Max length : 25</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ErrFormat")]
        [DataMember(Name="ErrFormat",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ErrFormat     {
		get { return Format ?? "xml"; }
		set { this.Format = value; }
	}
              /// <summary>
        /// Указание языка для набора multi-language данных 
	    ///<list type='bullet'>
///<item>
///	<term>'uk' </term>
///	<description> -украинский</description>
///</item>
///<item>
///	<term>'ru' </term>
///	<description> -руский </description>
///</item>
///<item>
///	<term>'en' </term>
///	<description> -английский</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("lang")]
        [DataMember(Name="lang",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
			[JsonIgnore]
	public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
              /// <summary>
        /// Код внешней системы
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Header
        /// </remarks>
        [JsonProperty("System")]
        [DataMember(Name="System",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String System  { get; set; }
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "CUSTOMERLANGUAGEID": return CustomerLanguageId;
				    case "STATUSID": return StatusID;
				    case "SEGMENTID": return SegmentID;
				    case "CUSTOMER_FIRSTNAME": return Customer_FirstName;
				    case "POSITIONCODE": return PositionCode;
				    case "CUSTOMERLOGIN": return CustomerLogin;
				    case "CUSTOMER_MIDDLENAME": return Customer_MiddleName;
				    case "CUSTOMERPASSWORD": return CustomerPassword;
				    case "ISCREATEDWITHTARIFFICATION": return IsCreatedWithTariffication;
				    case "TECHNICALTAG": return TechnicalTag;
				    case "EXPORT_ID": return Export_ID;
				    case "SYNCID": return SyncId;
				    case "NAME": return Name;
				    case "CUSTOMERDATE": return CustomerDate;
				    case "ISUPDATENODETREE": return isUpdateNodeTree;
				    case "CUSTOMER_SEARCHNAME": return Customer_SearchName;
				    case "GROUPID": return GroupID;
				    case "LOCATIONID": return LocationID;
				    case "EFFECTIVEDATE": return EffectiveDate;
				    case "DEBUGLEVEL": return DebugLevel;
				    case "IDTYPE": return IDType;
				    case "PROFILETYPE": return ProfileType;
				    case "FULLNAME": return FullName;
				    case "SHORTNAME": return ShortName;
				    case "AGENTCODE": return AgentCode;
				    case "AGENTID": return AgentID;
				    case "SALESPOINTCODE": return SalesPointCode;
				    case "SALESPOINTID": return SalesPointID;
				    case "MODIFIEDBY": return ModifiedBy;
				    case "MODIFIEDFROM": return ModifiedFrom;
				    case "REMARK": return Remark;
				    case "NETWORKID": return NetworkID;
				    case "GLOBAL_UNIQUE_ID": return global_unique_id;
				    case "PARENTID": return ParentID;
				    case "ID": return ID;
				    case "ENTITYNAME": return EntityName;
				    case "ERRFORMAT": return ErrFormat;
				    case "LANG": return lang;
				    case "SYSTEM": return System;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "CUSTOMERLANGUAGEID":if (value == null)CustomerLanguageId=null;else CustomerLanguageId=Convert.ToInt32(value);break;
                case "STATUSID":if (value == null)StatusID=null;else StatusID=Convert.ToInt32(value);break;
                case "SEGMENTID":if (value == null)SegmentID=null;else SegmentID=Convert.ToInt32(value);break;
                case "CUSTOMER_FIRSTNAME":Customer_FirstName=(string)value;break;
                case "POSITIONCODE":PositionCode=(string)value;break;
                case "CUSTOMERLOGIN":CustomerLogin=(string)value;break;
                case "CUSTOMER_MIDDLENAME":Customer_MiddleName=(string)value;break;
                case "CUSTOMERPASSWORD":CustomerPassword=(string)value;break;
                case "ISCREATEDWITHTARIFFICATION":if (value == null)IsCreatedWithTariffication=null;else IsCreatedWithTariffication=Convert.ToInt32(value);break;
                case "TECHNICALTAG":if (value == null)TechnicalTag=null;else TechnicalTag=Convert.ToInt32(value);break;
                case "EXPORT_ID":Export_ID=(string)value;break;
                case "SYNCID":SyncId=(string)value;break;
                case "NAME":Name=(string)value;break;
                case "CUSTOMERDATE":if (value == null)CustomerDate=null;else CustomerDate=Convert.ToDateTime(value);break;
                case "ISUPDATENODETREE":if (value == null)isUpdateNodeTree=null;else isUpdateNodeTree=Convert.ToInt32(value);break;
                case "CUSTOMER_SEARCHNAME":Customer_SearchName=(string)value;break;
                case "GROUPID":if (value == null)GroupID=null;else GroupID=Convert.ToInt32(value);break;
                case "LOCATIONID":if (value == null)LocationID=null;else LocationID=Convert.ToInt32(value);break;
                case "EFFECTIVEDATE":if (value == null)EffectiveDate=null;else EffectiveDate=Convert.ToDateTime(value);break;
                case "DEBUGLEVEL":if (value == null)DebugLevel=null;else DebugLevel=Convert.ToInt32(value);break;
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                case "PROFILETYPE":if (value == null)ProfileType=null;else ProfileType=Convert.ToInt32(value);break;
                case "FULLNAME":FullName=(string)value;break;
                case "SHORTNAME":ShortName=(string)value;break;
                case "AGENTCODE":AgentCode=(string)value;break;
                case "AGENTID":if (value == null)AgentID=null;else AgentID=Convert.ToInt32(value);break;
                case "SALESPOINTCODE":SalesPointCode=(string)value;break;
                case "SALESPOINTID":if (value == null)SalesPointID=null;else SalesPointID=Convert.ToInt32(value);break;
                case "MODIFIEDBY":ModifiedBy=(string)value;break;
                case "MODIFIEDFROM":ModifiedFrom=(string)value;break;
                case "REMARK":Remark=(string)value;break;
                case "NETWORKID":if (value == null)NetworkID=null;else NetworkID=Convert.ToInt32(value);break;
                case "GLOBAL_UNIQUE_ID":global_unique_id=(string)value;break;
                case "PARENTID":if (value == null)ParentID=null;else ParentID=Convert.ToInt32(value);break;
                case "ID":if (value == null)ID=null;else ID=Convert.ToInt32(value);break;
                case "ENTITYNAME":EntityName=(string)value;break;
                case "ERRFORMAT":ErrFormat=(string)value;break;
                case "LANG":lang=(string)value;break;
                case "SYSTEM":System=(string)value;break;
                }
            }
		}
		#endregion
	}
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Customers_Response_SET",Namespace = "")]
	public class Customers_Response_SET: BaseEntity, IModifiedTag
	{
         #region [Properties]
			/// <summary>
			/// Идентификатор лицевого счета (соответствует CustomerID)
			/// <para/>
			/// Abn_ID
			/// </summary>
			///<remarks>
			///Идентификатор лицевого счета (соответствует CustomerID)
			///</remarks>
			[JsonProperty("ID")]
			[DataMember(Name="ID", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
            public global::System.Int32? ID 	{
		get 
		{ 
			if(emptyId.Equals(this.Id))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.Id, out result))
				return result; 
			else
            {
return 0;
            }
		}
		set { this.Id = value.ToString(); }
	}
			/// <summary>
			/// Указание языка для набора multi-language данных 
			/// <para/>
			/// Lang
			/// </summary>
			///<remarks>
			///Указание языка для набора multi-language данных 
			///</remarks>
			[JsonProperty("lang")]
			[DataMember(Name="lang", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
			[JsonIgnore]
            public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
			/// <summary>
			/// Признак передачи внешнего значения ID
			/// <para/>
			/// IsExternalID
			/// </summary>
			///<remarks>
			///Признак передачи внешнего значения ID
			///</remarks>
			[JsonProperty("IDType")]
			[DataMember(Name="IDType", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
            public global::System.Int32? IDType  { get; set; }
         #endregion
        [JsonIgnore]
	    public DateTime? If_Modified_Since { get {return null;}}
        #region [IDateModified]
        [JsonIgnore]
	    public DateTime? LastModified { get { return If_Modified_Since;}}
        #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "ID": return ID;
				    case "LANG": return lang;
				    case "IDTYPE": return IDType;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "ID":if (value == null)ID=null;else ID=Convert.ToInt32(value);break;
                case "LANG":lang=(string)value;break;
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                }
            }
		}
		#endregion
    }
#endregion
#region [Customers/Activate]

	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Customers_Activate_Request_ACTION",Namespace = "")]
	public class Customers_Activate_Request_ACTION : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// Зарезервировано
	    ///<list type='bullet'>
///<item>
///	<description>Зарезервировано для будущего использования</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("AuthCode")]
        [DataMember(Name="AuthCode",EmitDefaultValue = false)]
		/*norestr*/

[SecondaryKey("AuthCodes_Request_SET","AuthCodeName")]/*ACTION*/
	public global::System.String AuthCode  { get; set; }
              /// <summary>
        /// дата активации
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("EffectiveDate")]
        [DataMember(Name="EffectiveDate",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? EffectiveDate  { get; set; }
              /// <summary>
        /// Название сущности REST, для которой выполняется POST операция
	    ///<list type='bullet'>
///<item>
///	<description>Зарезервировано</description>
///</item>
///<item>
///	<description>доступные значения: Subsribers</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("EntityName")]
        [DataMember(Name="EntityName",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String EntityName { get; set; } = "<empty>";
              /// <summary>
        /// Формат вывода ошибки
	    ///<list type='bullet'>
///<item>
///	<description>'json'</description>
///</item>
///<item>
///	<description>'xml'</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : xml</para>
///<para>Max length : 25</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ErrFormat")]
        [DataMember(Name="ErrFormat",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ErrFormat     {
		get { return Format ?? "xml"; }
		set { this.Format = value; }
	}
              /// <summary>
        /// Уникальный идентификатор транзакции для идемпотентности
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Header
        /// </remarks>
        [JsonProperty("global_unique_id")]
        [DataMember(Name="global_unique_id",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String global_unique_id  { get; set; }
              /// <summary>
        /// Признак передачи внешнего значения ID
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - внешний ID (для BIS всегда устанавливаем в 1)</description>
///</item>
///<item>
///	<term>0 </term>
///	<description> - внутренний ID</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("IDType")]
        [DataMember(Name="IDType",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? IDType  { get; set; }
              /// <summary>
        /// Указание языка для набора multi-language данных 
	    ///<list type='bullet'>
///<item>
///	<term>'uk' </term>
///	<description> -украинский</description>
///</item>
///<item>
///	<term>'ru' </term>
///	<description> -руский </description>
///</item>
///<item>
///	<term>'en' </term>
///	<description> -английский</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("lang")]
        [DataMember(Name="lang",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
			[JsonIgnore]
	public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
              /// <summary>
        /// уникальное значение логина, например Option82 
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Login")]
        [DataMember(Name="Login",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Login  { get; set; }
              /// <summary>
        /// Пользователь данного изменения
	    ///<list type='bullet'>
///<item>
///	<term>Username </term>
///	<description> - пользователь из контекста</description>
///</item>
///<item>
///	<term>NULL </term>
///	<description> -если неизвестен</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedBy")]
        [DataMember(Name="ModifiedBy",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedBy  { get; set; }
              /// <summary>
        /// Источник данного изменения
	    ///<list type='bullet'>
///<item>
///	<term>IP </term>
///	<description> -адрес/имя компьютера</description>
///</item>
///<item>
///	<term>NULL </term>
///	<description> - если неизвестен</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedFrom")]
        [DataMember(Name="ModifiedFrom",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedFrom  { get; set; }
              /// <summary>
        /// Адрес для нотификации об активации
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Notification")]
        [DataMember(Name="Notification",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Notification  { get; set; }
              /// <summary>
        /// Идентификатор абонента
	    ///<list type='bullet'>
///<item>
///	<description>SUBS_ID из справочника SUBSCRIBERS</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("ParentID")]
        [DataMember(Name="ParentID",EmitDefaultValue = false)]
		[JsonRestrictedByValue("<empty>")]

			[Required]
[SecondaryKey("Subscribers_Request_GET","ID")]/*ACTION*/
	public global::System.Int32? ParentID 	{
		get 
		{ 
			if(emptyId.Equals(this.ParentId))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.ParentId, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.ParentId = value.ToString(); }
	}
              /// <summary>
        /// пароль
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Password")]
        [DataMember(Name="Password",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Password  { get; set; }
              /// <summary>
        /// Телефон для нотификации об активации
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("PhoneNumber")]
        [DataMember(Name="PhoneNumber",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String PhoneNumber  { get; set; }
              /// <summary>
        /// Комментарий для активации
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Remark")]
        [DataMember(Name="Remark",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String Remark  { get; set; }
              /// <summary>
        /// Статус узла дерева после активаци
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("StatusID")]
        [DataMember(Name="StatusID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? StatusID  { get; set; }
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "AUTHCODE": return AuthCode;
				    case "EFFECTIVEDATE": return EffectiveDate;
				    case "ENTITYNAME": return EntityName;
				    case "ERRFORMAT": return ErrFormat;
				    case "GLOBAL_UNIQUE_ID": return global_unique_id;
				    case "IDTYPE": return IDType;
				    case "LANG": return lang;
				    case "LOGIN": return Login;
				    case "MODIFIEDBY": return ModifiedBy;
				    case "MODIFIEDFROM": return ModifiedFrom;
				    case "NOTIFICATION": return Notification;
				    case "PARENTID": return ParentID;
				    case "PASSWORD": return Password;
				    case "PHONENUMBER": return PhoneNumber;
				    case "REMARK": return Remark;
				    case "STATUSID": return StatusID;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "AUTHCODE":AuthCode=(string)value;break;
                case "EFFECTIVEDATE":if (value == null)EffectiveDate=null;else EffectiveDate=Convert.ToDateTime(value);break;
                case "ENTITYNAME":EntityName=(string)value;break;
                case "ERRFORMAT":ErrFormat=(string)value;break;
                case "GLOBAL_UNIQUE_ID":global_unique_id=(string)value;break;
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                case "LANG":lang=(string)value;break;
                case "LOGIN":Login=(string)value;break;
                case "MODIFIEDBY":ModifiedBy=(string)value;break;
                case "MODIFIEDFROM":ModifiedFrom=(string)value;break;
                case "NOTIFICATION":Notification=(string)value;break;
                case "PARENTID":if (value == null)ParentID=null;else ParentID=Convert.ToInt32(value);break;
                case "PASSWORD":Password=(string)value;break;
                case "PHONENUMBER":PhoneNumber=(string)value;break;
                case "REMARK":Remark=(string)value;break;
                case "STATUSID":if (value == null)StatusID=null;else StatusID=Convert.ToInt32(value);break;
                }
            }
		}
		#endregion
	}
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Customers_Activate_Response_ACTION",Namespace = "")]
	public class Customers_Activate_Response_ACTION: BaseEntity, IModifiedTag
	{
         #region [Properties]
			/// <summary>
			/// Признак передачи внешнего значения ID
			/// <para/>
			/// IsExternalID
			/// </summary>
			///<remarks>
			///Признак передачи внешнего значения ID
			///</remarks>
			[JsonProperty("IDType")]
			[DataMember(Name="IDType", EmitDefaultValue = false)]
			/*norestr*/

            public global::System.Int32? IDType  { get; set; }
			/// <summary>
			/// Указание языка для набора multi-language данных 
			/// <para/>
			/// Lang
			/// </summary>
			///<remarks>
			///Указание языка для набора multi-language данных 
			///</remarks>
			[JsonProperty("lang")]
			[DataMember(Name="lang", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
			[JsonIgnore]
            public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
         #endregion
        [JsonIgnore]
	    public DateTime? If_Modified_Since { get {return null;}}
        #region [IDateModified]
        [JsonIgnore]
	    public DateTime? LastModified { get { return If_Modified_Since;}}
        #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                }
            }
		}
		#endregion
    }
#endregion
#region [Customers/CalcCharges]

	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Customers_CalcCharges_Request_ACTION",Namespace = "")]
	public class Customers_CalcCharges_Request_ACTION : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// Тип начислений (зарезервировано)
	    ///<list type='bullet'>
///<item>
///	<description>зарезервировано</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ChargeCode")]
        [DataMember(Name="ChargeCode",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ChargeCode  { get; set; }
              /// <summary>
        /// Дата окончания периода для расчета начислений
	    ///<list type='bullet'>
///<item>
///	<description>первое число месяца</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("DateEnd")]
        [DataMember(Name="DateEnd",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.DateTime? DateEnd  { get; set; }
              /// <summary>
        /// Дата начала периода для расчета начислений
	    ///<list type='bullet'>
///<item>
///	<description>текущая дата</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("DateStart")]
        [DataMember(Name="DateStart",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? DateStart  { get; set; }
              /// <summary>
        /// Дата начисления, на которую необходимо посчитать сумму АП
	    ///<list type='bullet'>
///<item>
///	<description>практически всегда = DateEnd</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("EffectiveDate")]
        [DataMember(Name="EffectiveDate",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.DateTime? EffectiveDate  { get; set; }
              /// <summary>
        /// режим расчета суммы АП к начислению
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - без учета FinBlock+Pause</description>
///</item>
///<item>
///	<term>2 </term>
///	<description> - с учетом FinBlock+Pause</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("EmulateMode")]
        [DataMember(Name="EmulateMode",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? EmulateMode  { get; set; } = 0;
              /// <summary>
        /// Название сущности REST, для которой выполняется POST операция
	    ///<list type='bullet'>
///<item>
///	<description>зарезервировано</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("EntityName")]
        [DataMember(Name="EntityName",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String EntityName { get; set; } = "<empty>";
              /// <summary>
        /// Формат вывода ошибки
	    ///<list type='bullet'>
///<item>
///	<description>'json'</description>
///</item>
///<item>
///	<description>'xml'</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : xml</para>
///<para>Max length : 25</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ErrFormat")]
        [DataMember(Name="ErrFormat",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ErrFormat     {
		get { return Format ?? "xml"; }
		set { this.Format = value; }
	}
              /// <summary>
        /// Идентификатор номера (зарезервировано) 
	    ///<list type='bullet'>
///<item>
///	<description>зарезервировано</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ExtentionID")]
        [DataMember(Name="ExtentionID",EmitDefaultValue = false)]
		/*norestr*/

[SecondaryKey("Extentions_Request_SET","ExtentionID")]/*ACTION*/[DocIgnore]

	public global::System.Int32? ExtentionID  { get; set; }
              /// <summary>
        /// Идентификатор группы устройств
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ID_GroupATS")]
        [DataMember(Name="ID_GroupATS",EmitDefaultValue = false)]
		/*norestr*/
[DocIgnore]

	public global::System.Int32? ID_GroupATS  { get; set; }
              /// <summary>
        /// Признак передачи внешнего значения ID
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - внешний ID (для BIS всегда устанавливаем в 1)</description>
///</item>
///<item>
///	<term>0 </term>
///	<description> - внутренний ID</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 1</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("IDType")]
        [DataMember(Name="IDType",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? IDType  { get; set; } = 1;
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 1</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("IsReCharge")]
        [DataMember(Name="IsReCharge",EmitDefaultValue = false)]
		/*norestr*/
[DocIgnore]

	public global::System.Int32? IsReCharge  { get; set; } = 1;
              /// <summary>
        /// Указание языка для набора multi-language данных 
	    ///<list type='bullet'>
///<item>
///	<term>'uk' </term>
///	<description> -украинский</description>
///</item>
///<item>
///	<term>'ru' </term>
///	<description> -руский </description>
///</item>
///<item>
///	<term>'en' </term>
///	<description> -английский</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("lang")]
        [DataMember(Name="lang",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
			[JsonIgnore]
	public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
              /// <summary>
        /// Пользователь данного изменения
	    ///<list type='bullet'>
///<item>
///	<term>Username </term>
///	<description> - пользователь из контекста</description>
///</item>
///<item>
///	<term>NULL </term>
///	<description> -если неизвестен</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedBy")]
        [DataMember(Name="ModifiedBy",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedBy  { get; set; }
              /// <summary>
        /// Источник данного изменения
	    ///<list type='bullet'>
///<item>
///	<term>IP </term>
///	<description> -адрес/имя компьютера</description>
///</item>
///<item>
///	<term>NULL </term>
///	<description> - если неизвестен</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedFrom")]
        [DataMember(Name="ModifiedFrom",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedFrom  { get; set; }
              /// <summary>
        /// Идентификатор абонента
	    ///<list type='bullet'>
///<item>
///	<description>SUBS_ID</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("ParentID")]
        [DataMember(Name="ParentID",EmitDefaultValue = false)]
		[JsonRestrictedByValue("<empty>")]

			[Required]
[SecondaryKey("Subscribers_Request_GET","ID")]/*ACTION*/
	public global::System.Int32? ParentID 	{
		get 
		{ 
			if(emptyId.Equals(this.ParentId))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.ParentId, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.ParentId = value.ToString(); }
	}
              /// <summary>
        /// Идентификатор услуги (зарезервировано) 
	    ///<list type='bullet'>
///<item>
///	<description>зарезервировано</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ServiceID")]
        [DataMember(Name="ServiceID",EmitDefaultValue = false)]
		/*norestr*/
[DocIgnore]

	public global::System.Int32? ServiceID  { get; set; }
              /// <summary>
        /// Идентификатор сессии: код системы(3 знака), код операции(2 знака) и идентификатор сессии(15 знаков). Используется функция fn_GetUniqueID
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Srs_SessionID")]
        [DataMember(Name="Srs_SessionID",EmitDefaultValue = false)]
		/*norestr*/
[DocIgnore]

	public global::System.String Srs_SessionID  { get; set; }
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "CHARGECODE": return ChargeCode;
				    case "DATEEND": return DateEnd;
				    case "DATESTART": return DateStart;
				    case "EFFECTIVEDATE": return EffectiveDate;
				    case "EMULATEMODE": return EmulateMode;
				    case "ENTITYNAME": return EntityName;
				    case "ERRFORMAT": return ErrFormat;
				    case "EXTENTIONID": return ExtentionID;
				    case "ID_GROUPATS": return ID_GroupATS;
				    case "IDTYPE": return IDType;
				    case "ISRECHARGE": return IsReCharge;
				    case "LANG": return lang;
				    case "MODIFIEDBY": return ModifiedBy;
				    case "MODIFIEDFROM": return ModifiedFrom;
				    case "PARENTID": return ParentID;
				    case "SERVICEID": return ServiceID;
				    case "SRS_SESSIONID": return Srs_SessionID;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "CHARGECODE":ChargeCode=(string)value;break;
                case "DATEEND":if (value == null)DateEnd=null;else DateEnd=Convert.ToDateTime(value);break;
                case "DATESTART":if (value == null)DateStart=null;else DateStart=Convert.ToDateTime(value);break;
                case "EFFECTIVEDATE":if (value == null)EffectiveDate=null;else EffectiveDate=Convert.ToDateTime(value);break;
                case "EMULATEMODE":if (value == null)EmulateMode=null;else EmulateMode=Convert.ToInt32(value);break;
                case "ENTITYNAME":EntityName=(string)value;break;
                case "ERRFORMAT":ErrFormat=(string)value;break;
                case "EXTENTIONID":if (value == null)ExtentionID=null;else ExtentionID=Convert.ToInt32(value);break;
                case "ID_GROUPATS":if (value == null)ID_GroupATS=null;else ID_GroupATS=Convert.ToInt32(value);break;
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                case "ISRECHARGE":if (value == null)IsReCharge=null;else IsReCharge=Convert.ToInt32(value);break;
                case "LANG":lang=(string)value;break;
                case "MODIFIEDBY":ModifiedBy=(string)value;break;
                case "MODIFIEDFROM":ModifiedFrom=(string)value;break;
                case "PARENTID":if (value == null)ParentID=null;else ParentID=Convert.ToInt32(value);break;
                case "SERVICEID":if (value == null)ServiceID=null;else ServiceID=Convert.ToInt32(value);break;
                case "SRS_SESSIONID":Srs_SessionID=(string)value;break;
                }
            }
		}
		#endregion
	}
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Customers_CalcCharges_Response_ACTION",Namespace = "")]
	public class Customers_CalcCharges_Response_ACTION: BaseEntity, IModifiedTag
	{
         #region [Properties]
			/// <summary>
			/// Расчетная сумма АП подлежащая начислению, вкл. налоги
			/// <para/>
			/// Amount
			/// </summary>
			///<remarks>
			///Расчетная сумма АП подлежащая начислению, вкл. налоги
			///</remarks>
			[JsonProperty("Amount")]
			[DataMember(Name="Amount", EmitDefaultValue = false)]
			/*norestr*/

            public global::System.Decimal? Amount  { get; set; } = 0;
			/// <summary>
			/// Указание языка для набора multi-language данных 
			/// <para/>
			/// Lang
			/// </summary>
			///<remarks>
			///Указание языка для набора multi-language данных 
			///</remarks>
			[JsonProperty("lang")]
			[DataMember(Name="lang", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
			[JsonIgnore]
            public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
			/// <summary>
			/// Идентификатор процесса расчета
			/// <para/>
			/// Wev_ID
			/// </summary>
			///<remarks>
			///Идентификатор процесса расчета
			///</remarks>
			[JsonProperty("WorkEventID")]
			[DataMember(Name="WorkEventID", EmitDefaultValue = false)]
			/*norestr*/

            public global::System.Int32? WorkEventID  { get; set; }
         #endregion
        [JsonIgnore]
	    public DateTime? If_Modified_Since { get {return null;}}
        #region [IDateModified]
        [JsonIgnore]
	    public DateTime? LastModified { get { return If_Modified_Since;}}
        #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                }
            }
		}
		#endregion
    }
#endregion
#region [Customers/ChangeName]

	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Customers_ChangeName_Request_ACTION",Namespace = "")]
	public class Customers_ChangeName_Request_ACTION : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// Дата изменений
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("EffectiveDate")]
        [DataMember(Name="EffectiveDate",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? EffectiveDate  { get; set; }
              /// <summary>
        /// Название сущности REST, для которой выполняется POST операция
	    ///<list type='bullet'>
///<item>
///	<description>Зарезервировано</description>
///</item>
///<item>
///	<description>доступные значения Customers</description>
///</item>
///<item>
///	<description>Suscribers или Associations</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("EntityName")]
        [DataMember(Name="EntityName",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String EntityName { get; set; } = "<empty>";
              /// <summary>
        /// Формат вывода ошибки
	    ///<list type='bullet'>
///<item>
///	<description>'json'</description>
///</item>
///<item>
///	<description>'xml'</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : xml</para>
///<para>Max length : 25</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ErrFormat")]
        [DataMember(Name="ErrFormat",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ErrFormat     {
		get { return Format ?? "xml"; }
		set { this.Format = value; }
	}
              /// <summary>
        /// Имя
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("FirstName")]
        [DataMember(Name="FirstName",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String FirstName  { get; set; }
              /// <summary>
        /// Юридическое наименование
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("FullName")]
        [DataMember(Name="FullName",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String FullName  { get; set; }
              /// <summary>
        /// Признак передачи внешнего значения ID
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - внешний ID (для BIS всегда устанавливаем в 1)</description>
///</item>
///<item>
///	<term>0 </term>
///	<description> - внутренний ID</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("IDType")]
        [DataMember(Name="IDType",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? IDType  { get; set; } = 0;
              /// <summary>
        /// Указание языка для набора multi-language данных 
	    ///<list type='bullet'>
///<item>
///	<term>'uk' </term>
///	<description> -украинский</description>
///</item>
///<item>
///	<term>'ru' </term>
///	<description> -руский </description>
///</item>
///<item>
///	<term>'en' </term>
///	<description> -английский</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("lang")]
        [DataMember(Name="lang",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
			[JsonIgnore]
	public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
              /// <summary>
        /// Отчество
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("MiddleName")]
        [DataMember(Name="MiddleName",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String MiddleName  { get; set; }
              /// <summary>
        /// Пользователь данного изменения
	    ///<list type='bullet'>
///<item>
///	<term>Username </term>
///	<description> - пользователь из контекста</description>
///</item>
///<item>
///	<term>NULL </term>
///	<description> -если неизвестен</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedBy")]
        [DataMember(Name="ModifiedBy",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedBy  { get; set; }
              /// <summary>
        /// Источник данного изменения
	    ///<list type='bullet'>
///<item>
///	<term>IP </term>
///	<description> -адрес/имя компьютера</description>
///</item>
///<item>
///	<term>NULL </term>
///	<description> - если неизвестен</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedFrom")]
        [DataMember(Name="ModifiedFrom",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedFrom  { get; set; }
    //Base Attrribute '' skipped
          /// <summary>
        /// Идентификатор Ассоциации 
	    ///<list type='bullet'>
///<item>
///	<description>ID Ассоциации</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("ParentID")]
        [DataMember(Name="ParentID",EmitDefaultValue = false)]
		[JsonRestrictedByValue("<empty>")]

			[Required]
[SecondaryKey("Associations_Request_GET","ID")]/*ACTION*/
[SecondaryKey("Subscribers_Request_GET","ID")]/*ACTION*/
[SecondaryKey("Customers_Request_GET","ID")]/*ACTION*/
	public global::System.Int32? ParentID 	{
		get 
		{ 
			if(emptyId.Equals(this.ParentId))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.ParentId, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.ParentId = value.ToString(); }
	}
              /// <summary>
        /// Комментарий
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Remark")]
        [DataMember(Name="Remark",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Remark  { get; set; }
              /// <summary>
        /// ОКПО или Паспорт
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("SearchName")]
        [DataMember(Name="SearchName",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String SearchName  { get; set; }
              /// <summary>
        /// Сокращенное наименование
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ShortName")]
        [DataMember(Name="ShortName",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ShortName  { get; set; }
              /// <summary>
        /// Указание очистить значение, в случае передачи ПУСТО в значении
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ToClean")]
        [DataMember(Name="ToClean",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? ToClean  { get; set; } = 0;
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "EFFECTIVEDATE": return EffectiveDate;
				    case "ENTITYNAME": return EntityName;
				    case "ERRFORMAT": return ErrFormat;
				    case "FIRSTNAME": return FirstName;
				    case "FULLNAME": return FullName;
				    case "IDTYPE": return IDType;
				    case "LANG": return lang;
				    case "MIDDLENAME": return MiddleName;
				    case "MODIFIEDBY": return ModifiedBy;
				    case "MODIFIEDFROM": return ModifiedFrom;
				    case "NAME": return Name;
				    case "PARENTID": return ParentID;
				    case "REMARK": return Remark;
				    case "SEARCHNAME": return SearchName;
				    case "SHORTNAME": return ShortName;
				    case "TOCLEAN": return ToClean;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "EFFECTIVEDATE":if (value == null)EffectiveDate=null;else EffectiveDate=Convert.ToDateTime(value);break;
                case "ENTITYNAME":EntityName=(string)value;break;
                case "ERRFORMAT":ErrFormat=(string)value;break;
                case "FIRSTNAME":FirstName=(string)value;break;
                case "FULLNAME":FullName=(string)value;break;
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                case "LANG":lang=(string)value;break;
                case "MIDDLENAME":MiddleName=(string)value;break;
                case "MODIFIEDBY":ModifiedBy=(string)value;break;
                case "MODIFIEDFROM":ModifiedFrom=(string)value;break;
                case "NAME":Name=(string)value;break;
                case "PARENTID":if (value == null)ParentID=null;else ParentID=Convert.ToInt32(value);break;
                case "REMARK":Remark=(string)value;break;
                case "SEARCHNAME":SearchName=(string)value;break;
                case "SHORTNAME":ShortName=(string)value;break;
                case "TOCLEAN":if (value == null)ToClean=null;else ToClean=Convert.ToInt32(value);break;
                }
            }
		}
		#endregion
	}
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Customers_ChangeName_Response_ACTION",Namespace = "")]
	public class Customers_ChangeName_Response_ACTION: BaseEntity, IModifiedTag
	{
         #region [Properties]
			/// <summary>
			/// Признак передачи внешнего значения ID
			/// <para/>
			/// IsExternalID
			/// </summary>
			///<remarks>
			///Признак передачи внешнего значения ID
			///</remarks>
			[JsonProperty("IDType")]
			[DataMember(Name="IDType", EmitDefaultValue = false)]
			/*norestr*/

            public global::System.Int32? IDType  { get; set; } = 0;
			/// <summary>
			/// Указание языка для набора multi-language данных 
			/// <para/>
			/// Lang
			/// </summary>
			///<remarks>
			///Указание языка для набора multi-language данных 
			///</remarks>
			[JsonProperty("lang")]
			[DataMember(Name="lang", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
			[JsonIgnore]
            public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
         #endregion
        [JsonIgnore]
	    public DateTime? If_Modified_Since { get {return null;}}
        #region [IDateModified]
        [JsonIgnore]
	    public DateTime? LastModified { get { return If_Modified_Since;}}
        #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                }
            }
		}
		#endregion
    }
#endregion
#region [Customers/ChangeParent]

	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Customers_ChangeParent_Request_ACTION",Namespace = "")]
	public class Customers_ChangeParent_Request_ACTION : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// Признак получения акцепта пользователя перед выполнением операции
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - выполнять операцию без подтверждения</description>
///</item>
///<item>
///	<term>0 </term>
///	<description> - с подтверждением</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 1</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ConfAccepted")]
        [DataMember(Name="ConfAccepted",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? ConfAccepted  { get; set; } = 1;
              /// <summary>
        /// Сообщение для конечного пользователя, требующее его обязательного подтверждения
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ConfMessage")]
        [DataMember(Name="ConfMessage",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ConfMessage  { get; set; }
              /// <summary>
        /// дата активации
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("EffectiveDate")]
        [DataMember(Name="EffectiveDate",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? EffectiveDate  { get; set; }
              /// <summary>
        /// Название сущности REST, для которой выполняется POST операция
	    ///<list type='bullet'>
///<item>
///	<description>Зарезервировано</description>
///</item>
///<item>
///	<description>доступные значения (Customers</description>
///</item>
///<item>
///	<description>Associations)</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("EntityName")]
        [DataMember(Name="EntityName",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String EntityName { get; set; } = "<empty>";
              /// <summary>
        /// Формат вывода ошибки
	    ///<list type='bullet'>
///<item>
///	<description>'json'</description>
///</item>
///<item>
///	<description>'xml'</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : xml</para>
///<para>Max length : 25</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ErrFormat")]
        [DataMember(Name="ErrFormat",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ErrFormat     {
		get { return Format ?? "xml"; }
		set { this.Format = value; }
	}
              /// <summary>
        /// Признак передачи внешнего значения ID
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - внешний ID (для BIS всегда устанавливаем в 1)</description>
///</item>
///<item>
///	<term>0 </term>
///	<description> - внутренний ID</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 1</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("IDType")]
        [DataMember(Name="IDType",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? IDType  { get; set; } = 1;
              /// <summary>
        /// Указание языка для набора multi-language данных 
	    ///<list type='bullet'>
///<item>
///	<term>'uk' </term>
///	<description> -украинский</description>
///</item>
///<item>
///	<term>'ru' </term>
///	<description> -руский </description>
///</item>
///<item>
///	<term>'en' </term>
///	<description> -английский</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 'uk'</para>
///<para>Max length : 3</para>
///<para>Mandatory : Yes</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("lang")]
        [DataMember(Name="lang",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
			[JsonIgnore]
	public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
              /// <summary>
        /// Пользователь данного изменения
	    ///<list type='bullet'>
///<item>
///	<term>Username </term>
///	<description> - пользователь из контекста</description>
///</item>
///<item>
///	<term>NULL </term>
///	<description> -если неизвестен</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedBy")]
        [DataMember(Name="ModifiedBy",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedBy  { get; set; }
              /// <summary>
        /// Источник данного изменения
	    ///<list type='bullet'>
///<item>
///	<term>IP </term>
///	<description> -адрес/имя компьютера</description>
///</item>
///<item>
///	<term>NULL </term>
///	<description> - если неизвестен</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedFrom")]
        [DataMember(Name="ModifiedFrom",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedFrom  { get; set; }
              /// <summary>
        /// Идентификатор узла дерева
	    ///<list type='bullet'>
///<item>
///	<term>CLNT_ID </term>
///	<description> -справочник CLIENT_HISTORIES</description>
///</item>
///<item>
///	<term>ASSC_ID </term>
///	<description> -справочник ASSOCIATIONS</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("ParentID")]
        [DataMember(Name="ParentID",EmitDefaultValue = false)]
		[JsonRestrictedByValue("<empty>")]

			[Required]
[SecondaryKey("Customers_Request_GET","ID")]/*ACTION*/
	public global::System.Int32? ParentID 	{
		get 
		{ 
			if(emptyId.Equals(this.ParentId))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.ParentId, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.ParentId = value.ToString(); }
	}
              /// <summary>
        /// Идентификатор вышестоящего узла дерева, на который делается перенос
	    ///<list type='bullet'>
///<item>
///	<term>CLNT_ID </term>
///	<description> -справочник CLIENT_HISTORIES</description>
///</item>
///<item>
///	<term>ASSC_ID </term>
///	<description> -справочник ASSOCIATIONS</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ParentNode")]
        [DataMember(Name="ParentNode",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? ParentNode  { get; set; }
              /// <summary>
        /// Комментарий 
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Remark")]
        [DataMember(Name="Remark",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Remark  { get; set; }
              /// <summary>
        /// Статус узла дерева после перерегистрации
	    ///<list type='bullet'>
///<item>
///	<description>Зарезервировано</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("TargetStatusID")]
        [DataMember(Name="TargetStatusID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? TargetStatusID  { get; set; } = 0;
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "CONFACCEPTED": return ConfAccepted;
				    case "CONFMESSAGE": return ConfMessage;
				    case "EFFECTIVEDATE": return EffectiveDate;
				    case "ENTITYNAME": return EntityName;
				    case "ERRFORMAT": return ErrFormat;
				    case "IDTYPE": return IDType;
				    case "LANG": return lang;
				    case "MODIFIEDBY": return ModifiedBy;
				    case "MODIFIEDFROM": return ModifiedFrom;
				    case "PARENTID": return ParentID;
				    case "PARENTNODE": return ParentNode;
				    case "REMARK": return Remark;
				    case "TARGETSTATUSID": return TargetStatusID;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "CONFACCEPTED":if (value == null)ConfAccepted=null;else ConfAccepted=Convert.ToInt32(value);break;
                case "CONFMESSAGE":ConfMessage=(string)value;break;
                case "EFFECTIVEDATE":if (value == null)EffectiveDate=null;else EffectiveDate=Convert.ToDateTime(value);break;
                case "ENTITYNAME":EntityName=(string)value;break;
                case "ERRFORMAT":ErrFormat=(string)value;break;
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                case "LANG":lang=(string)value;break;
                case "MODIFIEDBY":ModifiedBy=(string)value;break;
                case "MODIFIEDFROM":ModifiedFrom=(string)value;break;
                case "PARENTID":if (value == null)ParentID=null;else ParentID=Convert.ToInt32(value);break;
                case "PARENTNODE":if (value == null)ParentNode=null;else ParentNode=Convert.ToInt32(value);break;
                case "REMARK":Remark=(string)value;break;
                case "TARGETSTATUSID":if (value == null)TargetStatusID=null;else TargetStatusID=Convert.ToInt32(value);break;
                }
            }
		}
		#endregion
	}
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Customers_ChangeParent_Response_ACTION",Namespace = "")]
	public class Customers_ChangeParent_Response_ACTION: BaseEntity, IModifiedTag
	{
         #region [Properties]
			/// <summary>
			/// Сообщение для конечного пользователя, требующее его обязательного подтверждения
			/// <para/>
			/// ConfMessage
			/// </summary>
			///<remarks>
			///Сообщение для конечного пользователя, требующее его обязательного подтверждения
			///</remarks>
			[JsonProperty("ConfMessage")]
			[DataMember(Name="ConfMessage", EmitDefaultValue = false)]
			/*norestr*/

            public global::System.String ConfMessage  { get; set; }
         #endregion
        [JsonIgnore]
	    public DateTime? If_Modified_Since { get {return null;}}
        #region [IDateModified]
        [JsonIgnore]
	    public DateTime? LastModified { get { return If_Modified_Since;}}
        #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                }
            }
		}
		#endregion
    }
#endregion
#region [Customers/ChangeStatus]

	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Customers_ChangeStatus_Request_ACTION",Namespace = "")]
	public class Customers_ChangeStatus_Request_ACTION : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// Зарезервировано
	    ///<list type='bullet'>
///<item>
///	<description>Не устанавливается пользователем</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ConfirmationMessage")]
        [DataMember(Name="ConfirmationMessage",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ConfirmationMessage  { get; set; }
              /// <summary>
        /// Дата изменения статуса
	    ///<list type='bullet'>
///<item>
///	<description>для изменения статуса на сейчас требуется указание времени</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("EffectiveDate")]
        [DataMember(Name="EffectiveDate",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? EffectiveDate  { get; set; }
              /// <summary>
        /// Название сущности для которой выполняется операция
	    ///<list type='bullet'>
///<item>
///	<description>Не устанавливается пользователем</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("EntityName")]
        [DataMember(Name="EntityName",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String EntityName { get; set; } = "<empty>";
              /// <summary>
        /// Формат вывода ошибки
	    ///<list type='bullet'>
///<item>
///	<description>'json'</description>
///</item>
///<item>
///	<description>'xml'</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : xml</para>
///<para>Max length : 25</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ErrFormat")]
        [DataMember(Name="ErrFormat",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ErrFormat     {
		get { return Format ?? "xml"; }
		set { this.Format = value; }
	}
              /// <summary>
        /// Признак передачи внешнего значения ID
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - внешний ID (для BIS всегда устанавливаем в 1)</description>
///</item>
///<item>
///	<term>0 </term>
///	<description> - внутренний ID</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("IDType")]
        [DataMember(Name="IDType",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? IDType  { get; set; } = 0;
              /// <summary>
        /// Указание языка для набора multi-language данных 
	    ///<list type='bullet'>
///<item>
///	<term>'uk' </term>
///	<description> -украинский</description>
///</item>
///<item>
///	<term>'ru' </term>
///	<description> -руский </description>
///</item>
///<item>
///	<term>'en' </term>
///	<description> -английский</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("lang")]
        [DataMember(Name="lang",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
			[JsonIgnore]
	public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
              /// <summary>
        /// Пользователь данного изменения
	    ///<list type='bullet'>
///<item>
///	<description>пользователь из контекста</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedBy")]
        [DataMember(Name="ModifiedBy",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedBy  { get; set; }
              /// <summary>
        /// Источник данного изменения
	    ///<list type='bullet'>
///<item>
///	<description>название компьютера из контекста</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedFrom")]
        [DataMember(Name="ModifiedFrom",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedFrom  { get; set; }
              /// <summary>
        /// Идентификатор абонента, клиента или ассоциации
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> -корень дерева учета</description>
///</item>
///<item>
///	<term>SUBS_ID </term>
///	<description> -справочник SUBSCRIBERS</description>
///</item>
///<item>
///	<term>CLNT_ID </term>
///	<description> -справочник CLIENT_HISTORIES</description>
///</item>
///<item>
///	<term>ASSC_ID </term>
///	<description> -справочник ASSOCIATIONS</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("ParentID")]
        [DataMember(Name="ParentID",EmitDefaultValue = false)]
		[JsonRestrictedByValue("<empty>")]

			[Required]
[SecondaryKey("Associations_Request_GET","ID")]/*ACTION*/
[SecondaryKey("Subscribers_Request_GET","ID")]/*ACTION*/
[SecondaryKey("Customers_Request_GET","ID")]/*ACTION*/
	public global::System.Int32? ParentID 	{
		get 
		{ 
			if(emptyId.Equals(this.ParentId))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.ParentId, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.ParentId = value.ToString(); }
	}
              /// <summary>
        /// Комментарий изменения статуса
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Remark")]
        [DataMember(Name="Remark",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String Remark  { get; set; }
              /// <summary>
        /// Статус узла дерева
	    ///<list type='bullet'>
///<item>
///	<description>согласно справочнику статусов (TNST_ID из TreeNodeStatuses)</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("StatusID")]
        [DataMember(Name="StatusID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? StatusID  { get; set; }
              /// <summary>
        /// Признак подтверждения операции со стороны пользователя
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - операция не требует подтверждения</description>
///</item>
///<item>
///	<term>0 </term>
///	<description> - требуется подтверждение</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 1</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("UserAcceptance")]
        [DataMember(Name="UserAcceptance",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? UserAcceptance  { get; set; } = 1;
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "CONFIRMATIONMESSAGE": return ConfirmationMessage;
				    case "EFFECTIVEDATE": return EffectiveDate;
				    case "ENTITYNAME": return EntityName;
				    case "ERRFORMAT": return ErrFormat;
				    case "IDTYPE": return IDType;
				    case "LANG": return lang;
				    case "MODIFIEDBY": return ModifiedBy;
				    case "MODIFIEDFROM": return ModifiedFrom;
				    case "PARENTID": return ParentID;
				    case "REMARK": return Remark;
				    case "STATUSID": return StatusID;
				    case "USERACCEPTANCE": return UserAcceptance;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "CONFIRMATIONMESSAGE":ConfirmationMessage=(string)value;break;
                case "EFFECTIVEDATE":if (value == null)EffectiveDate=null;else EffectiveDate=Convert.ToDateTime(value);break;
                case "ENTITYNAME":EntityName=(string)value;break;
                case "ERRFORMAT":ErrFormat=(string)value;break;
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                case "LANG":lang=(string)value;break;
                case "MODIFIEDBY":ModifiedBy=(string)value;break;
                case "MODIFIEDFROM":ModifiedFrom=(string)value;break;
                case "PARENTID":if (value == null)ParentID=null;else ParentID=Convert.ToInt32(value);break;
                case "REMARK":Remark=(string)value;break;
                case "STATUSID":if (value == null)StatusID=null;else StatusID=Convert.ToInt32(value);break;
                case "USERACCEPTANCE":if (value == null)UserAcceptance=null;else UserAcceptance=Convert.ToInt32(value);break;
                }
            }
		}
		#endregion
	}
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Customers_ChangeStatus_Response_ACTION",Namespace = "")]
	public class Customers_ChangeStatus_Response_ACTION: BaseEntity, IModifiedTag
	{
         #region [Properties]
			/// <summary>
			/// Ответ АПИ с текстом предупреждения перед изменением статуса
			/// <para/>
			/// ConfMessage
			/// </summary>
			///<remarks>
			///Ответ АПИ с текстом предупреждения перед изменением статуса
			///</remarks>
			[JsonProperty("ConfirmationMessage")]
			[DataMember(Name="ConfirmationMessage", EmitDefaultValue = false)]
			/*norestr*/

            public global::System.String ConfirmationMessage  { get; set; }
			/// <summary>
			/// Признак передачи внешнего значения ID
			/// <para/>
			/// IsExternalID
			/// </summary>
			///<remarks>
			///Признак передачи внешнего значения ID
			///</remarks>
			[JsonProperty("IDType")]
			[DataMember(Name="IDType", EmitDefaultValue = false)]
			/*norestr*/

            public global::System.Int32? IDType  { get; set; } = 0;
			/// <summary>
			/// Указание языка для набора multi-language данных 
			/// <para/>
			/// Lang
			/// </summary>
			///<remarks>
			///Указание языка для набора multi-language данных 
			///</remarks>
			[JsonProperty("lang")]
			[DataMember(Name="lang", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
			[JsonIgnore]
            public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
         #endregion
        [JsonIgnore]
	    public DateTime? If_Modified_Since { get {return null;}}
        #region [IDateModified]
        [JsonIgnore]
	    public DateTime? LastModified { get { return If_Modified_Since;}}
        #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                }
            }
		}
		#endregion
    }
#endregion
#region [Customers/Copy]

	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Customers_Copy_Request_ACTION",Namespace = "")]
	public class Customers_Copy_Request_ACTION : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("AccountNumber")]
        [DataMember(Name="AccountNumber",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String AccountNumber  { get; set; }
              /// <summary>
        /// Формат вывода ошибки
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 'json'</para>
///<para>Max length : 25</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("ErrFormat")]
        [DataMember(Name="ErrFormat",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ErrFormat     {
		get { return Format ?? "json"; }
		set { this.Format = value; }
	}
              /// <summary>
        /// Признак передачи внешнего значения ID
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 1</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("IDType")]
        [DataMember(Name="IDType",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? IDType  { get; set; } = 1;
              /// <summary>
        /// Указание языка для набора multi-language данных 
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 'uk'</para>
///<para>Max length : 3</para>
///<para>Mandatory : Yes</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("lang")]
        [DataMember(Name="lang",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
			[JsonIgnore]
	public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
              /// <summary>
        /// Идентификатор абонента
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("ParentID")]
        [DataMember(Name="ParentID",EmitDefaultValue = false)]
		[JsonRestrictedByValue("<empty>")]

	public global::System.Int64? ParentID 	{
		get 
		{ 
			if(emptyId.Equals(this.ParentId))
			{
return 0;
			}
			global::System.Int64 result = default(global::System.Int64);
			if(global::System.Int64.TryParse(this.ParentId, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.ParentId = value.ToString(); }
	}
              /// <summary>
        /// Идентификатор процесса расчета
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("WorkEventID")]
        [DataMember(Name="WorkEventID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int64? WorkEventID  { get; set; }
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "ACCOUNTNUMBER": return AccountNumber;
				    case "ERRFORMAT": return ErrFormat;
				    case "IDTYPE": return IDType;
				    case "LANG": return lang;
				    case "PARENTID": return ParentID;
				    case "WORKEVENTID": return WorkEventID;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "ACCOUNTNUMBER":AccountNumber=(string)value;break;
                case "ERRFORMAT":ErrFormat=(string)value;break;
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                case "LANG":lang=(string)value;break;
                case "PARENTID":if (value == null)ParentID=null;else ParentID=Convert.ToInt64(value);break;
                case "WORKEVENTID":if (value == null)WorkEventID=null;else WorkEventID=Convert.ToInt64(value);break;
                }
            }
		}
		#endregion
	}
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Customers_Copy_Response_ACTION",Namespace = "")]
	public class Customers_Copy_Response_ACTION: BaseEntity, IModifiedTag
	{
         #region [Properties]
//Base Attrribute '' skipped
			/// <summary>
			/// Идентификатор события
			/// <para/>
			/// Wev_ID
			/// </summary>
			///<remarks>
			///Идентификатор события
			///</remarks>
			[JsonProperty("WorkEventID")]
			[DataMember(Name="WorkEventID", EmitDefaultValue = false)]
			/*norestr*/

            public global::System.Int64? WorkEventID  { get; set; }
         #endregion
        [JsonIgnore]
	    public DateTime? If_Modified_Since { get {return null;}}
        #region [IDateModified]
        [JsonIgnore]
	    public DateTime? LastModified { get { return If_Modified_Since;}}
        #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                }
            }
		}
		#endregion
    }
#endregion
#region [Customers/CustomerExtentions]
  
    
    ///<remarks>GET &lt;host&gt;[:&lt;port&gt;]/api/v1/bss/Customers/CustomerExtentions
///</remarks>
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Customers_CustomerExtentions_Request_GET",Namespace = "")]
	public class Customers_CustomerExtentions_Request_GET : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// Идентификатор абонента
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ParentID")]
        [DataMember(Name="ParentID",EmitDefaultValue = false)]
		[JsonRestrictedByValue("<empty>")]

	public global::System.Int32? ParentID 	{
		get 
		{ 
			if(emptyId.Equals(this.ParentId))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.ParentId, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.ParentId = value.ToString(); }
	}
              /// <summary>
        /// Формат вывода ошибки
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : xml</para>
///<para>Max length : 25</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ErrFormat")]
        [DataMember(Name="ErrFormat",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ErrFormat     {
		get { return Format ?? "xml"; }
		set { this.Format = value; }
	}
              /// <summary>
        /// Признак передачи внешнего значения ID
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("IDType")]
        [DataMember(Name="IDType",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? IDType  { get; set; } = 0;
              /// <summary>
        /// Указание языка для набора multi-language данных 
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("lang")]
        [DataMember(Name="lang",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
			[JsonIgnore]
	public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 1</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("PageNumber")]
        [DataMember(Name="PageNumber",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? PageNumber  { get; set; } = 1;
              /// <summary>
        /// Кол-во записей на странице (server paging)
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 50</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("PageSize")]
        [DataMember(Name="PageSize",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? PageSize  { get; set; } = 50;
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "PARENTID": return ParentID;
				    case "ERRFORMAT": return ErrFormat;
				    case "IDTYPE": return IDType;
				    case "LANG": return lang;
				    case "PAGENUMBER": return PageNumber;
				    case "PAGESIZE": return PageSize;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "PARENTID":if (value == null)ParentID=null;else ParentID=Convert.ToInt32(value);break;
                case "ERRFORMAT":ErrFormat=(string)value;break;
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                case "LANG":lang=(string)value;break;
                case "PAGENUMBER":if (value == null)PageNumber=null;else PageNumber=Convert.ToInt32(value);break;
                case "PAGESIZE":if (value == null)PageSize=null;else PageSize=Convert.ToInt32(value);break;
                }
            }
		}
		#endregion
	}
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Customers_CustomerExtentions_Response_GET",Namespace = "")]
	public class Customers_CustomerExtentions_Response_GET: BaseEntity, IModifiedTag
	{
         #region [Properties]
			/// <summary>
			/// Признак передачи внешнего значения ID
			/// <para/>
			/// IsExternalID
			/// </summary>
			///<remarks>
			///Признак передачи внешнего значения ID
			///</remarks>
			[JsonProperty("IDType")]
			[DataMember(Name="IDType", EmitDefaultValue = false)]
			/*norestr*/

            public global::System.Int32? IDType  { get; set; } = 0;
			/// <summary>
			/// Указание языка для набора multi-language данных 
			/// <para/>
			/// Lang
			/// </summary>
			///<remarks>
			///Указание языка для набора multi-language данных 
			///</remarks>
			[JsonProperty("lang")]
			[DataMember(Name="lang", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
			[JsonIgnore]
            public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
         #endregion
        [JsonIgnore]
	    public DateTime? If_Modified_Since { get {return null;}}
        #region [IDateModified]
        [JsonIgnore]
	    public DateTime? LastModified { get { return If_Modified_Since;}}
        #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "IDTYPE": return IDType;
				    case "LANG": return lang;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                case "LANG":lang=(string)value;break;
                }
            }
		}
		#endregion
    }
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Customers_CustomerExtentions_Response_GET_OUTPUT",Namespace = "")]
	public class Customers_CustomerExtentions_Response_GET_OUTPUT : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ext_ID")]
        [DataMember(Name="ext_ID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? ext_ID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("acnt_ID")]
        [DataMember(Name="acnt_ID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? acnt_ID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Total")]
        [DataMember(Name="Total",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? Total  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("acnt_Number")]
        [DataMember(Name="acnt_Number",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String acnt_Number  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ext_ExtNum")]
        [DataMember(Name="ext_ExtNum",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String ext_ExtNum  { get; set; }
              /// <summary>
        /// Признак передачи внешнего значения ID
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("IDType")]
        [DataMember(Name="IDType",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? IDType  { get; set; } = 0;
              /// <summary>
        /// Указание языка для набора multi-language данных 
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("lang")]
        [DataMember(Name="lang",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
			[JsonIgnore]
	public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
              /// <summary>
        /// Идентификатор результирующей таблицы, например, pkt_ID для Packets...
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ID")]
        [DataMember(Name="ID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? ID 	{
		get 
		{ 
			if(emptyId.Equals(this.Id))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.Id, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.Id = value.ToString(); }
	}
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ParentID")]
        [DataMember(Name="ParentID",EmitDefaultValue = false)]
		[JsonRestrictedByValue("<empty>")]

	public global::System.Int32? ParentID 	{
		get 
		{ 
			if(emptyId.Equals(this.ParentId))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.ParentId, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.ParentId = value.ToString(); }
	}
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "EXT_ID": return ext_ID;
				    case "ACNT_ID": return acnt_ID;
				    case "TOTAL": return Total;
				    case "ACNT_NUMBER": return acnt_Number;
				    case "EXT_EXTNUM": return ext_ExtNum;
				    case "IDTYPE": return IDType;
				    case "LANG": return lang;
				    case "ID": return ID;
				    case "PARENTID": return ParentID;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "EXT_ID":if (value == null)ext_ID=null;else ext_ID=Convert.ToInt32(value);break;
                case "ACNT_ID":if (value == null)acnt_ID=null;else acnt_ID=Convert.ToInt32(value);break;
                case "TOTAL":if (value == null)Total=null;else Total=Convert.ToInt32(value);break;
                case "ACNT_NUMBER":acnt_Number=(string)value;break;
                case "EXT_EXTNUM":ext_ExtNum=(string)value;break;
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                case "LANG":lang=(string)value;break;
                case "ID":if (value == null)ID=null;else ID=Convert.ToInt32(value);break;
                case "PARENTID":if (value == null)ParentID=null;else ParentID=Convert.ToInt32(value);break;
                }
            }
		}
		#endregion
	}
#endregion
#region [Customers/Deactivate]

	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Customers_Deactivate_Request_ACTION",Namespace = "")]
	public class Customers_Deactivate_Request_ACTION : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// Дата деактивации
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("EffectiveDate")]
        [DataMember(Name="EffectiveDate",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? EffectiveDate  { get; set; }
              /// <summary>
        /// Имя сущности для которой выполняется операция
	    ///<list type='bullet'>
///<item>
///	<description>Допустимые значения Associations</description>
///</item>
///<item>
///	<description>Customers</description>
///</item>
///<item>
///	<description>Subscribers</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("EntityName")]
        [DataMember(Name="EntityName",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String EntityName { get; set; } = "<empty>";
              /// <summary>
        /// Формат вывода ошибки
	    ///<list type='bullet'>
///<item>
///	<description>'json'</description>
///</item>
///<item>
///	<description>'xml'</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : xml</para>
///<para>Max length : 25</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ErrFormat")]
        [DataMember(Name="ErrFormat",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ErrFormat     {
		get { return Format ?? "xml"; }
		set { this.Format = value; }
	}
              /// <summary>
        /// Уникальный идентификатор транзакции для идемпотентности
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Header
        /// </remarks>
        [JsonProperty("global_unique_id")]
        [DataMember(Name="global_unique_id",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String global_unique_id  { get; set; }
              /// <summary>
        /// Признак передачи внешнего значения ID
	    ///<list type='bullet'>
///<item>
///	<term>0 </term>
///	<description> - внутренний</description>
///</item>
///<item>
///	<term>1 </term>
///	<description> - внешний</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("IDType")]
        [DataMember(Name="IDType",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? IDType  { get; set; }
              /// <summary>
        /// Фильтр для отбора узлов по коду метки
	    ///<list type='bullet'>
///<item>
///	<description>LABEL_CODE из TREENODE_LABELS</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("LabelCode")]
        [DataMember(Name="LabelCode",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String LabelCode  { get; set; }
              /// <summary>
        /// Указание языка для набора multi-language данных 
	    ///<list type='bullet'>
///<item>
///	<term>'uk' </term>
///	<description> -украинский</description>
///</item>
///<item>
///	<term>'ru' </term>
///	<description> -руский </description>
///</item>
///<item>
///	<term>'en' </term>
///	<description> -английский</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("lang")]
        [DataMember(Name="lang",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
			[JsonIgnore]
	public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
              /// <summary>
        /// Пользователь данного изменения
	    ///<list type='bullet'>
///<item>
///	<term>Username </term>
///	<description> - пользователь из контекста</description>
///</item>
///<item>
///	<term>NULL </term>
///	<description> -если неизвестен</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedBy")]
        [DataMember(Name="ModifiedBy",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedBy  { get; set; }
              /// <summary>
        /// Источник данного изменения
	    ///<list type='bullet'>
///<item>
///	<term>IP </term>
///	<description> -адрес/имя компьютера</description>
///</item>
///<item>
///	<term>NULL </term>
///	<description> - если неизвестен</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedFrom")]
        [DataMember(Name="ModifiedFrom",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedFrom  { get; set; }
              /// <summary>
        /// Адрес для нотификации о деактивации
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Notification")]
        [DataMember(Name="Notification",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Notification  { get; set; }
              /// <summary>
        /// Идентификатор абонента
	    ///<list type='bullet'>
///<item>
///	<description>SUBS_ID из справочника SUBSCRIBERS</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("ParentID")]
        [DataMember(Name="ParentID",EmitDefaultValue = false)]
		[JsonRestrictedByValue("<empty>")]

			[Required]
[SecondaryKey("Subscribers_Request_GET","ID")]/*ACTION*/
	public global::System.Int32? ParentID 	{
		get 
		{ 
			if(emptyId.Equals(this.ParentId))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.ParentId, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.ParentId = value.ToString(); }
	}
              /// <summary>
        /// Телефон для нотификации о деактивации
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("PhoneNumber")]
        [DataMember(Name="PhoneNumber",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String PhoneNumber  { get; set; }
              /// <summary>
        /// Комментарий
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Remark")]
        [DataMember(Name="Remark",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String Remark  { get; set; }
              /// <summary>
        /// Фильтр для отбора узлов по текущему статусу узла дерева
	    ///<list type='bullet'>
///<item>
///	<description>tnst_Code из TreeNodeStatuses</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("StatusCode")]
        [DataMember(Name="StatusCode",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String StatusCode  { get; set; }
              /// <summary>
        /// Значение статуса узла после выполнения операции
	    ///<list type='bullet'>
///<item>
///	<description>tnst_Code из TreeNodeStatuses</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("TargetStatusCode")]
        [DataMember(Name="TargetStatusCode",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String TargetStatusCode  { get; set; }
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "EFFECTIVEDATE": return EffectiveDate;
				    case "ENTITYNAME": return EntityName;
				    case "ERRFORMAT": return ErrFormat;
				    case "GLOBAL_UNIQUE_ID": return global_unique_id;
				    case "IDTYPE": return IDType;
				    case "LABELCODE": return LabelCode;
				    case "LANG": return lang;
				    case "MODIFIEDBY": return ModifiedBy;
				    case "MODIFIEDFROM": return ModifiedFrom;
				    case "NOTIFICATION": return Notification;
				    case "PARENTID": return ParentID;
				    case "PHONENUMBER": return PhoneNumber;
				    case "REMARK": return Remark;
				    case "STATUSCODE": return StatusCode;
				    case "TARGETSTATUSCODE": return TargetStatusCode;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "EFFECTIVEDATE":if (value == null)EffectiveDate=null;else EffectiveDate=Convert.ToDateTime(value);break;
                case "ENTITYNAME":EntityName=(string)value;break;
                case "ERRFORMAT":ErrFormat=(string)value;break;
                case "GLOBAL_UNIQUE_ID":global_unique_id=(string)value;break;
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                case "LABELCODE":LabelCode=(string)value;break;
                case "LANG":lang=(string)value;break;
                case "MODIFIEDBY":ModifiedBy=(string)value;break;
                case "MODIFIEDFROM":ModifiedFrom=(string)value;break;
                case "NOTIFICATION":Notification=(string)value;break;
                case "PARENTID":if (value == null)ParentID=null;else ParentID=Convert.ToInt32(value);break;
                case "PHONENUMBER":PhoneNumber=(string)value;break;
                case "REMARK":Remark=(string)value;break;
                case "STATUSCODE":StatusCode=(string)value;break;
                case "TARGETSTATUSCODE":TargetStatusCode=(string)value;break;
                }
            }
		}
		#endregion
	}
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Customers_Deactivate_Response_ACTION",Namespace = "")]
	public class Customers_Deactivate_Response_ACTION: BaseEntity, IModifiedTag
	{
         #region [Properties]
			/// <summary>
			/// Кол-во обработанных записей 
			/// <para/>
			/// AffectedCount
			/// </summary>
			///<remarks>
			///Кол-во обработанных записей 
			///</remarks>
			[JsonProperty("AffectedCount")]
			[DataMember(Name="AffectedCount", EmitDefaultValue = false)]
			/*norestr*/

            public global::System.Int32? AffectedCount  { get; set; }
			/// <summary>
			/// Признак передачи внешнего значения ID
			/// <para/>
			/// IsExternalID
			/// </summary>
			///<remarks>
			///Признак передачи внешнего значения ID
			///</remarks>
			[JsonProperty("IDType")]
			[DataMember(Name="IDType", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
            public global::System.Int32? IDType  { get; set; }
			/// <summary>
			/// Указание языка для набора multi-language данных 
			/// <para/>
			/// Lang
			/// </summary>
			///<remarks>
			///Указание языка для набора multi-language данных 
			///</remarks>
			[JsonProperty("lang")]
			[DataMember(Name="lang", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
			[JsonIgnore]
            public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
			/// <summary>
			/// Идентификатор процесса 
			/// <para/>
			/// Wev_ID
			/// </summary>
			///<remarks>
			///Идентификатор процесса 
			///</remarks>
			[JsonProperty("WorkEventID")]
			[DataMember(Name="WorkEventID", EmitDefaultValue = false)]
			/*norestr*/

            public global::System.Int32? WorkEventID  { get; set; }
         #endregion
        [JsonIgnore]
	    public DateTime? If_Modified_Since { get {return null;}}
        #region [IDateModified]
        [JsonIgnore]
	    public DateTime? LastModified { get { return If_Modified_Since;}}
        #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                }
            }
		}
		#endregion
    }
#endregion
#region [Customers/Details]
  
    
    ///<remarks>GET &lt;host&gt;[:&lt;port&gt;]/api/v1/bss/Customers/Details
///</remarks>
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Customers_Details_Request_GET",Namespace = "")]
	public class Customers_Details_Request_GET : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// Идентификатор Абонента
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ID")]
        [DataMember(Name="ID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? ID 	{
		get 
		{ 
			if(emptyId.Equals(this.Id))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.Id, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.Id = value.ToString(); }
	}
              /// <summary>
        /// Формат вывода ошибки
	    ///<list type='bullet'>
///<item>
///	<description>'json'</description>
///</item>
///<item>
///	<description>'xml'</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : xml</para>
///<para>Max length : 25</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ErrFormat")]
        [DataMember(Name="ErrFormat",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ErrFormat     {
		get { return Format ?? "xml"; }
		set { this.Format = value; }
	}
              /// <summary>
        /// Признак передачи внешнего значения ID
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - внешний ID (для BIS всегда устанавливаем в 1)</description>
///</item>
///<item>
///	<term>0 </term>
///	<description> - внутренний ID</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("IDType")]
        [DataMember(Name="IDType",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? IDType  { get; set; } = 0;
              /// <summary>
        /// Указание языка для набора multi-language данных 
	    ///<list type='bullet'>
///<item>
///	<term>'uk' </term>
///	<description> -украинский</description>
///</item>
///<item>
///	<term>'ru' </term>
///	<description> -руский </description>
///</item>
///<item>
///	<term>'en' </term>
///	<description> -английский</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("lang")]
        [DataMember(Name="lang",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
			[JsonIgnore]
	public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
              /// <summary>
        /// Дата модификации для http-тега If-Modified-Since
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("CacheControlDate")]
        [DataMember(Name="CacheControlDate",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? CacheControlDate  { get; set; }
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "ID": return ID;
				    case "ERRFORMAT": return ErrFormat;
				    case "IDTYPE": return IDType;
				    case "LANG": return lang;
				    case "CACHECONTROLDATE": return CacheControlDate;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "ID":if (value == null)ID=null;else ID=Convert.ToInt32(value);break;
                case "ERRFORMAT":ErrFormat=(string)value;break;
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                case "LANG":lang=(string)value;break;
                case "CACHECONTROLDATE":if (value == null)CacheControlDate=null;else CacheControlDate=Convert.ToDateTime(value);break;
                }
            }
		}
		#endregion
	}
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Customers_Details_Response_GET",Namespace = "")]
	public class Customers_Details_Response_GET: BaseEntity, IModifiedTag
	{
         #region [Properties]
			/// <summary>
			/// Указание языка для набора multi-language данных 
			/// <para/>
			/// Lang
			/// </summary>
			///<remarks>
			///Указание языка для набора multi-language данных 
			///</remarks>
			[JsonProperty("lang")]
			[DataMember(Name="lang", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
			[JsonIgnore]
            public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
			/// <summary>
			/// Дата модификации для http-тега If-Modified-Since
			/// <para/>
			/// IfModifiedSinceDate
			/// </summary>
			///<remarks>
			///Дата модификации для http-тега If-Modified-Since
			///</remarks>
			[JsonProperty("CacheControlDate")]
			[DataMember(Name="CacheControlDate", EmitDefaultValue = false)]
			/*norestr*/

            public global::System.DateTime? CacheControlDate  { get; set; }
         #endregion
        [JsonIgnore]
	    public DateTime? If_Modified_Since { get {return CacheControlDate;}}
        #region [IDateModified]
        [JsonIgnore]
	    public DateTime? LastModified { get { return If_Modified_Since;}}
        #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "LANG": return lang;
				    case "CACHECONTROLDATE": return CacheControlDate;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "LANG":lang=(string)value;break;
                case "CACHECONTROLDATE":if (value == null)CacheControlDate=null;else CacheControlDate=Convert.ToDateTime(value);break;
                }
            }
		}
		#endregion
    }
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Customers_Details_Response_GET_OUTPUT",Namespace = "")]
	public class Customers_Details_Response_GET_OUTPUT : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abc_Date_Personal")]
        [DataMember(Name="abc_Date_Personal",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.DateTime? abc_Date_Personal  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_Balance")]
        [DataMember(Name="abn_Balance",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Decimal? abn_Balance  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_CreateDate")]
        [DataMember(Name="abn_CreateDate",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.DateTime? abn_CreateDate  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_Date")]
        [DataMember(Name="abn_Date",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.DateTime? abn_Date  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_Employe_Export_ID")]
        [DataMember(Name="abn_Employe_Export_ID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String abn_Employe_Export_ID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_Employee_ID")]
        [DataMember(Name="abn_Employee_ID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String abn_Employee_ID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_ExternalID")]
        [DataMember(Name="abn_ExternalID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? abn_ExternalID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_FirstName")]
        [DataMember(Name="abn_FirstName",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String abn_FirstName  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_Guid")]
        [DataMember(Name="abn_Guid",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Guid? abn_Guid  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ID")]
        [DataMember(Name="ID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? ID 	{
		get 
		{ 
			if(emptyId.Equals(this.Id))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.Id, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.Id = value.ToString(); }
	}
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_ID_Boss")]
        [DataMember(Name="abn_ID_Boss",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? abn_ID_Boss  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_IsExistAD")]
        [DataMember(Name="abn_IsExistAD",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? abn_IsExistAD  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_IsGuest")]
        [DataMember(Name="abn_IsGuest",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? abn_IsGuest  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_LastFM")]
        [DataMember(Name="abn_LastFM",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String abn_LastFM  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_LastName")]
        [DataMember(Name="abn_LastName",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String abn_LastName  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_Login")]
        [DataMember(Name="abn_Login",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String abn_Login  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_MiddleName")]
        [DataMember(Name="abn_MiddleName",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String abn_MiddleName  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_ModifiedBy")]
        [DataMember(Name="abn_ModifiedBy",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String abn_ModifiedBy  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_ModifiedDate")]
        [DataMember(Name="abn_ModifiedDate",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.DateTime? abn_ModifiedDate  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_ModifiedFrom")]
        [DataMember(Name="abn_ModifiedFrom",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String abn_ModifiedFrom  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_NestedSets_Left")]
        [DataMember(Name="abn_NestedSets_Left",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? abn_NestedSets_Left  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_NestedSets_Right")]
        [DataMember(Name="abn_NestedSets_Right",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? abn_NestedSets_Right  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_Password")]
        [DataMember(Name="abn_Password",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String abn_Password  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_PositionCode")]
        [DataMember(Name="abn_PositionCode",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String abn_PositionCode  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_ShowPhoneDirectory")]
        [DataMember(Name="abn_ShowPhoneDirectory",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? abn_ShowPhoneDirectory  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_WorkPlace")]
        [DataMember(Name="abn_WorkPlace",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String abn_WorkPlace  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_WorkPlace_Personal")]
        [DataMember(Name="abn_WorkPlace_Personal",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String abn_WorkPlace_Personal  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_XmlData")]
        [DataMember(Name="abn_XmlData",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String abn_XmlData  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("AbonentFullName")]
        [DataMember(Name="AbonentFullName",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String AbonentFullName  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("acnt_ID")]
        [DataMember(Name="acnt_ID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? acnt_ID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("acnt_ID_count")]
        [DataMember(Name="acnt_ID_count",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? acnt_ID_count  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("acnt_IsPersonal")]
        [DataMember(Name="acnt_IsPersonal",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? acnt_IsPersonal  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("acnt_Number")]
        [DataMember(Name="acnt_Number",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String acnt_Number  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("acnt_Number_Personal")]
        [DataMember(Name="acnt_Number_Personal",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String acnt_Number_Personal  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Actpd_Name")]
        [DataMember(Name="Actpd_Name",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String Actpd_Name  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Actpd_Name_Personal")]
        [DataMember(Name="Actpd_Name_Personal",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String Actpd_Name_Personal  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("atnsb_DateEnd")]
        [DataMember(Name="atnsb_DateEnd",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.DateTime? atnsb_DateEnd  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("atnsb_DateStart")]
        [DataMember(Name="atnsb_DateStart",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.DateTime? atnsb_DateStart  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("aut_ID_count")]
        [DataMember(Name="aut_ID_count",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? aut_ID_count  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abb_Balance")]
        [DataMember(Name="abb_Balance",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Decimal? abb_Balance  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abb_Balance_Personal")]
        [DataMember(Name="abb_Balance_Personal",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Decimal? abb_Balance_Personal  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abb_ModifiedDate")]
        [DataMember(Name="abb_ModifiedDate",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.DateTime? abb_ModifiedDate  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abb_ModifiedDate_Personal")]
        [DataMember(Name="abb_ModifiedDate_Personal",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.DateTime? abb_ModifiedDate_Personal  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abc_Balance")]
        [DataMember(Name="abc_Balance",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Decimal? abc_Balance  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abc_Balance_Personal")]
        [DataMember(Name="abc_Balance_Personal",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Decimal? abc_Balance_Personal  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abc_Date")]
        [DataMember(Name="abc_Date",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.DateTime? abc_Date  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("CacheControlDate")]
        [DataMember(Name="CacheControlDate",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? CacheControlDate  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Boss_Tnt_Type")]
        [DataMember(Name="Boss_Tnt_Type",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String Boss_Tnt_Type  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("BossFullName")]
        [DataMember(Name="BossFullName",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String BossFullName  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("com_Id")]
        [DataMember(Name="com_Id",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? com_Id  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("debt_Amount")]
        [DataMember(Name="debt_Amount",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Decimal? debt_Amount  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("debt_Date")]
        [DataMember(Name="debt_Date",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.DateTime? debt_Date  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("dep_ID")]
        [DataMember(Name="dep_ID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? dep_ID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ext_ExtNum")]
        [DataMember(Name="ext_ExtNum",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String ext_ExtNum  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ext_ID_count")]
        [DataMember(Name="ext_ID_count",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? ext_ID_count  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("grp_ID")]
        [DataMember(Name="grp_ID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? grp_ID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("grp_Name")]
        [DataMember(Name="grp_Name",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String grp_Name  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("isActivated")]
        [DataMember(Name="isActivated",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? isActivated  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("isEditAllow")]
        [DataMember(Name="isEditAllow",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? isEditAllow  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("isEditWorkPlace")]
        [DataMember(Name="isEditWorkPlace",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? isEditWorkPlace  { get; set; }
              /// <summary>
        /// Указание языка для набора multi-language данных 
	    ///<list type='bullet'>
///<item>
///	<term>'uk' </term>
///	<description> -украинский</description>
///</item>
///<item>
///	<term>'ru' </term>
///	<description> -руский </description>
///</item>
///<item>
///	<term>'en' </term>
///	<description> -английский</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("lang")]
        [DataMember(Name="lang",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
			[JsonIgnore]
	public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("lng_ID")]
        [DataMember(Name="lng_ID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? lng_ID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("loc_Name")]
        [DataMember(Name="loc_Name",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String loc_Name  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Location_ID")]
        [DataMember(Name="Location_ID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? Location_ID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ntw_ID")]
        [DataMember(Name="ntw_ID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? ntw_ID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("pbx_networkName")]
        [DataMember(Name="pbx_networkName",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String pbx_networkName  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ProfileType")]
        [DataMember(Name="ProfileType",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? ProfileType  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("SubsCount")]
        [DataMember(Name="SubsCount",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? SubsCount  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("tnh_LastFM")]
        [DataMember(Name="tnh_LastFM",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String tnh_LastFM  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("tnt_AccountMandatory")]
        [DataMember(Name="tnt_AccountMandatory",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? tnt_AccountMandatory  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("tnt_ID")]
        [DataMember(Name="tnt_ID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? tnt_ID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("TreeNodeType")]
        [DataMember(Name="TreeNodeType",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String TreeNodeType  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("trf_ID")]
        [DataMember(Name="trf_ID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? trf_ID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("tnst_ID")]
        [DataMember(Name="tnst_ID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? tnst_ID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("tnst_ExternalID")]
        [DataMember(Name="tnst_ExternalID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? tnst_ExternalID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("isRefusalChangeName")]
        [DataMember(Name="isRefusalChangeName",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? isRefusalChangeName  { get; set; }
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "ABC_DATE_PERSONAL": return abc_Date_Personal;
				    case "ABN_BALANCE": return abn_Balance;
				    case "ABN_CREATEDATE": return abn_CreateDate;
				    case "ABN_DATE": return abn_Date;
				    case "ABN_EMPLOYE_EXPORT_ID": return abn_Employe_Export_ID;
				    case "ABN_EMPLOYEE_ID": return abn_Employee_ID;
				    case "ABN_EXTERNALID": return abn_ExternalID;
				    case "ABN_FIRSTNAME": return abn_FirstName;
				    case "ABN_GUID": return abn_Guid;
				    case "ID": return ID;
				    case "ABN_ID_BOSS": return abn_ID_Boss;
				    case "ABN_ISEXISTAD": return abn_IsExistAD;
				    case "ABN_ISGUEST": return abn_IsGuest;
				    case "ABN_LASTFM": return abn_LastFM;
				    case "ABN_LASTNAME": return abn_LastName;
				    case "ABN_LOGIN": return abn_Login;
				    case "ABN_MIDDLENAME": return abn_MiddleName;
				    case "ABN_MODIFIEDBY": return abn_ModifiedBy;
				    case "ABN_MODIFIEDDATE": return abn_ModifiedDate;
				    case "ABN_MODIFIEDFROM": return abn_ModifiedFrom;
				    case "ABN_NESTEDSETS_LEFT": return abn_NestedSets_Left;
				    case "ABN_NESTEDSETS_RIGHT": return abn_NestedSets_Right;
				    case "ABN_PASSWORD": return abn_Password;
				    case "ABN_POSITIONCODE": return abn_PositionCode;
				    case "ABN_SHOWPHONEDIRECTORY": return abn_ShowPhoneDirectory;
				    case "ABN_WORKPLACE": return abn_WorkPlace;
				    case "ABN_WORKPLACE_PERSONAL": return abn_WorkPlace_Personal;
				    case "ABN_XMLDATA": return abn_XmlData;
				    case "ABONENTFULLNAME": return AbonentFullName;
				    case "ACNT_ID": return acnt_ID;
				    case "ACNT_ID_COUNT": return acnt_ID_count;
				    case "ACNT_ISPERSONAL": return acnt_IsPersonal;
				    case "ACNT_NUMBER": return acnt_Number;
				    case "ACNT_NUMBER_PERSONAL": return acnt_Number_Personal;
				    case "ACTPD_NAME": return Actpd_Name;
				    case "ACTPD_NAME_PERSONAL": return Actpd_Name_Personal;
				    case "ATNSB_DATEEND": return atnsb_DateEnd;
				    case "ATNSB_DATESTART": return atnsb_DateStart;
				    case "AUT_ID_COUNT": return aut_ID_count;
				    case "ABB_BALANCE": return abb_Balance;
				    case "ABB_BALANCE_PERSONAL": return abb_Balance_Personal;
				    case "ABB_MODIFIEDDATE": return abb_ModifiedDate;
				    case "ABB_MODIFIEDDATE_PERSONAL": return abb_ModifiedDate_Personal;
				    case "ABC_BALANCE": return abc_Balance;
				    case "ABC_BALANCE_PERSONAL": return abc_Balance_Personal;
				    case "ABC_DATE": return abc_Date;
				    case "CACHECONTROLDATE": return CacheControlDate;
				    case "BOSS_TNT_TYPE": return Boss_Tnt_Type;
				    case "BOSSFULLNAME": return BossFullName;
				    case "COM_ID": return com_Id;
				    case "DEBT_AMOUNT": return debt_Amount;
				    case "DEBT_DATE": return debt_Date;
				    case "DEP_ID": return dep_ID;
				    case "EXT_EXTNUM": return ext_ExtNum;
				    case "EXT_ID_COUNT": return ext_ID_count;
				    case "GRP_ID": return grp_ID;
				    case "GRP_NAME": return grp_Name;
				    case "ISACTIVATED": return isActivated;
				    case "ISEDITALLOW": return isEditAllow;
				    case "ISEDITWORKPLACE": return isEditWorkPlace;
				    case "LANG": return lang;
				    case "LNG_ID": return lng_ID;
				    case "LOC_NAME": return loc_Name;
				    case "LOCATION_ID": return Location_ID;
				    case "NTW_ID": return ntw_ID;
				    case "PBX_NETWORKNAME": return pbx_networkName;
				    case "PROFILETYPE": return ProfileType;
				    case "SUBSCOUNT": return SubsCount;
				    case "TNH_LASTFM": return tnh_LastFM;
				    case "TNT_ACCOUNTMANDATORY": return tnt_AccountMandatory;
				    case "TNT_ID": return tnt_ID;
				    case "TREENODETYPE": return TreeNodeType;
				    case "TRF_ID": return trf_ID;
				    case "TNST_ID": return tnst_ID;
				    case "TNST_EXTERNALID": return tnst_ExternalID;
				    case "ISREFUSALCHANGENAME": return isRefusalChangeName;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "ABC_DATE_PERSONAL":if (value == null)abc_Date_Personal=null;else abc_Date_Personal=Convert.ToDateTime(value);break;
                case "ABN_BALANCE":if (value == null)abn_Balance=null;else abn_Balance=Convert.ToDecimal(value);break;
                case "ABN_CREATEDATE":if (value == null)abn_CreateDate=null;else abn_CreateDate=Convert.ToDateTime(value);break;
                case "ABN_DATE":if (value == null)abn_Date=null;else abn_Date=Convert.ToDateTime(value);break;
                case "ABN_EMPLOYE_EXPORT_ID":abn_Employe_Export_ID=(string)value;break;
                case "ABN_EMPLOYEE_ID":abn_Employee_ID=(string)value;break;
                case "ABN_EXTERNALID":if (value == null)abn_ExternalID=null;else abn_ExternalID=Convert.ToInt32(value);break;
                case "ABN_FIRSTNAME":abn_FirstName=(string)value;break;
                case "ABN_GUID":if (value == null)abn_Guid=null;else abn_Guid=(Guid)value;break;
                case "ID":if (value == null)ID=null;else ID=Convert.ToInt32(value);break;
                case "ABN_ID_BOSS":if (value == null)abn_ID_Boss=null;else abn_ID_Boss=Convert.ToInt32(value);break;
                case "ABN_ISEXISTAD":if (value == null)abn_IsExistAD=null;else abn_IsExistAD=Convert.ToInt32(value);break;
                case "ABN_ISGUEST":if (value == null)abn_IsGuest=null;else abn_IsGuest=Convert.ToInt32(value);break;
                case "ABN_LASTFM":abn_LastFM=(string)value;break;
                case "ABN_LASTNAME":abn_LastName=(string)value;break;
                case "ABN_LOGIN":abn_Login=(string)value;break;
                case "ABN_MIDDLENAME":abn_MiddleName=(string)value;break;
                case "ABN_MODIFIEDBY":abn_ModifiedBy=(string)value;break;
                case "ABN_MODIFIEDDATE":if (value == null)abn_ModifiedDate=null;else abn_ModifiedDate=Convert.ToDateTime(value);break;
                case "ABN_MODIFIEDFROM":abn_ModifiedFrom=(string)value;break;
                case "ABN_NESTEDSETS_LEFT":if (value == null)abn_NestedSets_Left=null;else abn_NestedSets_Left=Convert.ToInt32(value);break;
                case "ABN_NESTEDSETS_RIGHT":if (value == null)abn_NestedSets_Right=null;else abn_NestedSets_Right=Convert.ToInt32(value);break;
                case "ABN_PASSWORD":abn_Password=(string)value;break;
                case "ABN_POSITIONCODE":abn_PositionCode=(string)value;break;
                case "ABN_SHOWPHONEDIRECTORY":if (value == null)abn_ShowPhoneDirectory=null;else abn_ShowPhoneDirectory=Convert.ToInt32(value);break;
                case "ABN_WORKPLACE":abn_WorkPlace=(string)value;break;
                case "ABN_WORKPLACE_PERSONAL":abn_WorkPlace_Personal=(string)value;break;
                case "ABN_XMLDATA":abn_XmlData=(string)value;break;
                case "ABONENTFULLNAME":AbonentFullName=(string)value;break;
                case "ACNT_ID":if (value == null)acnt_ID=null;else acnt_ID=Convert.ToInt32(value);break;
                case "ACNT_ID_COUNT":if (value == null)acnt_ID_count=null;else acnt_ID_count=Convert.ToInt32(value);break;
                case "ACNT_ISPERSONAL":if (value == null)acnt_IsPersonal=null;else acnt_IsPersonal=Convert.ToInt32(value);break;
                case "ACNT_NUMBER":acnt_Number=(string)value;break;
                case "ACNT_NUMBER_PERSONAL":acnt_Number_Personal=(string)value;break;
                case "ACTPD_NAME":Actpd_Name=(string)value;break;
                case "ACTPD_NAME_PERSONAL":Actpd_Name_Personal=(string)value;break;
                case "ATNSB_DATEEND":if (value == null)atnsb_DateEnd=null;else atnsb_DateEnd=Convert.ToDateTime(value);break;
                case "ATNSB_DATESTART":if (value == null)atnsb_DateStart=null;else atnsb_DateStart=Convert.ToDateTime(value);break;
                case "AUT_ID_COUNT":if (value == null)aut_ID_count=null;else aut_ID_count=Convert.ToInt32(value);break;
                case "ABB_BALANCE":if (value == null)abb_Balance=null;else abb_Balance=Convert.ToDecimal(value);break;
                case "ABB_BALANCE_PERSONAL":if (value == null)abb_Balance_Personal=null;else abb_Balance_Personal=Convert.ToDecimal(value);break;
                case "ABB_MODIFIEDDATE":if (value == null)abb_ModifiedDate=null;else abb_ModifiedDate=Convert.ToDateTime(value);break;
                case "ABB_MODIFIEDDATE_PERSONAL":if (value == null)abb_ModifiedDate_Personal=null;else abb_ModifiedDate_Personal=Convert.ToDateTime(value);break;
                case "ABC_BALANCE":if (value == null)abc_Balance=null;else abc_Balance=Convert.ToDecimal(value);break;
                case "ABC_BALANCE_PERSONAL":if (value == null)abc_Balance_Personal=null;else abc_Balance_Personal=Convert.ToDecimal(value);break;
                case "ABC_DATE":if (value == null)abc_Date=null;else abc_Date=Convert.ToDateTime(value);break;
                case "CACHECONTROLDATE":if (value == null)CacheControlDate=null;else CacheControlDate=Convert.ToDateTime(value);break;
                case "BOSS_TNT_TYPE":Boss_Tnt_Type=(string)value;break;
                case "BOSSFULLNAME":BossFullName=(string)value;break;
                case "COM_ID":if (value == null)com_Id=null;else com_Id=Convert.ToInt32(value);break;
                case "DEBT_AMOUNT":if (value == null)debt_Amount=null;else debt_Amount=Convert.ToDecimal(value);break;
                case "DEBT_DATE":if (value == null)debt_Date=null;else debt_Date=Convert.ToDateTime(value);break;
                case "DEP_ID":if (value == null)dep_ID=null;else dep_ID=Convert.ToInt32(value);break;
                case "EXT_EXTNUM":ext_ExtNum=(string)value;break;
                case "EXT_ID_COUNT":if (value == null)ext_ID_count=null;else ext_ID_count=Convert.ToInt32(value);break;
                case "GRP_ID":if (value == null)grp_ID=null;else grp_ID=Convert.ToInt32(value);break;
                case "GRP_NAME":grp_Name=(string)value;break;
                case "ISACTIVATED":if (value == null)isActivated=null;else isActivated=Convert.ToInt32(value);break;
                case "ISEDITALLOW":if (value == null)isEditAllow=null;else isEditAllow=Convert.ToInt32(value);break;
                case "ISEDITWORKPLACE":if (value == null)isEditWorkPlace=null;else isEditWorkPlace=Convert.ToInt32(value);break;
                case "LANG":lang=(string)value;break;
                case "LNG_ID":if (value == null)lng_ID=null;else lng_ID=Convert.ToInt32(value);break;
                case "LOC_NAME":loc_Name=(string)value;break;
                case "LOCATION_ID":if (value == null)Location_ID=null;else Location_ID=Convert.ToInt32(value);break;
                case "NTW_ID":if (value == null)ntw_ID=null;else ntw_ID=Convert.ToInt32(value);break;
                case "PBX_NETWORKNAME":pbx_networkName=(string)value;break;
                case "PROFILETYPE":if (value == null)ProfileType=null;else ProfileType=Convert.ToInt32(value);break;
                case "SUBSCOUNT":if (value == null)SubsCount=null;else SubsCount=Convert.ToInt32(value);break;
                case "TNH_LASTFM":tnh_LastFM=(string)value;break;
                case "TNT_ACCOUNTMANDATORY":if (value == null)tnt_AccountMandatory=null;else tnt_AccountMandatory=Convert.ToInt32(value);break;
                case "TNT_ID":if (value == null)tnt_ID=null;else tnt_ID=Convert.ToInt32(value);break;
                case "TREENODETYPE":TreeNodeType=(string)value;break;
                case "TRF_ID":if (value == null)trf_ID=null;else trf_ID=Convert.ToInt32(value);break;
                case "TNST_ID":if (value == null)tnst_ID=null;else tnst_ID=Convert.ToInt32(value);break;
                case "TNST_EXTERNALID":if (value == null)tnst_ExternalID=null;else tnst_ExternalID=Convert.ToInt32(value);break;
                case "ISREFUSALCHANGENAME":if (value == null)isRefusalChangeName=null;else isRefusalChangeName=Convert.ToInt32(value);break;
                }
            }
		}
		#endregion
	}
#endregion
#region [Customers/postponeInvoice]

	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Customers_postponeInvoice_Request_ACTION",Namespace = "")]
	public class Customers_postponeInvoice_Request_ACTION : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// Новый срок оплаты инвойса
	    ///<list type='bullet'>
///<item>
///	<description>дата</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("DateLimit")]
        [DataMember(Name="DateLimit",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.DateTime? DateLimit  { get; set; }
              /// <summary>
        /// Название сущности REST, для которой выполняется POST операция
	    ///<list type='bullet'>
///<item>
///	<description>зарезервировано</description>
///</item>
///<item>
///	<description>доступные значения Customers</description>
///</item>
///<item>
///	<description>Suscribers или Associations</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("EntityName")]
        [DataMember(Name="EntityName",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String EntityName { get; set; } = "<empty>";
              /// <summary>
        /// Формат вывода ошибки
	    ///<list type='bullet'>
///<item>
///	<description>'json'</description>
///</item>
///<item>
///	<description>'xml'</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : xml</para>
///<para>Max length : 25</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ErrFormat")]
        [DataMember(Name="ErrFormat",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ErrFormat     {
		get { return Format ?? "xml"; }
		set { this.Format = value; }
	}
              /// <summary>
        /// Признак передачи внешнего значения ID
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - внешний ID (для BIS всегда устанавливаем в 1)</description>
///</item>
///<item>
///	<term>0 </term>
///	<description> - внутренний ID</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("IDType")]
        [DataMember(Name="IDType",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? IDType  { get; set; } = 0;
              /// <summary>
        /// Указание языка для набора multi-language данных 
	    ///<list type='bullet'>
///<item>
///	<term>'uk' </term>
///	<description> -украинский</description>
///</item>
///<item>
///	<term>'ru' </term>
///	<description> -руский </description>
///</item>
///<item>
///	<term>'en' </term>
///	<description> -английский</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 'uk'</para>
///<para>Max length : 3</para>
///<para>Mandatory : Yes</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("lang")]
        [DataMember(Name="lang",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
			[JsonIgnore]
	public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
              /// <summary>
        /// Пользователь данного изменения
	    ///<list type='bullet'>
///<item>
///	<term>Username </term>
///	<description> - пользователь из контекста</description>
///</item>
///<item>
///	<term>NULL </term>
///	<description> -если неизвестен</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedBy")]
        [DataMember(Name="ModifiedBy",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedBy  { get; set; }
              /// <summary>
        /// Источник данного изменения
	    ///<list type='bullet'>
///<item>
///	<term>IP </term>
///	<description> -адрес/имя компьютера</description>
///</item>
///<item>
///	<term>NULL </term>
///	<description> - если неизвестен</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedFrom")]
        [DataMember(Name="ModifiedFrom",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedFrom  { get; set; }
              /// <summary>
        /// Идентификатор клиента
	    ///<list type='bullet'>
///<item>
///	<description>CLNT_ID</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("ParentID")]
        [DataMember(Name="ParentID",EmitDefaultValue = false)]
		[JsonRestrictedByValue("<empty>")]

			[Required]
[SecondaryKey("Customers_Request_GET","ID")]/*ACTION*/
	public global::System.Int32? ParentID 	{
		get 
		{ 
			if(emptyId.Equals(this.ParentId))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.ParentId, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.ParentId = value.ToString(); }
	}
              /// <summary>
        /// Комментарий изменений
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Remark")]
        [DataMember(Name="Remark",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Remark  { get; set; }
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "DATELIMIT": return DateLimit;
				    case "ENTITYNAME": return EntityName;
				    case "ERRFORMAT": return ErrFormat;
				    case "IDTYPE": return IDType;
				    case "LANG": return lang;
				    case "MODIFIEDBY": return ModifiedBy;
				    case "MODIFIEDFROM": return ModifiedFrom;
				    case "PARENTID": return ParentID;
				    case "REMARK": return Remark;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "DATELIMIT":if (value == null)DateLimit=null;else DateLimit=Convert.ToDateTime(value);break;
                case "ENTITYNAME":EntityName=(string)value;break;
                case "ERRFORMAT":ErrFormat=(string)value;break;
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                case "LANG":lang=(string)value;break;
                case "MODIFIEDBY":ModifiedBy=(string)value;break;
                case "MODIFIEDFROM":ModifiedFrom=(string)value;break;
                case "PARENTID":if (value == null)ParentID=null;else ParentID=Convert.ToInt32(value);break;
                case "REMARK":Remark=(string)value;break;
                }
            }
		}
		#endregion
	}
#endregion
#region [Customers/SetLabels]

	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Customers_SetLabels_Request_ACTION",Namespace = "")]
	public class Customers_SetLabels_Request_ACTION : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// Дата изменений
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("EffectiveDate")]
        [DataMember(Name="EffectiveDate",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? EffectiveDate  { get; set; }
              /// <summary>
        /// Название сущности для которой выполняется операция
	    ///<list type='bullet'>
///<item>
///	<description>Допустимые значения Associations</description>
///</item>
///<item>
///	<description>Customers</description>
///</item>
///<item>
///	<description>Subscribers</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("EntityName")]
        [DataMember(Name="EntityName",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String EntityName { get; set; } = "<empty>";
              /// <summary>
        /// Формат вывода ошибки
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 'json'</para>
///<para>Max length : 25</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ErrFormat")]
        [DataMember(Name="ErrFormat",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ErrFormat     {
		get { return Format ?? "json"; }
		set { this.Format = value; }
	}
              /// <summary>
        /// Признак передачи внешнего значения ID
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("IDType")]
        [DataMember(Name="IDType",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? IDType  { get; set; }
              /// <summary>
        /// Код метки
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("LabelCode")]
        [DataMember(Name="LabelCode",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String LabelCode  { get; set; }
              /// <summary>
        /// Указание языка для набора multi-language данных 
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 'uk'</para>
///<para>Max length : 3</para>
///<para>Mandatory : Yes</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("lang")]
        [DataMember(Name="lang",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
			[JsonIgnore]
	public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
              /// <summary>
        /// Зарезервировано
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("LinkedServer")]
        [DataMember(Name="LinkedServer",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String LinkedServer  { get; set; }
              /// <summary>
        /// Пользователь данного изменения
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedBy")]
        [DataMember(Name="ModifiedBy",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedBy  { get; set; }
              /// <summary>
        /// Источник данного изменения
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedFrom")]
        [DataMember(Name="ModifiedFrom",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedFrom  { get; set; }
              /// <summary>
        /// Комментарий изменения
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Remark")]
        [DataMember(Name="Remark",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Remark  { get; set; }
              /// <summary>
        /// SELECT запрос на отбор идентификаторов узлов дерева - должен учитыавать значение IDType
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("SourceQuery")]
        [DataMember(Name="SourceQuery",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String SourceQuery  { get; set; }
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "EFFECTIVEDATE": return EffectiveDate;
				    case "ENTITYNAME": return EntityName;
				    case "ERRFORMAT": return ErrFormat;
				    case "IDTYPE": return IDType;
				    case "LABELCODE": return LabelCode;
				    case "LANG": return lang;
				    case "LINKEDSERVER": return LinkedServer;
				    case "MODIFIEDBY": return ModifiedBy;
				    case "MODIFIEDFROM": return ModifiedFrom;
				    case "REMARK": return Remark;
				    case "SOURCEQUERY": return SourceQuery;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "EFFECTIVEDATE":if (value == null)EffectiveDate=null;else EffectiveDate=Convert.ToDateTime(value);break;
                case "ENTITYNAME":EntityName=(string)value;break;
                case "ERRFORMAT":ErrFormat=(string)value;break;
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                case "LABELCODE":LabelCode=(string)value;break;
                case "LANG":lang=(string)value;break;
                case "LINKEDSERVER":LinkedServer=(string)value;break;
                case "MODIFIEDBY":ModifiedBy=(string)value;break;
                case "MODIFIEDFROM":ModifiedFrom=(string)value;break;
                case "REMARK":Remark=(string)value;break;
                case "SOURCEQUERY":SourceQuery=(string)value;break;
                }
            }
		}
		#endregion
	}
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Customers_SetLabels_Response_ACTION",Namespace = "")]
	public class Customers_SetLabels_Response_ACTION: BaseEntity, IModifiedTag
	{
         #region [Properties]
			/// <summary>
			/// Признак передачи внешнего значения ID
			/// <para/>
			/// IsExternalID
			/// </summary>
			///<remarks>
			///Признак передачи внешнего значения ID
			///</remarks>
			[JsonProperty("IDType")]
			[DataMember(Name="IDType", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
            public global::System.Int32? IDType  { get; set; }
			/// <summary>
			/// Указание языка для набора multi-language данных 
			/// <para/>
			/// Lang
			/// </summary>
			///<remarks>
			///Указание языка для набора multi-language данных 
			///</remarks>
			[JsonProperty("lang")]
			[DataMember(Name="lang", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
			[JsonIgnore]
            public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
         #endregion
        [JsonIgnore]
	    public DateTime? If_Modified_Since { get {return null;}}
        #region [IDateModified]
        [JsonIgnore]
	    public DateTime? LastModified { get { return If_Modified_Since;}}
        #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                }
            }
		}
		#endregion
    }
#endregion
#region [CustomerTypes]
  
    
    ///<remarks>GET &lt;host&gt;[:&lt;port&gt;]/api/v1/bss/CustomerTypes
///</remarks>
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="CustomerTypes_Request_GET",Namespace = "")]
	public class CustomerTypes_Request_GET : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// Формат вывода ошибки
	    ///<list type='bullet'>
///<item>
///	<description>'json'</description>
///</item>
///<item>
///	<description>'xml'</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : xml</para>
///<para>Max length : 25</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ErrFormat")]
        [DataMember(Name="ErrFormat",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ErrFormat     {
		get { return Format ?? "xml"; }
		set { this.Format = value; }
	}
              /// <summary>
        /// Признак передачи внешнего значения ID
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - внешний ID (для BIS всегда устанавливаем в 1)</description>
///</item>
///<item>
///	<term>0 </term>
///	<description> - внутренний ID</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 1</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("IDType")]
        [DataMember(Name="IDType",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? IDType  { get; set; } = 1;
              /// <summary>
        /// Указание языка для набора multi-language данных 
	    ///<list type='bullet'>
///<item>
///	<term>'uk' </term>
///	<description> -украинский</description>
///</item>
///<item>
///	<term>'ru' </term>
///	<description> -руский </description>
///</item>
///<item>
///	<term>'en' </term>
///	<description> -английский</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("lang")]
        [DataMember(Name="lang",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
			[JsonIgnore]
	public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "ERRFORMAT": return ErrFormat;
				    case "IDTYPE": return IDType;
				    case "LANG": return lang;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "ERRFORMAT":ErrFormat=(string)value;break;
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                case "LANG":lang=(string)value;break;
                }
            }
		}
		#endregion
	}
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="CustomerTypes_Response_GET",Namespace = "")]
	public class CustomerTypes_Response_GET: BaseEntity, IModifiedTag
	{
         #region [Properties]
			/// <summary>
			/// Признак передачи внешнего значения ID
			/// <para/>
			/// IsExternalID
			/// </summary>
			///<remarks>
			///Признак передачи внешнего значения ID
			///</remarks>
			[JsonProperty("IDType")]
			[DataMember(Name="IDType", EmitDefaultValue = false)]
			/*norestr*/

            public global::System.Int32? IDType  { get; set; } = 1;
			/// <summary>
			/// Указание языка для набора multi-language данных 
			/// <para/>
			/// Lang
			/// </summary>
			///<remarks>
			///Указание языка для набора multi-language данных 
			///</remarks>
			[JsonProperty("lang")]
			[DataMember(Name="lang", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
			[JsonIgnore]
            public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
         #endregion
        [JsonIgnore]
	    public DateTime? If_Modified_Since { get {return null;}}
        #region [IDateModified]
        [JsonIgnore]
	    public DateTime? LastModified { get { return If_Modified_Since;}}
        #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "IDTYPE": return IDType;
				    case "LANG": return lang;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                case "LANG":lang=(string)value;break;
                }
            }
		}
		#endregion
    }
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="CustomerTypes_Response_GET_OUTPUT",Namespace = "")]
	public class CustomerTypes_Response_GET_OUTPUT : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ID")]
        [DataMember(Name="ID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? ID 	{
		get 
		{ 
			if(emptyId.Equals(this.Id))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.Id, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.Id = value.ToString(); }
	}
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("AccountTypeName")]
        [DataMember(Name="AccountTypeName",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String AccountTypeName  { get; set; }
              /// <summary>
        /// Признак передачи внешнего значения ID
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - внешний ID (для BIS всегда устанавливаем в 1)</description>
///</item>
///<item>
///	<term>0 </term>
///	<description> - внутренний ID</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Idtype")]
        [DataMember(Name="Idtype",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? Idtype  { get; set; }
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "ID": return ID;
				    case "ACCOUNTTYPENAME": return AccountTypeName;
				    case "IDTYPE": return Idtype;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "ID":if (value == null)ID=null;else ID=Convert.ToInt32(value);break;
                case "ACCOUNTTYPENAME":AccountTypeName=(string)value;break;
                case "IDTYPE":if (value == null)Idtype=null;else Idtype=Convert.ToInt32(value);break;
                }
            }
		}
		#endregion
	}
#endregion
#region [Discounts]
  
    
    ///<remarks>POST &lt;host&gt;[:&lt;port&gt;]/api/v1/bss/customers/[parentid]/Discounts
///</remarks>
    ///Customers
    [EntitySubentity("Customers")]

	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Discounts_Request_SET",Namespace = "")]
	public class Discounts_Request_SET : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// Дата установки изменений (начала действия или окончания)
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("DateSet")]
        [DataMember(Name="DateSet",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? DateSet  { get; set; }
              /// <summary>
        /// Идентификатор скидки
	    ///<list type='bullet'>
///<item>
///	<description>BVDT_ID из BVD_DISCOUNT_TABLES</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("DiscountID")]
        [DataMember(Name="DiscountID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? DiscountID  { get; set; }
              /// <summary>
        /// Пользователь данного изменения
	    ///<list type='bullet'>
///<item>
///	<term>Username </term>
///	<description> - пользователь из контекста</description>
///</item>
///<item>
///	<term>NULL </term>
///	<description> -если неизвестен</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedBy")]
        [DataMember(Name="ModifiedBy",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedBy  { get; set; }
              /// <summary>
        /// Источник данного изменения
	    ///<list type='bullet'>
///<item>
///	<term>IP </term>
///	<description> -адрес/имя компьютера</description>
///</item>
///<item>
///	<term>NULL </term>
///	<description> - если неизвестен</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedFrom")]
        [DataMember(Name="ModifiedFrom",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedFrom  { get; set; }
              /// <summary>
        /// Комментарий изменений
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Remark")]
        [DataMember(Name="Remark",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Remark  { get; set; }
              /// <summary>
        /// Признак передачи внешнего значения ID
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - внешний ID (для BIS всегда устанавливаем в 1)</description>
///</item>
///<item>
///	<term>0 </term>
///	<description> - внутренний ID</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 1</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("IDType")]
        [DataMember(Name="IDType",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? IDType  { get; set; } = 1;
              /// <summary>
        /// Признак закрытия действия скидки с указанной даты DateSet
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - действие скидки закрыть</description>
///</item>
///<item>
///	<term>0 </term>
///	<description> - скидку назначить</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("isAnnul")]
        [DataMember(Name="isAnnul",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? isAnnul  { get; set; } = 0;
              /// <summary>
        /// Название сущности REST, для которой выполняется POST операция
	    ///<list type='bullet'>
///<item>
///	<description>зарезервировано</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("EntityName")]
        [DataMember(Name="EntityName",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String EntityName { get; set; } = "<empty>";
              /// <summary>
        /// Идентификатор клиента
	    ///<list type='bullet'>
///<item>
///	<description>CLNT_ID</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("ParentID")]
        [DataMember(Name="ParentID",EmitDefaultValue = false)]
		[JsonRestrictedByValue("<empty>")]

[SecondaryKey("Customers_Request_SET","ID")]/*SET*/
	public global::System.Int32? ParentID 	{
		get 
		{ 
			if(emptyId.Equals(this.ParentId))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.ParentId, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.ParentId = value.ToString(); }
	}
              /// <summary>
        /// Уникальный идентификатор исторической связки клиента и скидки
	    ///<list type='bullet'>
///<item>
///	<description>идентификатор из BVD_CLNT_BVDT</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("ID")]
        [DataMember(Name="ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? ID 	{
		get 
		{ 
			if(emptyId.Equals(this.Id))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.Id, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.Id = value.ToString(); }
	}
              /// <summary>
        /// Формат вывода ошибки
	    ///<list type='bullet'>
///<item>
///	<description>'json'</description>
///</item>
///<item>
///	<description>'xml'</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : xml</para>
///<para>Max length : 25</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ErrFormat")]
        [DataMember(Name="ErrFormat",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ErrFormat     {
		get { return Format ?? "xml"; }
		set { this.Format = value; }
	}
              /// <summary>
        /// Указание языка для набора multi-language данных 
	    ///<list type='bullet'>
///<item>
///	<term>'uk' </term>
///	<description> -украинский</description>
///</item>
///<item>
///	<term>'ru' </term>
///	<description> -руский </description>
///</item>
///<item>
///	<term>'en' </term>
///	<description> -английский</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 'uk'</para>
///<para>Max length : 3</para>
///<para>Mandatory : Yes</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("lang")]
        [DataMember(Name="lang",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
			[JsonIgnore]
	public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "DATESET": return DateSet;
				    case "DISCOUNTID": return DiscountID;
				    case "MODIFIEDBY": return ModifiedBy;
				    case "MODIFIEDFROM": return ModifiedFrom;
				    case "REMARK": return Remark;
				    case "IDTYPE": return IDType;
				    case "ISANNUL": return isAnnul;
				    case "ENTITYNAME": return EntityName;
				    case "PARENTID": return ParentID;
				    case "ID": return ID;
				    case "ERRFORMAT": return ErrFormat;
				    case "LANG": return lang;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "DATESET":if (value == null)DateSet=null;else DateSet=Convert.ToDateTime(value);break;
                case "DISCOUNTID":if (value == null)DiscountID=null;else DiscountID=Convert.ToInt32(value);break;
                case "MODIFIEDBY":ModifiedBy=(string)value;break;
                case "MODIFIEDFROM":ModifiedFrom=(string)value;break;
                case "REMARK":Remark=(string)value;break;
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                case "ISANNUL":if (value == null)isAnnul=null;else isAnnul=Convert.ToInt32(value);break;
                case "ENTITYNAME":EntityName=(string)value;break;
                case "PARENTID":if (value == null)ParentID=null;else ParentID=Convert.ToInt32(value);break;
                case "ID":if (value == null)ID=null;else ID=Convert.ToInt32(value);break;
                case "ERRFORMAT":ErrFormat=(string)value;break;
                case "LANG":lang=(string)value;break;
                }
            }
		}
		#endregion
	}
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Discounts_Response_SET",Namespace = "")]
	public class Discounts_Response_SET: BaseEntity, IModifiedTag
	{
         #region [Properties]
			/// <summary>
			/// Указание языка для набора multi-language данных 
			/// <para/>
			/// Lang
			/// </summary>
			///<remarks>
			///Указание языка для набора multi-language данных 
			///</remarks>
			[JsonProperty("lang")]
			[DataMember(Name="lang", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
			[JsonIgnore]
            public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
			/// <summary>
			/// Уникальный идентификатор исторической связки клиента и скидки
			/// <para/>
			/// dab_ID
			/// </summary>
			///<remarks>
			///Уникальный идентификатор исторической связки клиента и скидки
			///</remarks>
			[JsonProperty("ID")]
			[DataMember(Name="ID", EmitDefaultValue = false)]
			/*norestr*/

            public global::System.Int32? ID 	{
		get 
		{ 
			if(emptyId.Equals(this.Id))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.Id, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.Id = value.ToString(); }
	}
         #endregion
        [JsonIgnore]
	    public DateTime? If_Modified_Since { get {return null;}}
        #region [IDateModified]
        [JsonIgnore]
	    public DateTime? LastModified { get { return If_Modified_Since;}}
        #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "LANG": return lang;
				    case "ID": return ID;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "LANG":lang=(string)value;break;
                case "ID":if (value == null)ID=null;else ID=Convert.ToInt32(value);break;
                }
            }
		}
		#endregion
    }
#endregion
#region [Environment]
  
    
    ///<remarks>GET &lt;host&gt;[:&lt;port&gt;]/api/v1/bss/Environment
///</remarks>
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Environment_Request_GET",Namespace = "")]
	public class Environment_Request_GET : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// Формат вывода ошибки
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : xml</para>
///<para>Max length : 25</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ErrFormat")]
        [DataMember(Name="ErrFormat",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ErrFormat     {
		get { return Format ?? "xml"; }
		set { this.Format = value; }
	}
              /// <summary>
        /// Указание языка для набора multi-language данных 
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("lang")]
        [DataMember(Name="lang",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
			[JsonIgnore]
	public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 'Abonents.abn_ExternalID.Start'</para>
///<para>Max length : 50</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("var_Name")]
        [DataMember(Name="var_Name",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String var_Name  { get; set; } = "Abonents.abn_ExternalID.Start";
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("var_Group")]
        [DataMember(Name="var_Group",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String var_Group  { get; set; }
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "ERRFORMAT": return ErrFormat;
				    case "LANG": return lang;
				    case "VAR_NAME": return var_Name;
				    case "VAR_GROUP": return var_Group;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "ERRFORMAT":ErrFormat=(string)value;break;
                case "LANG":lang=(string)value;break;
                case "VAR_NAME":var_Name=(string)value;break;
                case "VAR_GROUP":var_Group=(string)value;break;
                }
            }
		}
		#endregion
	}
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Environment_Response_GET",Namespace = "")]
	public class Environment_Response_GET: BaseEntity, IModifiedTag
	{
         #region [Properties]
			/// <summary>
			/// Указание языка для набора multi-language данных 
			/// <para/>
			/// Lang
			/// </summary>
			///<remarks>
			///Указание языка для набора multi-language данных 
			///</remarks>
			[JsonProperty("lang")]
			[DataMember(Name="lang", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
			[JsonIgnore]
            public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
         #endregion
        [JsonIgnore]
	    public DateTime? If_Modified_Since { get {return null;}}
        #region [IDateModified]
        [JsonIgnore]
	    public DateTime? LastModified { get { return If_Modified_Since;}}
        #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "LANG": return lang;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "LANG":lang=(string)value;break;
                }
            }
		}
		#endregion
    }
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Environment_Response_GET_OUTPUT",Namespace = "")]
	public class Environment_Response_GET_OUTPUT : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("var_Description")]
        [DataMember(Name="var_Description",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String var_Description  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("var_Error")]
        [DataMember(Name="var_Error",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? var_Error  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ID")]
        [DataMember(Name="ID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String ID 	{
		get {{return this.Id;}}
		set {{ this.Id = value; }}
	}
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("var_Value")]
        [DataMember(Name="var_Value",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String var_Value  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("var_ValueDatetime")]
        [DataMember(Name="var_ValueDatetime",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.DateTime? var_ValueDatetime  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("var_ValueDecimal")]
        [DataMember(Name="var_ValueDecimal",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Decimal? var_ValueDecimal  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("var_ValueInt")]
        [DataMember(Name="var_ValueInt",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? var_ValueInt  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ddat")]
        [DataMember(Name="ddat",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? ddat  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ddec")]
        [DataMember(Name="ddec",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? ddec  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("dint")]
        [DataMember(Name="dint",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? dint  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("dstr")]
        [DataMember(Name="dstr",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? dstr  { get; set; }
              /// <summary>
        /// Указание языка для набора multi-language данных 
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 'uk'</para>
///<para>Max length : 3</para>
///<para>Mandatory : Yes</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("lang")]
        [DataMember(Name="lang",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
			[JsonIgnore]
	public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("var_Group")]
        [DataMember(Name="var_Group",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String var_Group  { get; set; }
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "VAR_DESCRIPTION": return var_Description;
				    case "VAR_ERROR": return var_Error;
				    case "ID": return ID;
				    case "VAR_VALUE": return var_Value;
				    case "VAR_VALUEDATETIME": return var_ValueDatetime;
				    case "VAR_VALUEDECIMAL": return var_ValueDecimal;
				    case "VAR_VALUEINT": return var_ValueInt;
				    case "DDAT": return ddat;
				    case "DDEC": return ddec;
				    case "DINT": return dint;
				    case "DSTR": return dstr;
				    case "LANG": return lang;
				    case "VAR_GROUP": return var_Group;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "VAR_DESCRIPTION":var_Description=(string)value;break;
                case "VAR_ERROR":if (value == null)var_Error=null;else var_Error=Convert.ToInt32(value);break;
                case "ID":ID=(string)value;break;
                case "VAR_VALUE":var_Value=(string)value;break;
                case "VAR_VALUEDATETIME":if (value == null)var_ValueDatetime=null;else var_ValueDatetime=Convert.ToDateTime(value);break;
                case "VAR_VALUEDECIMAL":if (value == null)var_ValueDecimal=null;else var_ValueDecimal=Convert.ToDecimal(value);break;
                case "VAR_VALUEINT":if (value == null)var_ValueInt=null;else var_ValueInt=Convert.ToInt32(value);break;
                case "DDAT":if (value == null)ddat=null;else ddat=Convert.ToInt32(value);break;
                case "DDEC":if (value == null)ddec=null;else ddec=Convert.ToInt32(value);break;
                case "DINT":if (value == null)dint=null;else dint=Convert.ToInt32(value);break;
                case "DSTR":if (value == null)dstr=null;else dstr=Convert.ToInt32(value);break;
                case "LANG":lang=(string)value;break;
                case "VAR_GROUP":var_Group=(string)value;break;
                }
            }
		}
		#endregion
	}
#endregion
#region [Extentions]
  
    
    ///<remarks>POST &lt;host&gt;[:&lt;port&gt;]/api/v1/bss/subscribers/[parentid]/extentions
///</remarks>
    ///Subscribers
    [EntitySubentity("Subscribers")]

	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Extentions_Request_SET",Namespace = "")]
	public class Extentions_Request_SET : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// Дата окончания действия записи для ВН
	    ///<list type='bullet'>
///<item>
///	<term>безсрочно </term>
///	<description> - 31.12.2999 23:59:59</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("DateEnd")]
        [DataMember(Name="DateEnd",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? DateEnd  { get; set; }
              /// <summary>
        /// Дата последнего изменения статуса Extentions
	    ///<list type='bullet'>
///<item>
///	<description>зарезервировано</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("StatusModifiedDate")]
        [DataMember(Name="StatusModifiedDate",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? StatusModifiedDate  { get; set; }
              /// <summary>
        /// Пользователь данного изменения
	    ///<list type='bullet'>
///<item>
///	<term>Username </term>
///	<description> - пользователь из контекста</description>
///</item>
///<item>
///	<term>NULL </term>
///	<description> -если неизвестен</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedBy")]
        [DataMember(Name="ModifiedBy",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedBy  { get; set; }
              /// <summary>
        /// Источник данного изменения
	    ///<list type='bullet'>
///<item>
///	<term>IP </term>
///	<description> -адрес/имя компьютера</description>
///</item>
///<item>
///	<term>NULL </term>
///	<description> - если неизвестен</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedFrom")]
        [DataMember(Name="ModifiedFrom",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedFrom  { get; set; }
              /// <summary>
        /// Формат аттрибутов Extentions
	    ///<list type='bullet'>
///<item>
///	<description>'xml'</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : xml</para>
///<para>Max length : 25</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("XmlDataFormat")]
        [DataMember(Name="XmlDataFormat",EmitDefaultValue = false)]
		/*norestr*/
[DocIgnore]

	public global::System.String XmlDataFormat  { get; set; } = "xml";
              /// <summary>
        /// Идентификатор Extentions (Номера MSISDN)
	    ///<list type='bullet'>
///<item>
///	<description>значения NSET_ID для правки записи</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ExtentionID")]
        [DataMember(Name="ExtentionID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? ExtentionID  { get; set; }
              /// <summary>
        /// Внешний идентификатор MSISDN
	    ///<list type='bullet'>
///<item>
///	<description>значения NSET_ID из справовника NUMBER_SETS</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ExternalID")]
        [DataMember(Name="ExternalID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? ExternalID  { get; set; }
              /// <summary>
        /// Аттрибуты Extentions
	    ///<list type='bullet'>
///<item>
///	<description>Обьект JSON/XML</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("XmlData")]
        [DataMember(Name="XmlData",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String XmlData  { get; set; }
              /// <summary>
        /// Идентификатор категории Extentions
	    ///<list type='bullet'>
///<item>
///	<description>значения NCAT_ID из Number_categories</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("CategoryID")]
        [DataMember(Name="CategoryID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? CategoryID  { get; set; }
              /// <summary>
        /// Идентификатор класса Extentions
	    ///<list type='bullet'>
///<item>
///	<description>значения NCLS_ID из Number_classes</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ClassID")]
        [DataMember(Name="ClassID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? ClassID  { get; set; }
              /// <summary>
        /// Идентификатор статуса номера
	    ///<list type='bullet'>
///<item>
///	<description>указываем значение NSTS_ID из справочника Number_statuses</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("StatusID")]
        [DataMember(Name="StatusID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? StatusID  { get; set; }
              /// <summary>
        /// Идентификатор типа Extentions
	    ///<list type='bullet'>
///<item>
///	<description>значения NTYP_ID</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("TypeID")]
        [DataMember(Name="TypeID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? TypeID  { get; set; }
              /// <summary>
        /// Идентификатор точки подключения (SWITCHES)
	    ///<list type='bullet'>
///<item>
///	<description>SWCH_ID из справочника SWITCHES</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ConnectionPointID")]
        [DataMember(Name="ConnectionPointID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? ConnectionPointID  { get; set; }
              /// <summary>
        /// Идентификатор устройства (источника СDR)
	    ///<list type='bullet'>
///<item>
///	<description>зарезервировано</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("NumberAts")]
        [DataMember(Name="NumberAts",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? NumberAts  { get; set; }
              /// <summary>
        /// Номер Extentions
	    ///<list type='bullet'>
///<item>
///	<term>MSISDN </term>
///	<description> - для GSM</description>
///</item>
///<item>
///	<term>Пилотный номер </term>
///	<description> - для PSTN</description>
///</item>
///<item>
///	<term>номер ЛС </term>
///	<description> - для FTTB</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ExtentionNumber")]
        [DataMember(Name="ExtentionNumber",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String ExtentionNumber  { get; set; }
              /// <summary>
        /// Признак ""создан автоматически из cdr
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - да</description>
///</item>
///<item>
///	<term>0 </term>
///	<description> - нет</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("IsCreatedWithTariffication")]
        [DataMember(Name="IsCreatedWithTariffication",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? IsCreatedWithTariffication  { get; set; } = 0;
              /// <summary>
        /// Признак передачи внешнего значения ID
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - внешний ID (для BIS всегда устанавливаем в 1)</description>
///</item>
///<item>
///	<term>0 </term>
///	<description> - внутренний ID</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 1</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("IDType")]
        [DataMember(Name="IDType",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? IDType  { get; set; } = 1;
              /// <summary>
        /// Комментарий изменения
	    ///<list type='bullet'>
///<item>
///	<description>Заполняем причину изменений для истории</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Remark")]
        [DataMember(Name="Remark",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Remark  { get; set; }
              /// <summary>
        /// Режим отладки (зарезервировано)
	    ///<list type='bullet'>
///<item>
///	<description>зарезервировано</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("DebugLevel")]
        [DataMember(Name="DebugLevel",EmitDefaultValue = false)]
		/*norestr*/
[DocIgnore]

	public global::System.Int32? DebugLevel  { get; set; } = 0;
              /// <summary>
        /// Дата начала действия
	    ///<list type='bullet'>
///<item>
///	<description>текущая дата (время 0:00:00)</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("DateStart")]
        [DataMember(Name="DateStart",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? DateStart  { get; set; }
              /// <summary>
        /// Идентификатор абонента
	    ///<list type='bullet'>
///<item>
///	<description>SUBS_ID из справочника SUBSCRIBERS</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("ParentID")]
        [DataMember(Name="ParentID",EmitDefaultValue = false)]
		[JsonRestrictedByValue("<empty>")]

[SecondaryKey("Subscribers_Request_SET","ID")]/*SET*/
	public global::System.Int32? ParentID 	{
		get 
		{ 
			if(emptyId.Equals(this.ParentId))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.ParentId, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.ParentId = value.ToString(); }
	}
              /// <summary>
        /// Идентификатор исторической связки с абонентом
	    ///<list type='bullet'>
///<item>
///	<description>зарезервировано</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("ID")]
        [DataMember(Name="ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? ID 	{
		get 
		{ 
			if(emptyId.Equals(this.Id))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.Id, out result))
				return result; 
			else
            {
return 0;
            }
		}
		set { this.Id = value.ToString(); }
	}
              /// <summary>
        /// Формат вывода ошибки
	    ///<list type='bullet'>
///<item>
///	<description>'json'</description>
///</item>
///<item>
///	<description>'xml'</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : xml</para>
///<para>Max length : 25</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ErrFormat")]
        [DataMember(Name="ErrFormat",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ErrFormat     {
		get { return Format ?? "xml"; }
		set { this.Format = value; }
	}
              /// <summary>
        /// Указание языка для набора multi-language данных 
	    ///<list type='bullet'>
///<item>
///	<term>'uk' </term>
///	<description> -украинский</description>
///</item>
///<item>
///	<term>'ru' </term>
///	<description> -руский </description>
///</item>
///<item>
///	<term>'en' </term>
///	<description> -английский</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 'uk'</para>
///<para>Max length : 3</para>
///<para>Mandatory : Yes</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("lang")]
        [DataMember(Name="lang",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
			[JsonIgnore]
	public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
              /// <summary>
        /// Признак, показывать ли в телефонном справочнике.
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 1</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ext_ShowPhoneDirectory")]
        [DataMember(Name="ext_ShowPhoneDirectory",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? ext_ShowPhoneDirectory  { get; set; } = 1;
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedDate")]
        [DataMember(Name="ModifiedDate",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? ModifiedDate  { get; set; }
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "DATEEND": return DateEnd;
				    case "STATUSMODIFIEDDATE": return StatusModifiedDate;
				    case "MODIFIEDBY": return ModifiedBy;
				    case "MODIFIEDFROM": return ModifiedFrom;
				    case "XMLDATAFORMAT": return XmlDataFormat;
				    case "EXTENTIONID": return ExtentionID;
				    case "EXTERNALID": return ExternalID;
				    case "XMLDATA": return XmlData;
				    case "CATEGORYID": return CategoryID;
				    case "CLASSID": return ClassID;
				    case "STATUSID": return StatusID;
				    case "TYPEID": return TypeID;
				    case "CONNECTIONPOINTID": return ConnectionPointID;
				    case "NUMBERATS": return NumberAts;
				    case "EXTENTIONNUMBER": return ExtentionNumber;
				    case "ISCREATEDWITHTARIFFICATION": return IsCreatedWithTariffication;
				    case "IDTYPE": return IDType;
				    case "REMARK": return Remark;
				    case "DEBUGLEVEL": return DebugLevel;
				    case "DATESTART": return DateStart;
				    case "PARENTID": return ParentID;
				    case "ID": return ID;
				    case "ERRFORMAT": return ErrFormat;
				    case "LANG": return lang;
				    case "EXT_SHOWPHONEDIRECTORY": return ext_ShowPhoneDirectory;
				    case "MODIFIEDDATE": return ModifiedDate;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "DATEEND":if (value == null)DateEnd=null;else DateEnd=Convert.ToDateTime(value);break;
                case "STATUSMODIFIEDDATE":if (value == null)StatusModifiedDate=null;else StatusModifiedDate=Convert.ToDateTime(value);break;
                case "MODIFIEDBY":ModifiedBy=(string)value;break;
                case "MODIFIEDFROM":ModifiedFrom=(string)value;break;
                case "XMLDATAFORMAT":XmlDataFormat=(string)value;break;
                case "EXTENTIONID":if (value == null)ExtentionID=null;else ExtentionID=Convert.ToInt32(value);break;
                case "EXTERNALID":if (value == null)ExternalID=null;else ExternalID=Convert.ToInt32(value);break;
                case "XMLDATA":XmlData=(string)value;break;
                case "CATEGORYID":if (value == null)CategoryID=null;else CategoryID=Convert.ToInt32(value);break;
                case "CLASSID":if (value == null)ClassID=null;else ClassID=Convert.ToInt32(value);break;
                case "STATUSID":if (value == null)StatusID=null;else StatusID=Convert.ToInt32(value);break;
                case "TYPEID":if (value == null)TypeID=null;else TypeID=Convert.ToInt32(value);break;
                case "CONNECTIONPOINTID":if (value == null)ConnectionPointID=null;else ConnectionPointID=Convert.ToInt32(value);break;
                case "NUMBERATS":if (value == null)NumberAts=null;else NumberAts=Convert.ToInt32(value);break;
                case "EXTENTIONNUMBER":ExtentionNumber=(string)value;break;
                case "ISCREATEDWITHTARIFFICATION":if (value == null)IsCreatedWithTariffication=null;else IsCreatedWithTariffication=Convert.ToInt32(value);break;
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                case "REMARK":Remark=(string)value;break;
                case "DEBUGLEVEL":if (value == null)DebugLevel=null;else DebugLevel=Convert.ToInt32(value);break;
                case "DATESTART":if (value == null)DateStart=null;else DateStart=Convert.ToDateTime(value);break;
                case "PARENTID":if (value == null)ParentID=null;else ParentID=Convert.ToInt32(value);break;
                case "ID":if (value == null)ID=null;else ID=Convert.ToInt32(value);break;
                case "ERRFORMAT":ErrFormat=(string)value;break;
                case "LANG":lang=(string)value;break;
                case "EXT_SHOWPHONEDIRECTORY":if (value == null)ext_ShowPhoneDirectory=null;else ext_ShowPhoneDirectory=Convert.ToInt32(value);break;
                case "MODIFIEDDATE":if (value == null)ModifiedDate=null;else ModifiedDate=Convert.ToDateTime(value);break;
                }
            }
		}
		#endregion
	}
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Extentions_Response_SET",Namespace = "")]
	public class Extentions_Response_SET: BaseEntity, IModifiedTag
	{
         #region [Properties]
			/// <summary>
			/// Идентификатор Extentions (Номера MSISDN)
			/// <para/>
			/// Ext_ID
			/// </summary>
			///<remarks>
			///Идентификатор Extentions (Номера MSISDN)
			///</remarks>
			[JsonProperty("ExtentionID")]
			[DataMember(Name="ExtentionID", EmitDefaultValue = false)]
			/*norestr*/

            public global::System.Int32? ExtentionID  { get; set; }
			/// <summary>
			/// Идентификатор исторической связки с абонентом
			/// <para/>
			/// Eab_ID
			/// </summary>
			///<remarks>
			///Идентификатор исторической связки с абонентом
			///</remarks>
			[JsonProperty("ID")]
			[DataMember(Name="ID", EmitDefaultValue = false)]
			/*norestr*/

            public global::System.Int32? ID 	{
		get 
		{ 
			if(emptyId.Equals(this.Id))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.Id, out result))
				return result; 
			else
            {
return 0;
            }
		}
		set { this.Id = value.ToString(); }
	}
			/// <summary>
			/// Указание языка для набора multi-language данных 
			/// <para/>
			/// Lang
			/// </summary>
			///<remarks>
			///Указание языка для набора multi-language данных 
			///</remarks>
			[JsonProperty("lang")]
			[DataMember(Name="lang", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
			[JsonIgnore]
            public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
			/// <summary>
			/// Признак передачи внешнего значения ID
			/// <para/>
			/// IsExternalID
			/// </summary>
			///<remarks>
			///Признак передачи внешнего значения ID
			///</remarks>
			[JsonProperty("IDType")]
			[DataMember(Name="IDType", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
            public global::System.Int32? IDType  { get; set; } = 1;
         #endregion
        [JsonIgnore]
	    public DateTime? If_Modified_Since { get {return null;}}
        #region [IDateModified]
        [JsonIgnore]
	    public DateTime? LastModified { get { return If_Modified_Since;}}
        #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "EXTENTIONID": return ExtentionID;
				    case "ID": return ID;
				    case "LANG": return lang;
				    case "IDTYPE": return IDType;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "EXTENTIONID":if (value == null)ExtentionID=null;else ExtentionID=Convert.ToInt32(value);break;
                case "ID":if (value == null)ID=null;else ID=Convert.ToInt32(value);break;
                case "LANG":lang=(string)value;break;
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                }
            }
		}
		#endregion
    }
#endregion
#region [Gains]
  
    
    ///<remarks>POST &lt;host&gt;[:&lt;port&gt;]/api/v1/bss/customers/[id]/gains
///</remarks>
    ///Customers
    [EntitySubentity("Customers")]

	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Gains_Request_SET",Namespace = "")]
	public class Gains_Request_SET : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// Код причины для идентификации параметров программы лояльности
	    ///<list type='bullet'>
///<item>
///	<term>payment_deferral </term>
///	<description> - обещанный платеж</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ReasonCode")]
        [DataMember(Name="ReasonCode",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ReasonCode  { get; set; }
              /// <summary>
        /// Уникальный код программы лояльности
	    ///<list type='bullet'>
///<item>
///	<term>virtual_payment </term>
///	<description> - обещанный платеж</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ProgrammCode")]
        [DataMember(Name="ProgrammCode",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ProgrammCode  { get; set; }
              /// <summary>
        /// Сумма кредита в валюте по умолчанию, вкл. налоги
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Amount")]
        [DataMember(Name="Amount",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Decimal? Amount  { get; set; }
              /// <summary>
        /// Дата окончания действия программы лояльности
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("DateEnd")]
        [DataMember(Name="DateEnd",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? DateEnd  { get; set; }
              /// <summary>
        /// Дата начала действия программы лояльности
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("DateStart")]
        [DataMember(Name="DateStart",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? DateStart  { get; set; }
              /// <summary>
        /// Дата применения изменений
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("EffectiveDate")]
        [DataMember(Name="EffectiveDate",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? EffectiveDate  { get; set; }
              /// <summary>
        /// Пользователь данного изменения
	    ///<list type='bullet'>
///<item>
///	<term>Username </term>
///	<description> - пользователь из контекста</description>
///</item>
///<item>
///	<term>NULL </term>
///	<description> -если неизвестен</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedBy")]
        [DataMember(Name="ModifiedBy",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedBy  { get; set; }
              /// <summary>
        /// Источник данного изменения
	    ///<list type='bullet'>
///<item>
///	<term>IP </term>
///	<description> -адрес/имя компьютера</description>
///</item>
///<item>
///	<term>NULL </term>
///	<description> - если неизвестен</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedFrom")]
        [DataMember(Name="ModifiedFrom",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedFrom  { get; set; }
              /// <summary>
        /// Тип влияния на баланс суммы по программе лояльности
	    ///<list type='bullet'>
///<item>
///	<term>relative </term>
///	<description> -относительный кредит</description>
///</item>
///<item>
///	<term>absolute </term>
///	<description> -абсолютный кредит</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("TypeCode")]
        [DataMember(Name="TypeCode",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String TypeCode  { get; set; }
              /// <summary>
        /// Комментарий изменения
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Remark")]
        [DataMember(Name="Remark",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Remark  { get; set; }
              /// <summary>
        /// Признак передачи внешнего значения ID
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - внешний ID (для BIS всегда устанавливаем в 1)</description>
///</item>
///<item>
///	<term>0 </term>
///	<description> - внутренний ID</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 1</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("IDType")]
        [DataMember(Name="IDType",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? IDType  { get; set; } = 1;
              /// <summary>
        /// Название сущности REST, для которой выполняется POST операция
	    ///<list type='bullet'>
///<item>
///	<description>Зарезервировано</description>
///</item>
///<item>
///	<description>доступные значения: Customers</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("EntityName")]
        [DataMember(Name="EntityName",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String EntityName { get; set; } = "<empty>";
              /// <summary>
        /// Идентификатор клиента (узла типа Customers)
	    ///<list type='bullet'>
///<item>
///	<description>CLNT_ID из справочника CLIENT_HISTORIES</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("ParentID")]
        [DataMember(Name="ParentID",EmitDefaultValue = false)]
		[JsonRestrictedByValue("<empty>")]

[SecondaryKey("Customers_Request_SET","ID")]/*SET*/
	public global::System.Int32? ParentID 	{
		get 
		{ 
			if(emptyId.Equals(this.ParentId))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.ParentId, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.ParentId = value.ToString(); }
	}
              /// <summary>
        /// Уникальный идентификатор связи Клиента и программы лояльности
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("ID")]
        [DataMember(Name="ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? ID 	{
		get 
		{ 
			if(emptyId.Equals(this.Id))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.Id, out result))
				return result; 
			else
            {
return 0;
            }
		}
		set { this.Id = value.ToString(); }
	}
              /// <summary>
        /// Указание языка для набора multi-language данных 
	    ///<list type='bullet'>
///<item>
///	<term>'uk' </term>
///	<description> -украинский</description>
///</item>
///<item>
///	<term>'ru' </term>
///	<description> -руский </description>
///</item>
///<item>
///	<term>'en' </term>
///	<description> -английский</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 'uk'</para>
///<para>Max length : 3</para>
///<para>Mandatory : Yes</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("lang")]
        [DataMember(Name="lang",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
			[JsonIgnore]
	public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
              /// <summary>
        /// Формат вывода ошибки
	    ///<list type='bullet'>
///<item>
///	<description>'json'</description>
///</item>
///<item>
///	<description>'xml'</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : xml</para>
///<para>Max length : 25</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ErrFormat")]
        [DataMember(Name="ErrFormat",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ErrFormat     {
		get { return Format ?? "xml"; }
		set { this.Format = value; }
	}
              /// <summary>
        /// Порог отключения
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Accr_Break")]
        [DataMember(Name="Accr_Break",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Decimal? Accr_Break  { get; set; }
              /// <summary>
        /// Порог информирования
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Accr_Warning")]
        [DataMember(Name="Accr_Warning",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Decimal? Accr_Warning  { get; set; }
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "REASONCODE": return ReasonCode;
				    case "PROGRAMMCODE": return ProgrammCode;
				    case "AMOUNT": return Amount;
				    case "DATEEND": return DateEnd;
				    case "DATESTART": return DateStart;
				    case "EFFECTIVEDATE": return EffectiveDate;
				    case "MODIFIEDBY": return ModifiedBy;
				    case "MODIFIEDFROM": return ModifiedFrom;
				    case "TYPECODE": return TypeCode;
				    case "REMARK": return Remark;
				    case "IDTYPE": return IDType;
				    case "ENTITYNAME": return EntityName;
				    case "PARENTID": return ParentID;
				    case "ID": return ID;
				    case "LANG": return lang;
				    case "ERRFORMAT": return ErrFormat;
				    case "ACCR_BREAK": return Accr_Break;
				    case "ACCR_WARNING": return Accr_Warning;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "REASONCODE":ReasonCode=(string)value;break;
                case "PROGRAMMCODE":ProgrammCode=(string)value;break;
                case "AMOUNT":if (value == null)Amount=null;else Amount=Convert.ToDecimal(value);break;
                case "DATEEND":if (value == null)DateEnd=null;else DateEnd=Convert.ToDateTime(value);break;
                case "DATESTART":if (value == null)DateStart=null;else DateStart=Convert.ToDateTime(value);break;
                case "EFFECTIVEDATE":if (value == null)EffectiveDate=null;else EffectiveDate=Convert.ToDateTime(value);break;
                case "MODIFIEDBY":ModifiedBy=(string)value;break;
                case "MODIFIEDFROM":ModifiedFrom=(string)value;break;
                case "TYPECODE":TypeCode=(string)value;break;
                case "REMARK":Remark=(string)value;break;
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                case "ENTITYNAME":EntityName=(string)value;break;
                case "PARENTID":if (value == null)ParentID=null;else ParentID=Convert.ToInt32(value);break;
                case "ID":if (value == null)ID=null;else ID=Convert.ToInt32(value);break;
                case "LANG":lang=(string)value;break;
                case "ERRFORMAT":ErrFormat=(string)value;break;
                case "ACCR_BREAK":if (value == null)Accr_Break=null;else Accr_Break=Convert.ToDecimal(value);break;
                case "ACCR_WARNING":if (value == null)Accr_Warning=null;else Accr_Warning=Convert.ToDecimal(value);break;
                }
            }
		}
		#endregion
	}
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Gains_Response_SET",Namespace = "")]
	public class Gains_Response_SET: BaseEntity, IModifiedTag
	{
         #region [Properties]
			/// <summary>
			/// Уникальный идентификатор связи Клиента и программы лояльности
			/// <para/>
			/// Accr_ID
			/// </summary>
			///<remarks>
			///Уникальный идентификатор связи Клиента и программы лояльности
			///</remarks>
			[JsonProperty("ID")]
			[DataMember(Name="ID", EmitDefaultValue = false)]
			/*norestr*/

            public global::System.Int32? ID 	{
		get 
		{ 
			if(emptyId.Equals(this.Id))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.Id, out result))
				return result; 
			else
            {
return 0;
            }
		}
		set { this.Id = value.ToString(); }
	}
			/// <summary>
			/// Признак передачи внешнего значения ID
			/// <para/>
			/// IsExternalID
			/// </summary>
			///<remarks>
			///Признак передачи внешнего значения ID
			///</remarks>
			[JsonProperty("IDType")]
			[DataMember(Name="IDType", EmitDefaultValue = false)]
			/*norestr*/

            public global::System.Int32? IDType  { get; set; } = 1;
			/// <summary>
			/// Указание языка для набора multi-language данных 
			/// <para/>
			/// Lang
			/// </summary>
			///<remarks>
			///Указание языка для набора multi-language данных 
			///</remarks>
			[JsonProperty("lang")]
			[DataMember(Name="lang", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
			[JsonIgnore]
            public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
         #endregion
        [JsonIgnore]
	    public DateTime? If_Modified_Since { get {return null;}}
        #region [IDateModified]
        [JsonIgnore]
	    public DateTime? LastModified { get { return If_Modified_Since;}}
        #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "ID": return ID;
				    case "IDTYPE": return IDType;
				    case "LANG": return lang;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "ID":if (value == null)ID=null;else ID=Convert.ToInt32(value);break;
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                case "LANG":lang=(string)value;break;
                }
            }
		}
		#endregion
    }
#endregion
#region [Memberships]
  
    
    ///<remarks>POST &lt;host&gt;[:&lt;port&gt;]/api/v1/bss/subscribers/[parentid]/memberships
///</remarks>
    ///Subscribers
    [EntitySubentity("Subscribers")]

	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Memberships_Request_SET",Namespace = "")]
	public class Memberships_Request_SET : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// Признак добавлять номера абонента в Закрытую Группу или нет
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - номера будет добавлены</description>
///</item>
///<item>
///	<term>0 </term>
///	<description> - членство абонента будет без его номеров</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("IncludeNumbers")]
        [DataMember(Name="IncludeNumbers",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? IncludeNumbers  { get; set; } = 0;
              /// <summary>
        /// Номер телефона абонента (А-номер)
	    ///<list type='bullet'>
///<item>
///	<description>зарезервировано</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("PhoneNumber")]
        [DataMember(Name="PhoneNumber",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String PhoneNumber  { get; set; }
              /// <summary>
        /// Признак удаления
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - удалить</description>
///</item>
///<item>
///	<term>0 </term>
///	<description> - добавить</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("IsRemoved")]
        [DataMember(Name="IsRemoved",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? IsRemoved  { get; set; }
              /// <summary>
        /// Идентификатор Закрытой абонентской группы
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("GroupID")]
        [DataMember(Name="GroupID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? GroupID  { get; set; }
              /// <summary>
        /// Дата окончания присутствия абонента в группе
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("DateEnd")]
        [DataMember(Name="DateEnd",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? DateEnd  { get; set; }
              /// <summary>
        /// Дата начала присутствия абонента в группе
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("DateStart")]
        [DataMember(Name="DateStart",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? DateStart  { get; set; }
              /// <summary>
        /// Пользователь данного изменения
	    ///<list type='bullet'>
///<item>
///	<term>Username </term>
///	<description> - пользователь из контекста</description>
///</item>
///<item>
///	<term>NULL </term>
///	<description> -если неизвестен</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedBy")]
        [DataMember(Name="ModifiedBy",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedBy  { get; set; }
              /// <summary>
        /// Источник данного изменения
	    ///<list type='bullet'>
///<item>
///	<term>IP </term>
///	<description> -адрес/имя компьютера</description>
///</item>
///<item>
///	<term>NULL </term>
///	<description> - если неизвестен</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedFrom")]
        [DataMember(Name="ModifiedFrom",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedFrom  { get; set; }
              /// <summary>
        /// Признак передачи внешнего значения ID
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - внешний ID (для BIS всегда устанавливаем в 1)</description>
///</item>
///<item>
///	<term>0 </term>
///	<description> - внутренний ID</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 1</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("IDType")]
        [DataMember(Name="IDType",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? IDType  { get; set; } = 1;
              /// <summary>
        /// Название сущности REST, для которой выполняется POST операция
	    ///<list type='bullet'>
///<item>
///	<description>зарезервировано</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("EntityName")]
        [DataMember(Name="EntityName",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String EntityName { get; set; } = "<empty>";
              /// <summary>
        /// Идентификатор Абонента
	    ///<list type='bullet'>
///<item>
///	<description>SUBS_ID из справочника SUBSCRIBERS</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("ParentID")]
        [DataMember(Name="ParentID",EmitDefaultValue = false)]
		[JsonRestrictedByValue("<empty>")]

[SecondaryKey("Subscribers_Request_SET","ID")]/*SET*/
	public global::System.Int32? ParentID 	{
		get 
		{ 
			if(emptyId.Equals(this.ParentId))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.ParentId, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.ParentId = value.ToString(); }
	}
              /// <summary>
        /// Идентификатор исторической записи присутствия абонента в группе
	    ///<list type='bullet'>
///<item>
///	<description>используется для правки</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("ID")]
        [DataMember(Name="ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? ID 	{
		get 
		{ 
			if(emptyId.Equals(this.Id))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.Id, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.Id = value.ToString(); }
	}
              /// <summary>
        /// Формат вывода ошибки
	    ///<list type='bullet'>
///<item>
///	<description>'json'</description>
///</item>
///<item>
///	<description>'xml'</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : xml</para>
///<para>Max length : 25</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ErrFormat")]
        [DataMember(Name="ErrFormat",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ErrFormat     {
		get { return Format ?? "xml"; }
		set { this.Format = value; }
	}
              /// <summary>
        /// Указание языка для набора multi-language данных 
	    ///<list type='bullet'>
///<item>
///	<term>'uk' </term>
///	<description> -украинский</description>
///</item>
///<item>
///	<term>'ru' </term>
///	<description> -руский </description>
///</item>
///<item>
///	<term>'en' </term>
///	<description> -английский</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 'uk'</para>
///<para>Max length : 3</para>
///<para>Mandatory : Yes</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("lang")]
        [DataMember(Name="lang",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
			[JsonIgnore]
	public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
              /// <summary>
        /// Дополнительный код города
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Cds_CityAddCode")]
        [DataMember(Name="Cds_CityAddCode",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Cds_CityAddCode  { get; set; }
              /// <summary>
        /// Код города
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Cds_CityCode")]
        [DataMember(Name="Cds_CityCode",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Cds_CityCode  { get; set; }
              /// <summary>
        /// Код страны
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Cds_CountryCode")]
        [DataMember(Name="Cds_CountryCode",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Cds_CountryCode  { get; set; }
              /// <summary>
        /// Идентификатор кода направления. Связь с Codes
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Cds_ID")]
        [DataMember(Name="Cds_ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? Cds_ID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Cds_Name")]
        [DataMember(Name="Cds_Name",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Cds_Name  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Crg_RegionNameEN")]
        [DataMember(Name="Crg_RegionNameEN",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Crg_RegionNameEN  { get; set; }
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "INCLUDENUMBERS": return IncludeNumbers;
				    case "PHONENUMBER": return PhoneNumber;
				    case "ISREMOVED": return IsRemoved;
				    case "GROUPID": return GroupID;
				    case "DATEEND": return DateEnd;
				    case "DATESTART": return DateStart;
				    case "MODIFIEDBY": return ModifiedBy;
				    case "MODIFIEDFROM": return ModifiedFrom;
				    case "IDTYPE": return IDType;
				    case "ENTITYNAME": return EntityName;
				    case "PARENTID": return ParentID;
				    case "ID": return ID;
				    case "ERRFORMAT": return ErrFormat;
				    case "LANG": return lang;
				    case "CDS_CITYADDCODE": return Cds_CityAddCode;
				    case "CDS_CITYCODE": return Cds_CityCode;
				    case "CDS_COUNTRYCODE": return Cds_CountryCode;
				    case "CDS_ID": return Cds_ID;
				    case "CDS_NAME": return Cds_Name;
				    case "CRG_REGIONNAMEEN": return Crg_RegionNameEN;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "INCLUDENUMBERS":if (value == null)IncludeNumbers=null;else IncludeNumbers=Convert.ToInt32(value);break;
                case "PHONENUMBER":PhoneNumber=(string)value;break;
                case "ISREMOVED":if (value == null)IsRemoved=null;else IsRemoved=Convert.ToInt32(value);break;
                case "GROUPID":if (value == null)GroupID=null;else GroupID=Convert.ToInt32(value);break;
                case "DATEEND":if (value == null)DateEnd=null;else DateEnd=Convert.ToDateTime(value);break;
                case "DATESTART":if (value == null)DateStart=null;else DateStart=Convert.ToDateTime(value);break;
                case "MODIFIEDBY":ModifiedBy=(string)value;break;
                case "MODIFIEDFROM":ModifiedFrom=(string)value;break;
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                case "ENTITYNAME":EntityName=(string)value;break;
                case "PARENTID":if (value == null)ParentID=null;else ParentID=Convert.ToInt32(value);break;
                case "ID":if (value == null)ID=null;else ID=Convert.ToInt32(value);break;
                case "ERRFORMAT":ErrFormat=(string)value;break;
                case "LANG":lang=(string)value;break;
                case "CDS_CITYADDCODE":Cds_CityAddCode=(string)value;break;
                case "CDS_CITYCODE":Cds_CityCode=(string)value;break;
                case "CDS_COUNTRYCODE":Cds_CountryCode=(string)value;break;
                case "CDS_ID":if (value == null)Cds_ID=null;else Cds_ID=Convert.ToInt32(value);break;
                case "CDS_NAME":Cds_Name=(string)value;break;
                case "CRG_REGIONNAMEEN":Crg_RegionNameEN=(string)value;break;
                }
            }
		}
		#endregion
	}
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Memberships_Response_SET",Namespace = "")]
	public class Memberships_Response_SET: BaseEntity, IModifiedTag
	{
         #region [Properties]
			/// <summary>
			/// Идентификатор исторической записи присутствия абонента в группе
			/// <para/>
			/// Crgb_ID
			/// </summary>
			///<remarks>
			///Идентификатор исторической записи присутствия абонента в группе
			///</remarks>
			[JsonProperty("ID")]
			[DataMember(Name="ID", EmitDefaultValue = false)]
			/*norestr*/

            public global::System.Int32? ID 	{
		get 
		{ 
			if(emptyId.Equals(this.Id))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.Id, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.Id = value.ToString(); }
	}
			/// <summary>
			/// Указание языка для набора multi-language данных 
			/// <para/>
			/// Lang
			/// </summary>
			///<remarks>
			///Указание языка для набора multi-language данных 
			///</remarks>
			[JsonProperty("lang")]
			[DataMember(Name="lang", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
			[JsonIgnore]
            public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
			/// <summary>
			/// Идентификатор кода направления. Связь с Codes
			/// <para/>
			/// Cds_ID
			/// </summary>
			///<remarks>
			///Идентификатор кода направления. Связь с Codes
			///</remarks>
			[JsonProperty("Cds_ID")]
			[DataMember(Name="Cds_ID", EmitDefaultValue = false)]
			/*norestr*/

            public global::System.Int32? Cds_ID  { get; set; }
         #endregion
        [JsonIgnore]
	    public DateTime? If_Modified_Since { get {return null;}}
        #region [IDateModified]
        [JsonIgnore]
	    public DateTime? LastModified { get { return If_Modified_Since;}}
        #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "ID": return ID;
				    case "LANG": return lang;
				    case "CDS_ID": return Cds_ID;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "ID":if (value == null)ID=null;else ID=Convert.ToInt32(value);break;
                case "LANG":lang=(string)value;break;
                case "CDS_ID":if (value == null)Cds_ID=null;else Cds_ID=Convert.ToInt32(value);break;
                }
            }
		}
		#endregion
    }
#endregion
#region [Networks]
  
    
    ///<remarks>GET &lt;host&gt;[:&lt;port&gt;]/api/v1/bss/Networks
///</remarks>
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Networks_Request_GET",Namespace = "")]
	public class Networks_Request_GET : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// Идентификатор абонента
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ParentID")]
        [DataMember(Name="ParentID",EmitDefaultValue = false)]
		[JsonRestrictedByValue("<empty>")]

	public global::System.Int32? ParentID 	{
		get 
		{ 
			if(emptyId.Equals(this.ParentId))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.ParentId, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.ParentId = value.ToString(); }
	}
              /// <summary>
        /// Формат вывода ошибки
	    ///<list type='bullet'>
///<item>
///	<description>'json'</description>
///</item>
///<item>
///	<description>'xml'</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : xml</para>
///<para>Max length : 25</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ErrFormat")]
        [DataMember(Name="ErrFormat",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ErrFormat     {
		get { return Format ?? "xml"; }
		set { this.Format = value; }
	}
              /// <summary>
        /// Признак передачи внешнего значения ID
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - внешний ID (для BIS всегда устанавливаем в 1)</description>
///</item>
///<item>
///	<term>0 </term>
///	<description> - внутренний ID</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("IDType")]
        [DataMember(Name="IDType",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? IDType  { get; set; } = 0;
              /// <summary>
        /// Указание языка для набора multi-language данных 
	    ///<list type='bullet'>
///<item>
///	<term>'uk' </term>
///	<description> -украинский</description>
///</item>
///<item>
///	<term>'ru' </term>
///	<description> -руский </description>
///</item>
///<item>
///	<term>'en' </term>
///	<description> -английский</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("lang")]
        [DataMember(Name="lang",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
			[JsonIgnore]
	public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
              /// <summary>
        /// Идентификатор стандарта
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ID")]
        [DataMember(Name="ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? ID 	{
		get 
		{ 
			if(emptyId.Equals(this.Id))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.Id, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.Id = value.ToString(); }
	}
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("NetworkName")]
        [DataMember(Name="NetworkName",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String NetworkName  { get; set; }
              /// <summary>
        /// Номер страницы (server paging)
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 1</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("PageIndex")]
        [DataMember(Name="PageIndex",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? PageIndex  { get; set; } = 1;
              /// <summary>
        /// Кол-во записей на странице (server paging)
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 50</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("PageSize")]
        [DataMember(Name="PageSize",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? PageSize  { get; set; } = 50;
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "PARENTID": return ParentID;
				    case "ERRFORMAT": return ErrFormat;
				    case "IDTYPE": return IDType;
				    case "LANG": return lang;
				    case "ID": return ID;
				    case "NETWORKNAME": return NetworkName;
				    case "PAGEINDEX": return PageIndex;
				    case "PAGESIZE": return PageSize;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "PARENTID":if (value == null)ParentID=null;else ParentID=Convert.ToInt32(value);break;
                case "ERRFORMAT":ErrFormat=(string)value;break;
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                case "LANG":lang=(string)value;break;
                case "ID":if (value == null)ID=null;else ID=Convert.ToInt32(value);break;
                case "NETWORKNAME":NetworkName=(string)value;break;
                case "PAGEINDEX":if (value == null)PageIndex=null;else PageIndex=Convert.ToInt32(value);break;
                case "PAGESIZE":if (value == null)PageSize=null;else PageSize=Convert.ToInt32(value);break;
                }
            }
		}
		#endregion
	}
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Networks_Response_GET",Namespace = "")]
	public class Networks_Response_GET: BaseEntity, IModifiedTag
	{
         #region [Properties]
			/// <summary>
			/// Признак передачи внешнего значения ID
			/// <para/>
			/// IsExternalID
			/// </summary>
			///<remarks>
			///Признак передачи внешнего значения ID
			///</remarks>
			[JsonProperty("IDType")]
			[DataMember(Name="IDType", EmitDefaultValue = false)]
			/*norestr*/

            public global::System.Int32? IDType  { get; set; } = 0;
			/// <summary>
			/// Указание языка для набора multi-language данных 
			/// <para/>
			/// Lang
			/// </summary>
			///<remarks>
			///Указание языка для набора multi-language данных 
			///</remarks>
			[JsonProperty("lang")]
			[DataMember(Name="lang", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
			[JsonIgnore]
            public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
         #endregion
        [JsonIgnore]
	    public DateTime? If_Modified_Since { get {return null;}}
        #region [IDateModified]
        [JsonIgnore]
	    public DateTime? LastModified { get { return If_Modified_Since;}}
        #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "IDTYPE": return IDType;
				    case "LANG": return lang;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                case "LANG":lang=(string)value;break;
                }
            }
		}
		#endregion
    }
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Networks_Response_GET_OUTPUT",Namespace = "")]
	public class Networks_Response_GET_OUTPUT : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("NameATS")]
        [DataMember(Name="NameATS",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String NameATS  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("NetworkExternalID")]
        [DataMember(Name="NetworkExternalID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? NetworkExternalID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("NetworkID")]
        [DataMember(Name="NetworkID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? NetworkID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("NetworkName")]
        [DataMember(Name="NetworkName",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String NetworkName  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("NumberATS")]
        [DataMember(Name="NumberATS",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? NumberATS  { get; set; }
              /// <summary>
        /// Признак передачи внешнего значения ID
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - внешний ID (для BIS всегда устанавливаем в 1)</description>
///</item>
///<item>
///	<term>0 </term>
///	<description> - внутренний ID</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("IDType")]
        [DataMember(Name="IDType",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? IDType  { get; set; }
              /// <summary>
        /// Указание языка для набора multi-language данных 
	    ///<list type='bullet'>
///<item>
///	<term>'uk' </term>
///	<description> -украинский</description>
///</item>
///<item>
///	<term>'ru' </term>
///	<description> -руский </description>
///</item>
///<item>
///	<term>'en' </term>
///	<description> -английский</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("lang")]
        [DataMember(Name="lang",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
			[JsonIgnore]
	public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "NAMEATS": return NameATS;
				    case "NETWORKEXTERNALID": return NetworkExternalID;
				    case "NETWORKID": return NetworkID;
				    case "NETWORKNAME": return NetworkName;
				    case "NUMBERATS": return NumberATS;
				    case "IDTYPE": return IDType;
				    case "LANG": return lang;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "NAMEATS":NameATS=(string)value;break;
                case "NETWORKEXTERNALID":if (value == null)NetworkExternalID=null;else NetworkExternalID=Convert.ToInt32(value);break;
                case "NETWORKID":if (value == null)NetworkID=null;else NetworkID=Convert.ToInt32(value);break;
                case "NETWORKNAME":NetworkName=(string)value;break;
                case "NUMBERATS":if (value == null)NumberATS=null;else NumberATS=Convert.ToInt32(value);break;
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                case "LANG":lang=(string)value;break;
                }
            }
		}
		#endregion
	}
#endregion
#region [Networks/ClearLogins]

	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Networks_ClearLogins_Request_ACTION",Namespace = "")]
	public class Networks_ClearLogins_Request_ACTION : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// Формат вывода ошибки
	    ///<list type='bullet'>
///<item>
///	<description>'json'</description>
///</item>
///<item>
///	<description>'xml'</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : xml</para>
///<para>Max length : 25</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ErrFormat")]
        [DataMember(Name="ErrFormat",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ErrFormat     {
		get { return Format ?? "xml"; }
		set { this.Format = value; }
	}
              /// <summary>
        /// Идентификатор стандарта
	    ///<list type='bullet'>
///<item>
///	<description>STND_ID из справочника STANDARTS</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("ID")]
        [DataMember(Name="ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? ID 	{
		get 
		{ 
			if(emptyId.Equals(this.Id))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.Id, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.Id = value.ToString(); }
	}
              /// <summary>
        /// Указание языка для набора multi-language данных 
	    ///<list type='bullet'>
///<item>
///	<term>'uk' </term>
///	<description> -украинский</description>
///</item>
///<item>
///	<term>'ru' </term>
///	<description> -руский </description>
///</item>
///<item>
///	<term>'en' </term>
///	<description> -английский</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("lang")]
        [DataMember(Name="lang",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
			[JsonIgnore]
	public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
              /// <summary>
        /// Пользователь данного изменения
	    ///<list type='bullet'>
///<item>
///	<term>Username </term>
///	<description> - пользователь из контекста</description>
///</item>
///<item>
///	<term>NULL </term>
///	<description> -если неизвестен</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedBy")]
        [DataMember(Name="ModifiedBy",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedBy  { get; set; }
              /// <summary>
        /// Источник данного изменения
	    ///<list type='bullet'>
///<item>
///	<term>IP </term>
///	<description> -адрес/имя компьютера</description>
///</item>
///<item>
///	<term>NULL </term>
///	<description> - если неизвестен</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedFrom")]
        [DataMember(Name="ModifiedFrom",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedFrom  { get; set; }
              /// <summary>
        /// Название атрибута таблицы Abonents в качестве нового значения логина
	    ///<list type='bullet'>
///<item>
///	<description>abn_ID</description>
///</item>
///<item>
///	<description>abn_Guid</description>
///</item>
///<item>
///	<description>abn_Employee_ID</description>
///</item>
///<item>
///	<description>abn_Employe_Export_ID</description>
///</item>
///<item>
///	<description>abn_WorkPlace</description>
///</item>
///<item>
///	<description>abn_ExternalID</description>
///</item>
///<item>
///	<description>abn_AnonimousName</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("NewLoginSource")]
        [DataMember(Name="NewLoginSource",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String NewLoginSource  { get; set; }
              /// <summary>
        /// Новое значение пароля
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("NewPassword")]
        [DataMember(Name="NewPassword",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String NewPassword  { get; set; }
              /// <summary>
        /// Регулярное выражение отбора значений логина для очистки
	    ///<list type='bullet'>
///<item>
///	<description>для очистки портов на коммутаторе 00e0b1d61c84 выражение равно ^.{20}00e0b1d61c84$</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("RegExpValue")]
        [DataMember(Name="RegExpValue",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String RegExpValue  { get; set; }
              /// <summary>
        /// Комментарий изменения
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Remark")]
        [DataMember(Name="Remark",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Remark  { get; set; }
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "ERRFORMAT": return ErrFormat;
				    case "ID": return ID;
				    case "LANG": return lang;
				    case "MODIFIEDBY": return ModifiedBy;
				    case "MODIFIEDFROM": return ModifiedFrom;
				    case "NEWLOGINSOURCE": return NewLoginSource;
				    case "NEWPASSWORD": return NewPassword;
				    case "REGEXPVALUE": return RegExpValue;
				    case "REMARK": return Remark;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "ERRFORMAT":ErrFormat=(string)value;break;
                case "ID":if (value == null)ID=null;else ID=Convert.ToInt32(value);break;
                case "LANG":lang=(string)value;break;
                case "MODIFIEDBY":ModifiedBy=(string)value;break;
                case "MODIFIEDFROM":ModifiedFrom=(string)value;break;
                case "NEWLOGINSOURCE":NewLoginSource=(string)value;break;
                case "NEWPASSWORD":NewPassword=(string)value;break;
                case "REGEXPVALUE":RegExpValue=(string)value;break;
                case "REMARK":Remark=(string)value;break;
                }
            }
		}
		#endregion
	}
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Networks_ClearLogins_Response_ACTION",Namespace = "")]
	public class Networks_ClearLogins_Response_ACTION: BaseEntity, IModifiedTag
	{
         #region [Properties]
			/// <summary>
			/// Кол-во измененных абонентов
			/// <para/>
			/// UpdatedAbnCount
			/// </summary>
			///<remarks>
			///Кол-во измененных абонентов
			///</remarks>
			[JsonProperty("AffectedCount")]
			[DataMember(Name="AffectedCount", EmitDefaultValue = false)]
			/*norestr*/

            public global::System.Int32? AffectedCount  { get; set; }
			/// <summary>
			/// Указание языка для набора multi-language данных 
			/// <para/>
			/// Lang
			/// </summary>
			///<remarks>
			///Указание языка для набора multi-language данных 
			///</remarks>
			[JsonProperty("lang")]
			[DataMember(Name="lang", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
			[JsonIgnore]
            public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
         #endregion
        [JsonIgnore]
	    public DateTime? If_Modified_Since { get {return null;}}
        #region [IDateModified]
        [JsonIgnore]
	    public DateTime? LastModified { get { return If_Modified_Since;}}
        #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                }
            }
		}
		#endregion
    }
#endregion
#region [PaymentDocuments]
  
    
    ///<remarks>POST &lt;host&gt;[:&lt;port&gt;]/api/v1/bss/accounts/[parentid]/paymentdocuments
///</remarks>
    ///Accounts
    [EntitySubentity("Accounts")]

	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="PaymentDocuments_Request_SET",Namespace = "")]
	public class PaymentDocuments_Request_SET : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// Дата платежа из внешней системы (фактическая дата)
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("PayDate")]
        [DataMember(Name="PayDate",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? PayDate  { get; set; }
              /// <summary>
        /// Дата реестра (для кассовых) или выписки (для безналичных платежных документов)банквоской
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ReestrDate")]
        [DataMember(Name="ReestrDate",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? ReestrDate  { get; set; }
              /// <summary>
        /// Дата аннулирования платежного документа
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("AnnulDate")]
        [DataMember(Name="AnnulDate",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? AnnulDate  { get; set; }
              /// <summary>
        /// Дата проведения платежного документа во внешней системе (отсутствие значения говорит об отсутствии во внешней системе)
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ExportedDate")]
        [DataMember(Name="ExportedDate",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? ExportedDate  { get; set; }
              /// <summary>
        /// Признак необходимости разнесения платежного документа на платежи по лицевому счету (1- разнести, 0 - не разносить)
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - разносить</description>
///</item>
///<item>
///	<term>0 </term>
///	<description> - нет (MOVED из RECEIPTS и PAY_DOCS)</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : Yes</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Moved")]
        [DataMember(Name="Moved",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? Moved  { get; set; } = 0;
              /// <summary>
        /// Признак необходимости аннулирования платежного документа (1 - аннулировать, 0 - нет)
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Annul")]
        [DataMember(Name="Annul",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? Annul  { get; set; } = 0;
              /// <summary>
        /// Внешний ID для реестра
	    ///<list type='bullet'>
///<item>
///	<description>RSTR_ID из справочника REESTRES</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ReestrID")]
        [DataMember(Name="ReestrID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? ReestrID  { get; set; }
              /// <summary>
        /// Внешний ID для банка
	    ///<list type='bullet'>
///<item>
///	<description>BANK_ID из справочника BANKS</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("BankID")]
        [DataMember(Name="BankID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? BankID  { get; set; }
              /// <summary>
        /// Внешний ID для кассы
	    ///<list type='bullet'>
///<item>
///	<description>KASS_ID из справочника KASSAS</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("KassaID")]
        [DataMember(Name="KassaID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? KassaID  { get; set; }
              /// <summary>
        /// Филиал
	    ///<list type='bullet'>
///<item>
///	<description>BRNC_ID из справочника BRANCHES</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("LocationID")]
        [DataMember(Name="LocationID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? LocationID  { get; set; }
              /// <summary>
        /// Класс платежа 
	    ///<list type='bullet'>
///<item>
///	<term>2 </term>
///	<description> - Авансовый платеж и т.д. (справочник PAY_CLASSES)</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("PayClass")]
        [DataMember(Name="PayClass",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? PayClass  { get; set; }
              /// <summary>
        /// Номер реестра (для кассовых) или банковской выписки (для безналичных платежных документов)
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ReestrNumber")]
        [DataMember(Name="ReestrNumber",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ReestrNumber  { get; set; }
              /// <summary>
        /// Номер лицевого счета
	    ///<list type='bullet'>
///<item>
///	<description>ACCOUNT из справочника CLIENT_HISTORIES</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("AccountNumber")]
        [DataMember(Name="AccountNumber",EmitDefaultValue = false)]
		/*norestr*/

[SecondaryKey("Accounts_Request_SET","Number")]/*SET*/
	public global::System.String AccountNumber  { get; set; }
              /// <summary>
        /// Кем аннулирован платеж (имя пользователя из контекста приложения)
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("AnnulBy")]
        [DataMember(Name="AnnulBy",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String AnnulBy  { get; set; }
              /// <summary>
        /// Идентификатор Платежного интерфейса 
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - Кассовый</description>
///</item>
///<item>
///	<term>2 </term>
///	<description> - Банковский и т.д. (справочник PAY_INTERFACE)</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("PayInterfaceID")]
        [DataMember(Name="PayInterfaceID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? PayInterfaceID  { get; set; }
              /// <summary>
        /// Код валюты платежного документа
	    ///<list type='bullet'>
///<item>
///	<description>UAH (Справочник Currencies)</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("CurrencyCode")]
        [DataMember(Name="CurrencyCode",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String CurrencyCode  { get; set; }
              /// <summary>
        /// Комментарий к документу или причины аннулирования
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Remark")]
        [DataMember(Name="Remark",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String Remark  { get; set; }
              /// <summary>
        /// Признак передачи внешнего значения ID
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - внешний ID (для BIS всегда устанавливаем в 1)</description>
///</item>
///<item>
///	<term>0 </term>
///	<description> - внутренний ID</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 1</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("IDType")]
        [DataMember(Name="IDType",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? IDType  { get; set; } = 1;
              /// <summary>
        /// Сумма платежного документа
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Amount")]
        [DataMember(Name="Amount",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Decimal? Amount  { get; set; }
              /// <summary>
        /// Дата проведения платежа в системе
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("EffectiveDate")]
        [DataMember(Name="EffectiveDate",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? EffectiveDate  { get; set; }
              /// <summary>
        /// Пользователь данного изменения
	    ///<list type='bullet'>
///<item>
///	<term>Username </term>
///	<description> - пользователь из контекста</description>
///</item>
///<item>
///	<term>NULL </term>
///	<description> -если неизвестен</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedBy")]
        [DataMember(Name="ModifiedBy",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedBy  { get; set; }
              /// <summary>
        /// Источник данного изменения
	    ///<list type='bullet'>
///<item>
///	<term>IP </term>
///	<description> -адрес/имя компьютера</description>
///</item>
///<item>
///	<term>NULL </term>
///	<description> - если неизвестен</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedFrom")]
        [DataMember(Name="ModifiedFrom",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedFrom  { get; set; }
              /// <summary>
        /// Номер абонента (MSISDN)
	    ///<list type='bullet'>
///<item>
///	<description>MSISDN из справочника NUMBER_SETS</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ExtentionNumber")]
        [DataMember(Name="ExtentionNumber",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ExtentionNumber  { get; set; }
              /// <summary>
        /// Идентификатор расчетного банковского счета (для безналичніх платежных документов)
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("BankAccountID")]
        [DataMember(Name="BankAccountID",EmitDefaultValue = false)]
		/*norestr*/

[SecondaryKey("BankDetails_Request_SET","BankAccountID")]/*SET*/
	public global::System.Int32? BankAccountID  { get; set; }
              /// <summary>
        /// Код диллера
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("DealerId")]
        [DataMember(Name="DealerId",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? DealerId  { get; set; }
              /// <summary>
        /// Номер платежного документа (номер чека или платежки)
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("PayDocNumber")]
        [DataMember(Name="PayDocNumber",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String PayDocNumber  { get; set; }
              /// <summary>
        /// Идентификатор Документа из внешней системы 
	    ///<list type='bullet'>
///<item>
///	<description>DOC_ID из PAY_DOCS</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ExportID")]
        [DataMember(Name="ExportID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? ExportID  { get; set; }
              /// <summary>
        /// Код внешней системы
	    ///<list type='bullet'>
///<item>
///	<description>зарезервировано</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Header
        /// </remarks>
        [JsonProperty("System")]
        [DataMember(Name="System",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String System  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Header
        /// </remarks>
        [JsonProperty("cacheStatus")]
        [DataMember(Name="cacheStatus",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String cacheStatus  { get; set; }
              /// <summary>
        /// Уникальный идентификатор платежного документа в спец. формате (20 символов), включающем в себя код системы, генерирующий платежный документ
	    ///<list type='bullet'>
///<item>
///	<term>20 символов (включающих в себя код системы </term>
///	<description> -инициатора платежа)</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Header
        /// </remarks>
        [JsonProperty("global_unique_id")]
        [DataMember(Name="global_unique_id",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String global_unique_id  { get; set; }
              /// <summary>
        /// Уникальный идентификатор платежного документа в спец. формате (20 символов), включающем в себя код системы, генерирующий платежный документ
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : '0'</para>
///<para>Max length : 20</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("ID")]
        [DataMember(Name="ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ID 	{
		get {{ return string.IsNullOrEmpty(this.Id)?"0":this.Id;}}
		set {{ this.Id = value; }}
	}
              /// <summary>
        /// Идентификатор лицевого счета (соответствует CustomerID)
	    ///<list type='bullet'>
///<item>
///	<description>CLNT_ID из справочника CLIENT_HISTORIES</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("ParentID")]
        [DataMember(Name="ParentID",EmitDefaultValue = false)]
		[JsonRestrictedByValue("<empty>")]

[SecondaryKey("Accounts_Request_SET","ID")]/*SET*/
	public global::System.Int32? ParentID 	{
		get 
		{ 
			if(emptyId.Equals(this.ParentId))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.ParentId, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.ParentId = value.ToString(); }
	}
              /// <summary>
        /// Название сущности REST, для которой выполняется POST операция
	    ///<list type='bullet'>
///<item>
///	<description>зарезервировано</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("EntityName")]
        [DataMember(Name="EntityName",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String EntityName { get; set; } = "<empty>";
    //Base Attrribute '' skipped
          /// <summary>
        /// Формат вывода ошибки
	    ///<list type='bullet'>
///<item>
///	<description>'json'</description>
///</item>
///<item>
///	<description>'xml'</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : xml</para>
///<para>Max length : 25</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ErrFormat")]
        [DataMember(Name="ErrFormat",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ErrFormat     {
		get { return Format ?? "xml"; }
		set { this.Format = value; }
	}
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "PAYDATE": return PayDate;
				    case "REESTRDATE": return ReestrDate;
				    case "ANNULDATE": return AnnulDate;
				    case "EXPORTEDDATE": return ExportedDate;
				    case "MOVED": return Moved;
				    case "ANNUL": return Annul;
				    case "REESTRID": return ReestrID;
				    case "BANKID": return BankID;
				    case "KASSAID": return KassaID;
				    case "LOCATIONID": return LocationID;
				    case "PAYCLASS": return PayClass;
				    case "REESTRNUMBER": return ReestrNumber;
				    case "ACCOUNTNUMBER": return AccountNumber;
				    case "ANNULBY": return AnnulBy;
				    case "PAYINTERFACEID": return PayInterfaceID;
				    case "CURRENCYCODE": return CurrencyCode;
				    case "REMARK": return Remark;
				    case "IDTYPE": return IDType;
				    case "AMOUNT": return Amount;
				    case "EFFECTIVEDATE": return EffectiveDate;
				    case "MODIFIEDBY": return ModifiedBy;
				    case "MODIFIEDFROM": return ModifiedFrom;
				    case "EXTENTIONNUMBER": return ExtentionNumber;
				    case "BANKACCOUNTID": return BankAccountID;
				    case "DEALERID": return DealerId;
				    case "PAYDOCNUMBER": return PayDocNumber;
				    case "EXPORTID": return ExportID;
				    case "SYSTEM": return System;
				    case "CACHESTATUS": return cacheStatus;
				    case "GLOBAL_UNIQUE_ID": return global_unique_id;
				    case "ID": return ID;
				    case "PARENTID": return ParentID;
				    case "ENTITYNAME": return EntityName;
				    case "LANG": return Lang;
				    case "ERRFORMAT": return ErrFormat;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "PAYDATE":if (value == null)PayDate=null;else PayDate=Convert.ToDateTime(value);break;
                case "REESTRDATE":if (value == null)ReestrDate=null;else ReestrDate=Convert.ToDateTime(value);break;
                case "ANNULDATE":if (value == null)AnnulDate=null;else AnnulDate=Convert.ToDateTime(value);break;
                case "EXPORTEDDATE":if (value == null)ExportedDate=null;else ExportedDate=Convert.ToDateTime(value);break;
                case "MOVED":if (value == null)Moved=null;else Moved=Convert.ToInt32(value);break;
                case "ANNUL":if (value == null)Annul=null;else Annul=Convert.ToInt32(value);break;
                case "REESTRID":if (value == null)ReestrID=null;else ReestrID=Convert.ToInt32(value);break;
                case "BANKID":if (value == null)BankID=null;else BankID=Convert.ToInt32(value);break;
                case "KASSAID":if (value == null)KassaID=null;else KassaID=Convert.ToInt32(value);break;
                case "LOCATIONID":if (value == null)LocationID=null;else LocationID=Convert.ToInt32(value);break;
                case "PAYCLASS":if (value == null)PayClass=null;else PayClass=Convert.ToInt32(value);break;
                case "REESTRNUMBER":ReestrNumber=(string)value;break;
                case "ACCOUNTNUMBER":AccountNumber=(string)value;break;
                case "ANNULBY":AnnulBy=(string)value;break;
                case "PAYINTERFACEID":if (value == null)PayInterfaceID=null;else PayInterfaceID=Convert.ToInt32(value);break;
                case "CURRENCYCODE":CurrencyCode=(string)value;break;
                case "REMARK":Remark=(string)value;break;
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                case "AMOUNT":if (value == null)Amount=null;else Amount=Convert.ToDecimal(value);break;
                case "EFFECTIVEDATE":if (value == null)EffectiveDate=null;else EffectiveDate=Convert.ToDateTime(value);break;
                case "MODIFIEDBY":ModifiedBy=(string)value;break;
                case "MODIFIEDFROM":ModifiedFrom=(string)value;break;
                case "EXTENTIONNUMBER":ExtentionNumber=(string)value;break;
                case "BANKACCOUNTID":if (value == null)BankAccountID=null;else BankAccountID=Convert.ToInt32(value);break;
                case "DEALERID":if (value == null)DealerId=null;else DealerId=Convert.ToInt32(value);break;
                case "PAYDOCNUMBER":PayDocNumber=(string)value;break;
                case "EXPORTID":if (value == null)ExportID=null;else ExportID=Convert.ToInt32(value);break;
                case "SYSTEM":System=(string)value;break;
                case "CACHESTATUS":cacheStatus=(string)value;break;
                case "GLOBAL_UNIQUE_ID":global_unique_id=(string)value;break;
                case "ID":ID=(string)value;break;
                case "PARENTID":if (value == null)ParentID=null;else ParentID=Convert.ToInt32(value);break;
                case "ENTITYNAME":EntityName=(string)value;break;
                case "LANG":Lang=(string)value;break;
                case "ERRFORMAT":ErrFormat=(string)value;break;
                }
            }
		}
		#endregion
	}
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="PaymentDocuments_Response_SET",Namespace = "")]
	public class PaymentDocuments_Response_SET: BaseEntity, IModifiedTag
	{
         #region [Properties]
			/// <summary>
			/// Уникальный идентификатор платежного документа в спец. формате (20 символов), включающем в себя код системы, генерирующий платежный документ
			/// <para/>
			/// Cpd_ExternalID
			/// </summary>
			///<remarks>
			///Уникальный идентификатор платежного документа в спец. формате (20 символов), включающем в себя код системы, генерирующий платежный документ
			///</remarks>
			[JsonProperty("global_unique_id")]
			[DataMember(Name="global_unique_id", EmitDefaultValue = false)]
			/*norestr*/

            public global::System.String global_unique_id  { get; set; } = "0";
//Base Attrribute '' skipped
			/// <summary>
			/// Уникальный идентификатор платежного документа в спец. формате (15 символов), включающем в себя код системы, генерирующий платежный документ
			/// <para/>
			/// ID
			/// </summary>
			///<remarks>
			///Уникальный идентификатор платежного документа в спец. формате (15 символов), включающем в себя код системы, генерирующий платежный документ
			///</remarks>
			[JsonProperty("ID")]
			[DataMember(Name="ID", EmitDefaultValue = false)]
			/*norestr*/

            public global::System.String ID 	{
		get {{ return string.IsNullOrEmpty(this.Id)?"0":this.Id;}}
		set {{ this.Id = value; }}
	}
         #endregion
        [JsonIgnore]
	    public DateTime? If_Modified_Since { get {return null;}}
        #region [IDateModified]
        [JsonIgnore]
	    public DateTime? LastModified { get { return If_Modified_Since;}}
        #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "GLOBAL_UNIQUE_ID": return global_unique_id;
				    case "LANG": return Lang;
				    case "ID": return ID;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "GLOBAL_UNIQUE_ID":global_unique_id=(string)value;break;
                case "LANG":Lang=(string)value;break;
                case "ID":ID=(string)value;break;
                }
            }
		}
		#endregion
    }
#endregion
#region [PaymentRegistry]
  
    
    ///<remarks>GET &lt;host&gt;[:&lt;port&gt;]/api/v1/bss/PaymentRegistry
///</remarks>
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="PaymentRegistry_Request_GET",Namespace = "")]
	public class PaymentRegistry_Request_GET : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ParentID")]
        [DataMember(Name="ParentID",EmitDefaultValue = false)]
		[JsonRestrictedByValue("<empty>")]

	public global::System.Int32? ParentID 	{
		get 
		{ 
			if(emptyId.Equals(this.ParentId))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.ParentId, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.ParentId = value.ToString(); }
	}
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("bnk_ID")]
        [DataMember(Name="bnk_ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? bnk_ID  { get; set; }
              /// <summary>
        /// дата активации
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("EffectiveDate")]
        [DataMember(Name="EffectiveDate",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? EffectiveDate  { get; set; }
              /// <summary>
        /// Формат вывода ошибки
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : xml</para>
///<para>Max length : 25</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ErrFormat")]
        [DataMember(Name="ErrFormat",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ErrFormat     {
		get { return Format ?? "xml"; }
		set { this.Format = value; }
	}
              /// <summary>
        /// Признак передачи внешнего значения ID
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("IDType")]
        [DataMember(Name="IDType",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? IDType  { get; set; } = 0;
              /// <summary>
        /// Указание языка для набора multi-language данных 
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("lang")]
        [DataMember(Name="lang",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
			[JsonIgnore]
	public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("pre_ExternalID")]
        [DataMember(Name="pre_ExternalID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? pre_ExternalID  { get; set; }
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "PARENTID": return ParentID;
				    case "BNK_ID": return bnk_ID;
				    case "EFFECTIVEDATE": return EffectiveDate;
				    case "ERRFORMAT": return ErrFormat;
				    case "IDTYPE": return IDType;
				    case "LANG": return lang;
				    case "PRE_EXTERNALID": return pre_ExternalID;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "PARENTID":if (value == null)ParentID=null;else ParentID=Convert.ToInt32(value);break;
                case "BNK_ID":if (value == null)bnk_ID=null;else bnk_ID=Convert.ToInt32(value);break;
                case "EFFECTIVEDATE":if (value == null)EffectiveDate=null;else EffectiveDate=Convert.ToDateTime(value);break;
                case "ERRFORMAT":ErrFormat=(string)value;break;
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                case "LANG":lang=(string)value;break;
                case "PRE_EXTERNALID":if (value == null)pre_ExternalID=null;else pre_ExternalID=Convert.ToInt32(value);break;
                }
            }
		}
		#endregion
	}
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="PaymentRegistry_Response_GET",Namespace = "")]
	public class PaymentRegistry_Response_GET: BaseEntity, IModifiedTag
	{
         #region [Properties]
			/// <summary>
			/// Указание языка для набора multi-language данных 
			/// <para/>
			/// Lang
			/// </summary>
			///<remarks>
			///Указание языка для набора multi-language данных 
			///</remarks>
			[JsonProperty("lang")]
			[DataMember(Name="lang", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
			[JsonIgnore]
            public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
         #endregion
        [JsonIgnore]
	    public DateTime? If_Modified_Since { get {return null;}}
        #region [IDateModified]
        [JsonIgnore]
	    public DateTime? LastModified { get { return If_Modified_Since;}}
        #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "LANG": return lang;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "LANG":lang=(string)value;break;
                }
            }
		}
		#endregion
    }
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="PaymentRegistry_Response_GET_OUTPUT",Namespace = "")]
	public class PaymentRegistry_Response_GET_OUTPUT : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("pre_ExternalID")]
        [DataMember(Name="pre_ExternalID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? pre_ExternalID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("pre_DateReestr")]
        [DataMember(Name="pre_DateReestr",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.DateTime? pre_DateReestr  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ID")]
        [DataMember(Name="ID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? ID 	{
		get 
		{ 
			if(emptyId.Equals(this.Id))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.Id, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.Id = value.ToString(); }
	}
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("pre_NumReestr")]
        [DataMember(Name="pre_NumReestr",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String pre_NumReestr  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("bac_ID")]
        [DataMember(Name="bac_ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? bac_ID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("bnk_ID")]
        [DataMember(Name="bnk_ID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? bnk_ID  { get; set; }
              /// <summary>
        /// Указание языка для набора multi-language данных 
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("lang")]
        [DataMember(Name="lang",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
			[JsonIgnore]
	public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "PRE_EXTERNALID": return pre_ExternalID;
				    case "PRE_DATEREESTR": return pre_DateReestr;
				    case "ID": return ID;
				    case "PRE_NUMREESTR": return pre_NumReestr;
				    case "BAC_ID": return bac_ID;
				    case "BNK_ID": return bnk_ID;
				    case "LANG": return lang;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "PRE_EXTERNALID":if (value == null)pre_ExternalID=null;else pre_ExternalID=Convert.ToInt32(value);break;
                case "PRE_DATEREESTR":if (value == null)pre_DateReestr=null;else pre_DateReestr=Convert.ToDateTime(value);break;
                case "ID":if (value == null)ID=null;else ID=Convert.ToInt32(value);break;
                case "PRE_NUMREESTR":pre_NumReestr=(string)value;break;
                case "BAC_ID":if (value == null)bac_ID=null;else bac_ID=Convert.ToInt32(value);break;
                case "BNK_ID":if (value == null)bnk_ID=null;else bnk_ID=Convert.ToInt32(value);break;
                case "LANG":lang=(string)value;break;
                }
            }
		}
		#endregion
	}
  
    
    ///<remarks>POST &lt;host&gt;[:&lt;port&gt;]/api/v1/bss/paymentregistry
///</remarks>
    ///BankAccounts
    [EntitySubentity("BankAccounts")]

	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="PaymentRegistry_Request_SET",Namespace = "")]
	public class PaymentRegistry_Request_SET : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ParentID")]
        [DataMember(Name="ParentID",EmitDefaultValue = false)]
		[JsonRestrictedByValue("<empty>")]

	public global::System.Int32? ParentID 	{
		get 
		{ 
			if(emptyId.Equals(this.ParentId))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.ParentId, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.ParentId = value.ToString(); }
	}
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("crn_CodeISO")]
        [DataMember(Name="crn_CodeISO",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String crn_CodeISO  { get; set; }
              /// <summary>
        /// Пользователь данного изменения
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedBy")]
        [DataMember(Name="ModifiedBy",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedBy  { get; set; }
              /// <summary>
        /// Источник данного изменения
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedFrom")]
        [DataMember(Name="ModifiedFrom",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedFrom  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("pre_DateReestr")]
        [DataMember(Name="pre_DateReestr",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? pre_DateReestr  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("pre_ExternalID")]
        [DataMember(Name="pre_ExternalID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? pre_ExternalID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ID")]
        [DataMember(Name="ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? ID 	{
		get 
		{ 
			if(emptyId.Equals(this.Id))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.Id, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.Id = value.ToString(); }
	}
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("pre_NumReestr")]
        [DataMember(Name="pre_NumReestr",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String pre_NumReestr  { get; set; }
              /// <summary>
        /// Признак передачи внешнего значения ID
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("IDType")]
        [DataMember(Name="IDType",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? IDType  { get; set; } = 0;
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("bnk_ID")]
        [DataMember(Name="bnk_ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? bnk_ID  { get; set; }
              /// <summary>
        /// Формат вывода ошибки
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : xml</para>
///<para>Max length : 25</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ErrFormat")]
        [DataMember(Name="ErrFormat",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ErrFormat     {
		get { return Format ?? "xml"; }
		set { this.Format = value; }
	}
              /// <summary>
        /// Указание языка для набора multi-language данных 
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("lang")]
        [DataMember(Name="lang",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
			[JsonIgnore]
	public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "PARENTID": return ParentID;
				    case "CRN_CODEISO": return crn_CodeISO;
				    case "MODIFIEDBY": return ModifiedBy;
				    case "MODIFIEDFROM": return ModifiedFrom;
				    case "PRE_DATEREESTR": return pre_DateReestr;
				    case "PRE_EXTERNALID": return pre_ExternalID;
				    case "ID": return ID;
				    case "PRE_NUMREESTR": return pre_NumReestr;
				    case "IDTYPE": return IDType;
				    case "BNK_ID": return bnk_ID;
				    case "ERRFORMAT": return ErrFormat;
				    case "LANG": return lang;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "PARENTID":if (value == null)ParentID=null;else ParentID=Convert.ToInt32(value);break;
                case "CRN_CODEISO":crn_CodeISO=(string)value;break;
                case "MODIFIEDBY":ModifiedBy=(string)value;break;
                case "MODIFIEDFROM":ModifiedFrom=(string)value;break;
                case "PRE_DATEREESTR":if (value == null)pre_DateReestr=null;else pre_DateReestr=Convert.ToDateTime(value);break;
                case "PRE_EXTERNALID":if (value == null)pre_ExternalID=null;else pre_ExternalID=Convert.ToInt32(value);break;
                case "ID":if (value == null)ID=null;else ID=Convert.ToInt32(value);break;
                case "PRE_NUMREESTR":pre_NumReestr=(string)value;break;
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                case "BNK_ID":if (value == null)bnk_ID=null;else bnk_ID=Convert.ToInt32(value);break;
                case "ERRFORMAT":ErrFormat=(string)value;break;
                case "LANG":lang=(string)value;break;
                }
            }
		}
		#endregion
	}
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="PaymentRegistry_Response_SET",Namespace = "")]
	public class PaymentRegistry_Response_SET: BaseEntity, IModifiedTag
	{
         #region [Properties]
			/// <summary>
			/// Указание языка для набора multi-language данных 
			/// <para/>
			/// Lang
			/// </summary>
			///<remarks>
			///Указание языка для набора multi-language данных 
			///</remarks>
			[JsonProperty("lang")]
			[DataMember(Name="lang", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
			[JsonIgnore]
            public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
			/// <summary>
			/// No description
			/// <para/>
			/// pre_ID
			/// </summary>
			///<remarks>
			///No description
			///</remarks>
			[JsonProperty("ID")]
			[DataMember(Name="ID", EmitDefaultValue = false)]
			/*norestr*/

            public global::System.Int32? ID 	{
		get 
		{ 
			if(emptyId.Equals(this.Id))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.Id, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.Id = value.ToString(); }
	}
			/// <summary>
			/// No description
			/// <para/>
			/// bnk_ID
			/// </summary>
			///<remarks>
			///No description
			///</remarks>
			[JsonProperty("bnk_ID")]
			[DataMember(Name="bnk_ID", EmitDefaultValue = false)]
			/*norestr*/

            public global::System.Int32? bnk_ID  { get; set; }
         #endregion
        [JsonIgnore]
	    public DateTime? If_Modified_Since { get {return null;}}
        #region [IDateModified]
        [JsonIgnore]
	    public DateTime? LastModified { get { return If_Modified_Since;}}
        #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "LANG": return lang;
				    case "ID": return ID;
				    case "BNK_ID": return bnk_ID;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "LANG":lang=(string)value;break;
                case "ID":if (value == null)ID=null;else ID=Convert.ToInt32(value);break;
                case "BNK_ID":if (value == null)bnk_ID=null;else bnk_ID=Convert.ToInt32(value);break;
                }
            }
		}
		#endregion
    }
#endregion
#region [PhoneNumbers]
  
    
    ///<remarks>POST &lt;host&gt;[:&lt;port&gt;]/api/v1/bss/callusergroups/[parentid]/phonenumbers
///</remarks>
    ///Callusergroups
    [EntitySubentity("Callusergroups")]

	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="PhoneNumbers_Request_SET",Namespace = "")]
	public class PhoneNumbers_Request_SET : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// Пользователь данного изменения
	    ///<list type='bullet'>
///<item>
///	<term>Username </term>
///	<description> - пользователь из контекста</description>
///</item>
///<item>
///	<term>NULL </term>
///	<description> -если неизвестен</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedBy")]
        [DataMember(Name="ModifiedBy",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedBy  { get; set; }
              /// <summary>
        /// Номер телефона (Б-номер)
	    ///<list type='bullet'>
///<item>
///	<description>Значение номера в формате 9 цифр</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("PhoneNumber")]
        [DataMember(Name="PhoneNumber",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String PhoneNumber  { get; set; }
              /// <summary>
        /// Признак удаления
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - удалить</description>
///</item>
///<item>
///	<term>0 </term>
///	<description> - добавить</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("IsRemoved")]
        [DataMember(Name="IsRemoved",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? IsRemoved  { get; set; }
              /// <summary>
        /// Дата окончания присутствия номера телефона в группе
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("DateEnd")]
        [DataMember(Name="DateEnd",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? DateEnd  { get; set; }
              /// <summary>
        /// Дата начала присутствия номера телефона в группе
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("DateStart")]
        [DataMember(Name="DateStart",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? DateStart  { get; set; }
              /// <summary>
        /// Источник данного изменения
	    ///<list type='bullet'>
///<item>
///	<term>IP </term>
///	<description> -адрес/имя компьютера</description>
///</item>
///<item>
///	<term>NULL </term>
///	<description> - если неизвестен</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedFrom")]
        [DataMember(Name="ModifiedFrom",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedFrom  { get; set; }
              /// <summary>
        /// Идентификатор исторической записи присутствия номера телефона в группе
	    ///<list type='bullet'>
///<item>
///	<description>Используется для правки</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("ID")]
        [DataMember(Name="ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? ID 	{
		get 
		{ 
			if(emptyId.Equals(this.Id))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.Id, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.Id = value.ToString(); }
	}
              /// <summary>
        /// Идентификатор Закрытой абонентской группы
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("ParentID")]
        [DataMember(Name="ParentID",EmitDefaultValue = false)]
		[JsonRestrictedByValue("<empty>")]

	public global::System.Int32? ParentID 	{
		get 
		{ 
			if(emptyId.Equals(this.ParentId))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.ParentId, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.ParentId = value.ToString(); }
	}
              /// <summary>
        /// Формат вывода ошибки
	    ///<list type='bullet'>
///<item>
///	<description>'json'</description>
///</item>
///<item>
///	<description>'xml'</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : xml</para>
///<para>Max length : 25</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ErrFormat")]
        [DataMember(Name="ErrFormat",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ErrFormat     {
		get { return Format ?? "xml"; }
		set { this.Format = value; }
	}
              /// <summary>
        /// Указание языка для набора multi-language данных 
	    ///<list type='bullet'>
///<item>
///	<term>'uk' </term>
///	<description> -украинский</description>
///</item>
///<item>
///	<term>'ru' </term>
///	<description> -руский </description>
///</item>
///<item>
///	<term>'en' </term>
///	<description> -английский</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 'uk'</para>
///<para>Max length : 3</para>
///<para>Mandatory : Yes</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("lang")]
        [DataMember(Name="lang",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
			[JsonIgnore]
	public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
              /// <summary>
        /// Дополнительный код города
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Cds_CityAddCode")]
        [DataMember(Name="Cds_CityAddCode",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Cds_CityAddCode  { get; set; }
              /// <summary>
        /// Код города
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Cds_CityCode")]
        [DataMember(Name="Cds_CityCode",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Cds_CityCode  { get; set; }
              /// <summary>
        /// Код страны
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Cds_CountryCode")]
        [DataMember(Name="Cds_CountryCode",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Cds_CountryCode  { get; set; }
              /// <summary>
        /// Идентификатор кода направления. Связь с Codes
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Cds_ID")]
        [DataMember(Name="Cds_ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? Cds_ID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Cds_Name")]
        [DataMember(Name="Cds_Name",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Cds_Name  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Crg_RegionNameEN")]
        [DataMember(Name="Crg_RegionNameEN",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Crg_RegionNameEN  { get; set; }
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "MODIFIEDBY": return ModifiedBy;
				    case "PHONENUMBER": return PhoneNumber;
				    case "ISREMOVED": return IsRemoved;
				    case "DATEEND": return DateEnd;
				    case "DATESTART": return DateStart;
				    case "MODIFIEDFROM": return ModifiedFrom;
				    case "ID": return ID;
				    case "PARENTID": return ParentID;
				    case "ERRFORMAT": return ErrFormat;
				    case "LANG": return lang;
				    case "CDS_CITYADDCODE": return Cds_CityAddCode;
				    case "CDS_CITYCODE": return Cds_CityCode;
				    case "CDS_COUNTRYCODE": return Cds_CountryCode;
				    case "CDS_ID": return Cds_ID;
				    case "CDS_NAME": return Cds_Name;
				    case "CRG_REGIONNAMEEN": return Crg_RegionNameEN;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "MODIFIEDBY":ModifiedBy=(string)value;break;
                case "PHONENUMBER":PhoneNumber=(string)value;break;
                case "ISREMOVED":if (value == null)IsRemoved=null;else IsRemoved=Convert.ToInt32(value);break;
                case "DATEEND":if (value == null)DateEnd=null;else DateEnd=Convert.ToDateTime(value);break;
                case "DATESTART":if (value == null)DateStart=null;else DateStart=Convert.ToDateTime(value);break;
                case "MODIFIEDFROM":ModifiedFrom=(string)value;break;
                case "ID":if (value == null)ID=null;else ID=Convert.ToInt32(value);break;
                case "PARENTID":if (value == null)ParentID=null;else ParentID=Convert.ToInt32(value);break;
                case "ERRFORMAT":ErrFormat=(string)value;break;
                case "LANG":lang=(string)value;break;
                case "CDS_CITYADDCODE":Cds_CityAddCode=(string)value;break;
                case "CDS_CITYCODE":Cds_CityCode=(string)value;break;
                case "CDS_COUNTRYCODE":Cds_CountryCode=(string)value;break;
                case "CDS_ID":if (value == null)Cds_ID=null;else Cds_ID=Convert.ToInt32(value);break;
                case "CDS_NAME":Cds_Name=(string)value;break;
                case "CRG_REGIONNAMEEN":Crg_RegionNameEN=(string)value;break;
                }
            }
		}
		#endregion
	}
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="PhoneNumbers_Response_SET",Namespace = "")]
	public class PhoneNumbers_Response_SET: BaseEntity, IModifiedTag
	{
         #region [Properties]
			/// <summary>
			/// Идентификатор исторической записи присутствия номера телефона в группе
			/// <para/>
			/// Crgb_ID
			/// </summary>
			///<remarks>
			///Идентификатор исторической записи присутствия номера телефона в группе
			///</remarks>
			[JsonProperty("ID")]
			[DataMember(Name="ID", EmitDefaultValue = false)]
			/*norestr*/

            public global::System.Int32? ID 	{
		get 
		{ 
			if(emptyId.Equals(this.Id))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.Id, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.Id = value.ToString(); }
	}
			/// <summary>
			/// Указание языка для набора multi-language данных 
			/// <para/>
			/// Lang
			/// </summary>
			///<remarks>
			///Указание языка для набора multi-language данных 
			///</remarks>
			[JsonProperty("lang")]
			[DataMember(Name="lang", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
			[JsonIgnore]
            public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
			/// <summary>
			/// Идентификатор кода направления. Связь с Codes
			/// <para/>
			/// Cds_ID
			/// </summary>
			///<remarks>
			///Идентификатор кода направления. Связь с Codes
			///</remarks>
			[JsonProperty("Cds_ID")]
			[DataMember(Name="Cds_ID", EmitDefaultValue = false)]
			/*norestr*/

            public global::System.Int32? Cds_ID  { get; set; }
         #endregion
        [JsonIgnore]
	    public DateTime? If_Modified_Since { get {return null;}}
        #region [IDateModified]
        [JsonIgnore]
	    public DateTime? LastModified { get { return If_Modified_Since;}}
        #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "ID": return ID;
				    case "LANG": return lang;
				    case "CDS_ID": return Cds_ID;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "ID":if (value == null)ID=null;else ID=Convert.ToInt32(value);break;
                case "LANG":lang=(string)value;break;
                case "CDS_ID":if (value == null)Cds_ID=null;else Cds_ID=Convert.ToInt32(value);break;
                }
            }
		}
		#endregion
    }
#endregion
#region [PortabilityNumbers]
  
    
    ///<remarks>POST &lt;host&gt;[:&lt;port&gt;]/api/v1/bss/portabilitynumbers
///</remarks>
    ///<empty>

	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="PortabilityNumbers_Request_SET",Namespace = "")]
	public class PortabilityNumbers_Request_SET : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// Номер телефона, переходящего в зону MNP
	    ///<list type='bullet'>
///<item>
///	<description>Значение номера в формате 9 цифр XXNNNNNNN</description>
///</item>
///<item>
///	<description>где XX код сети оператора</description>
///</item>
///<item>
///	<description>выдавшего номер</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("PhoneNumber")]
        [DataMember(Name="PhoneNumber",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String PhoneNumber  { get; set; }
              /// <summary>
        /// Признак удаления
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - удалить</description>
///</item>
///<item>
///	<term>0 </term>
///	<description> - добавить</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("IsRemoved")]
        [DataMember(Name="IsRemoved",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? IsRemoved  { get; set; }
              /// <summary>
        /// Дата начала действия
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("PortedDate")]
        [DataMember(Name="PortedDate",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? PortedDate  { get; set; }
              /// <summary>
        /// Пользователь данного изменения
	    ///<list type='bullet'>
///<item>
///	<term>Username </term>
///	<description> - пользователь из контекста</description>
///</item>
///<item>
///	<term>NULL </term>
///	<description> -если неизвестен</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedBy")]
        [DataMember(Name="ModifiedBy",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedBy  { get; set; }
              /// <summary>
        /// Источник данного изменения
	    ///<list type='bullet'>
///<item>
///	<term>IP </term>
///	<description> -адрес/имя компьютера</description>
///</item>
///<item>
///	<term>NULL </term>
///	<description> - если неизвестен</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedFrom")]
        [DataMember(Name="ModifiedFrom",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedFrom  { get; set; }
              /// <summary>
        /// Зона MNP, принимающая номер телефона
	    ///<list type='bullet'>
///<item>
///	<description>Значение в формате MNP39NN</description>
///</item>
///<item>
///	<term>где NN </term>
///	<description> - MNC код принимающего оператора</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("RecipientRC")]
        [DataMember(Name="RecipientRC",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String RecipientRC  { get; set; }
              /// <summary>
        /// Идентификатор исторической записи связки номера и зоны
	    ///<list type='bullet'>
///<item>
///	<description>Используется для правки</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("ID")]
        [DataMember(Name="ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? ID 	{
		get 
		{ 
			if(emptyId.Equals(this.Id))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.Id, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.Id = value.ToString(); }
	}
              /// <summary>
        /// Формат вывода ошибки
	    ///<list type='bullet'>
///<item>
///	<description>'json'</description>
///</item>
///<item>
///	<description>'xml'</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : xml</para>
///<para>Max length : 25</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ErrFormat")]
        [DataMember(Name="ErrFormat",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ErrFormat     {
		get { return Format ?? "xml"; }
		set { this.Format = value; }
	}
              /// <summary>
        /// Указание языка для набора multi-language данных 
	    ///<list type='bullet'>
///<item>
///	<term>'uk' </term>
///	<description> -украинский</description>
///</item>
///<item>
///	<term>'ru' </term>
///	<description> -руский </description>
///</item>
///<item>
///	<term>'en' </term>
///	<description> -английский</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 'uk'</para>
///<para>Max length : 3</para>
///<para>Mandatory : Yes</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("lang")]
        [DataMember(Name="lang",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
			[JsonIgnore]
	public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Abn_ID")]
        [DataMember(Name="Abn_ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? Abn_ID  { get; set; }
              /// <summary>
        /// Дополнительный код города
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Cds_CityAddCode")]
        [DataMember(Name="Cds_CityAddCode",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Cds_CityAddCode  { get; set; }
              /// <summary>
        /// Код города
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Cds_CityCode")]
        [DataMember(Name="Cds_CityCode",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Cds_CityCode  { get; set; }
              /// <summary>
        /// Код страны
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Cds_CountryCode")]
        [DataMember(Name="Cds_CountryCode",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Cds_CountryCode  { get; set; }
              /// <summary>
        /// Идентификатор кода направления. Связь с Codes
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Cds_ID")]
        [DataMember(Name="Cds_ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? Cds_ID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Cds_Name")]
        [DataMember(Name="Cds_Name",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Cds_Name  { get; set; }
              /// <summary>
        /// Идентификатор внешней зоны. Связь с CodeRegionGroups
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Crg_ID")]
        [DataMember(Name="Crg_ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? Crg_ID  { get; set; }
              /// <summary>
        /// Дата окончанимя действия записи
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Crgb_DateEnd")]
        [DataMember(Name="Crgb_DateEnd",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? Crgb_DateEnd  { get; set; }
              /// <summary>
        /// Имя сущности для которой выполняется операция
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("EntityName")]
        [DataMember(Name="EntityName",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String EntityName { get; set; } = "<empty>";
              /// <summary>
        /// Признак передачи внешнего значения ID
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("IDType")]
        [DataMember(Name="IDType",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? IDType  { get; set; } = 0;
              /// <summary>
        /// Признак добавлять номера абонента в Закрытую Группу или нет
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("IncludeNumbers")]
        [DataMember(Name="IncludeNumbers",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? IncludeNumbers  { get; set; }
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "PHONENUMBER": return PhoneNumber;
				    case "ISREMOVED": return IsRemoved;
				    case "PORTEDDATE": return PortedDate;
				    case "MODIFIEDBY": return ModifiedBy;
				    case "MODIFIEDFROM": return ModifiedFrom;
				    case "RECIPIENTRC": return RecipientRC;
				    case "ID": return ID;
				    case "ERRFORMAT": return ErrFormat;
				    case "LANG": return lang;
				    case "ABN_ID": return Abn_ID;
				    case "CDS_CITYADDCODE": return Cds_CityAddCode;
				    case "CDS_CITYCODE": return Cds_CityCode;
				    case "CDS_COUNTRYCODE": return Cds_CountryCode;
				    case "CDS_ID": return Cds_ID;
				    case "CDS_NAME": return Cds_Name;
				    case "CRG_ID": return Crg_ID;
				    case "CRGB_DATEEND": return Crgb_DateEnd;
				    case "ENTITYNAME": return EntityName;
				    case "IDTYPE": return IDType;
				    case "INCLUDENUMBERS": return IncludeNumbers;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "PHONENUMBER":PhoneNumber=(string)value;break;
                case "ISREMOVED":if (value == null)IsRemoved=null;else IsRemoved=Convert.ToInt32(value);break;
                case "PORTEDDATE":if (value == null)PortedDate=null;else PortedDate=Convert.ToDateTime(value);break;
                case "MODIFIEDBY":ModifiedBy=(string)value;break;
                case "MODIFIEDFROM":ModifiedFrom=(string)value;break;
                case "RECIPIENTRC":RecipientRC=(string)value;break;
                case "ID":if (value == null)ID=null;else ID=Convert.ToInt32(value);break;
                case "ERRFORMAT":ErrFormat=(string)value;break;
                case "LANG":lang=(string)value;break;
                case "ABN_ID":if (value == null)Abn_ID=null;else Abn_ID=Convert.ToInt32(value);break;
                case "CDS_CITYADDCODE":Cds_CityAddCode=(string)value;break;
                case "CDS_CITYCODE":Cds_CityCode=(string)value;break;
                case "CDS_COUNTRYCODE":Cds_CountryCode=(string)value;break;
                case "CDS_ID":if (value == null)Cds_ID=null;else Cds_ID=Convert.ToInt32(value);break;
                case "CDS_NAME":Cds_Name=(string)value;break;
                case "CRG_ID":if (value == null)Crg_ID=null;else Crg_ID=Convert.ToInt32(value);break;
                case "CRGB_DATEEND":if (value == null)Crgb_DateEnd=null;else Crgb_DateEnd=Convert.ToDateTime(value);break;
                case "ENTITYNAME":EntityName=(string)value;break;
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                case "INCLUDENUMBERS":if (value == null)IncludeNumbers=null;else IncludeNumbers=Convert.ToInt32(value);break;
                }
            }
		}
		#endregion
	}
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="PortabilityNumbers_Response_SET",Namespace = "")]
	public class PortabilityNumbers_Response_SET: BaseEntity, IModifiedTag
	{
         #region [Properties]
			/// <summary>
			/// Идентификатор исторической записи связки номера и зоны
			/// <para/>
			/// Crgb_ID
			/// </summary>
			///<remarks>
			///Идентификатор исторической записи связки номера и зоны
			///</remarks>
			[JsonProperty("ID")]
			[DataMember(Name="ID", EmitDefaultValue = false)]
			/*norestr*/

            public global::System.Int32? ID 	{
		get 
		{ 
			if(emptyId.Equals(this.Id))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.Id, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.Id = value.ToString(); }
	}
			/// <summary>
			/// Указание языка для набора multi-language данных 
			/// <para/>
			/// Lang
			/// </summary>
			///<remarks>
			///Указание языка для набора multi-language данных 
			///</remarks>
			[JsonProperty("lang")]
			[DataMember(Name="lang", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
			[JsonIgnore]
            public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
			/// <summary>
			/// Идентификатор кода направления. Связь с Codes
			/// <para/>
			/// Cds_ID
			/// </summary>
			///<remarks>
			///Идентификатор кода направления. Связь с Codes
			///</remarks>
			[JsonProperty("Cds_ID")]
			[DataMember(Name="Cds_ID", EmitDefaultValue = false)]
			/*norestr*/

            public global::System.Int32? Cds_ID  { get; set; }
			/// <summary>
			/// No description
			/// <para/>
			/// IsExternalID
			/// </summary>
			///<remarks>
			///No description
			///</remarks>
			[JsonProperty("IDType")]
			[DataMember(Name="IDType", EmitDefaultValue = false)]
			/*norestr*/

            public global::System.Int32? IDType  { get; set; } = 0;
         #endregion
        [JsonIgnore]
	    public DateTime? If_Modified_Since { get {return null;}}
        #region [IDateModified]
        [JsonIgnore]
	    public DateTime? LastModified { get { return If_Modified_Since;}}
        #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "ID": return ID;
				    case "LANG": return lang;
				    case "CDS_ID": return Cds_ID;
				    case "IDTYPE": return IDType;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "ID":if (value == null)ID=null;else ID=Convert.ToInt32(value);break;
                case "LANG":lang=(string)value;break;
                case "CDS_ID":if (value == null)Cds_ID=null;else Cds_ID=Convert.ToInt32(value);break;
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                }
            }
		}
		#endregion
    }
#endregion
#region [Profiles]
  
    
    ///<remarks>POST &lt;host&gt;[:&lt;port&gt;]/api/v1/bss/associations/[parentid]/profiles
///POST &lt;host&gt;[:&lt;port&gt;]/api/v1/bss/customers/[parentid]/profiles
///POST &lt;host&gt;[:&lt;port&gt;]/api/v1/bss/subscribers/[parentid]/profiles
///</remarks>
    ///Associations,Customers,Subscribers
    [EntitySubentity("Associations")]
    [EntitySubentity("Customers")]
    [EntitySubentity("Subscribers")]

	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Profiles_Request_SET",Namespace = "")]
	public class Profiles_Request_SET : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// Атрибуты узла дерева (используется с указанием формата)
	    ///<list type='bullet'>
///<item>
///	<description>обьект в формате json и в соответствии с шаблоном для указанного узла дерева</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Attributes")]
        [DataMember(Name="Attributes",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Attributes  { get; set; }
              /// <summary>
        /// Идентификатор причины создания версии аттрибутов
	    ///<list type='bullet'>
///<item>
///	<term>для Клиентов типа Физ.Лицо: 1 </term>
///	<description> - бумажный паспорт</description>
///</item>
///<item>
///	<term>9 </term>
///	<description> - ID</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("IdentityType")]
        [DataMember(Name="IdentityType",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? IdentityType  { get; set; }
              /// <summary>
        /// Дата применения изменений
	    ///<list type='bullet'>
///<item>
///	<description>Зарезервировано</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("EffectiveDate")]
        [DataMember(Name="EffectiveDate",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? EffectiveDate  { get; set; }
              /// <summary>
        /// Комментарий изменения
	    ///<list type='bullet'>
///<item>
///	<description>Заполняем причину изменений для истории</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Remark")]
        [DataMember(Name="Remark",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Remark  { get; set; }
              /// <summary>
        /// Признак передачи внешнего значения ID
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - внешний ID (для BIS всегда устанавливаем в 1)</description>
///</item>
///<item>
///	<term>0 </term>
///	<description> - внутренний ID</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("IDType")]
        [DataMember(Name="IDType",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? IDType  { get; set; }
              /// <summary>
        /// Идентификатор шаблона профиля
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("TemplateID")]
        [DataMember(Name="TemplateID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? TemplateID  { get; set; }
              /// <summary>
        /// Формат данных аттрибутов профиля
	    ///<list type='bullet'>
///<item>
///	<description>json</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 'json'</para>
///<para>Max length : 25</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("DataFormat")]
        [DataMember(Name="DataFormat",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String DataFormat  { get; set; } = "json";
              /// <summary>
        /// Код внешней системы - инициатора запроса
	    ///<list type='bullet'>
///<item>
///	<description>зарезервировано</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Header
        /// </remarks>
        [JsonProperty("System")]
        [DataMember(Name="System",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String System  { get; set; }
              /// <summary>
        /// Название сущности REST, для которой выполняется POST операция
	    ///<list type='bullet'>
///<item>
///	<description>зарезервировано</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("EntityName")]
        [DataMember(Name="EntityName",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String EntityName { get; set; } = "<empty>";
              /// <summary>
        /// Идентификатор вышестоящего узла дерева
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> -корень дерева учета</description>
///</item>
///<item>
///	<term>SUBS_ID </term>
///	<description> -справочник SUBSCRIBERS</description>
///</item>
///<item>
///	<term>CLNT_ID </term>
///	<description> -справочник CLIENT_HISTORIES</description>
///</item>
///<item>
///	<term>ASSC_ID </term>
///	<description> -справочник ASSOCIATIONS</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("ParentID")]
        [DataMember(Name="ParentID",EmitDefaultValue = false)]
		[JsonRestrictedByValue("<empty>")]

[SecondaryKey("Associations_Request_SET","ID")]/*SET*/
[SecondaryKey("Subscribers_Request_SET","ID")]/*SET*/
[SecondaryKey("Customers_Request_SET","ID")]/*SET*/
	public global::System.Int32? ParentID 	{
		get 
		{ 
			if(emptyId.Equals(this.ParentId))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.ParentId, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.ParentId = value.ToString(); }
	}
              /// <summary>
        /// Идентификатор узла дерева
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> -корень дерева учета</description>
///</item>
///<item>
///	<term>SUBS_ID </term>
///	<description> -справочник SUBSCRIBERS</description>
///</item>
///<item>
///	<term>CLNT_ID </term>
///	<description> -справочник CLIENT_HISTORIES</description>
///</item>
///<item>
///	<term>ASSC_ID </term>
///	<description> -справочник ASSOCIATIONS</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("ID")]
        [DataMember(Name="ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? ID 	{
		get 
		{ 
			if(emptyId.Equals(this.Id))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.Id, out result))
				return result; 
			else
            {
return 0;
            }
		}
		set { this.Id = value.ToString(); }
	}
              /// <summary>
        /// Указание языка для набора multi-language данных 
	    ///<list type='bullet'>
///<item>
///	<term>'uk' </term>
///	<description> -украинский</description>
///</item>
///<item>
///	<term>'ru' </term>
///	<description> -руский </description>
///</item>
///<item>
///	<term>'en' </term>
///	<description> -английский</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 'uk'</para>
///<para>Max length : 3</para>
///<para>Mandatory : Yes</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("lang")]
        [DataMember(Name="lang",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
			[JsonIgnore]
	public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
              /// <summary>
        /// Формат вывода ошибки
	    ///<list type='bullet'>
///<item>
///	<description>'json'</description>
///</item>
///<item>
///	<description>'xml'</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : xml</para>
///<para>Max length : 25</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ErrFormat")]
        [DataMember(Name="ErrFormat",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ErrFormat     {
		get { return Format ?? "xml"; }
		set { this.Format = value; }
	}
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedBy")]
        [DataMember(Name="ModifiedBy",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedBy  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedFrom")]
        [DataMember(Name="ModifiedFrom",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedFrom  { get; set; }
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "ATTRIBUTES": return Attributes;
				    case "IDENTITYTYPE": return IdentityType;
				    case "EFFECTIVEDATE": return EffectiveDate;
				    case "REMARK": return Remark;
				    case "IDTYPE": return IDType;
				    case "TEMPLATEID": return TemplateID;
				    case "DATAFORMAT": return DataFormat;
				    case "SYSTEM": return System;
				    case "ENTITYNAME": return EntityName;
				    case "PARENTID": return ParentID;
				    case "ID": return ID;
				    case "LANG": return lang;
				    case "ERRFORMAT": return ErrFormat;
				    case "MODIFIEDBY": return ModifiedBy;
				    case "MODIFIEDFROM": return ModifiedFrom;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "ATTRIBUTES":Attributes=(string)value;break;
                case "IDENTITYTYPE":if (value == null)IdentityType=null;else IdentityType=Convert.ToInt32(value);break;
                case "EFFECTIVEDATE":if (value == null)EffectiveDate=null;else EffectiveDate=Convert.ToDateTime(value);break;
                case "REMARK":Remark=(string)value;break;
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                case "TEMPLATEID":if (value == null)TemplateID=null;else TemplateID=Convert.ToInt32(value);break;
                case "DATAFORMAT":DataFormat=(string)value;break;
                case "SYSTEM":System=(string)value;break;
                case "ENTITYNAME":EntityName=(string)value;break;
                case "PARENTID":if (value == null)ParentID=null;else ParentID=Convert.ToInt32(value);break;
                case "ID":if (value == null)ID=null;else ID=Convert.ToInt32(value);break;
                case "LANG":lang=(string)value;break;
                case "ERRFORMAT":ErrFormat=(string)value;break;
                case "MODIFIEDBY":ModifiedBy=(string)value;break;
                case "MODIFIEDFROM":ModifiedFrom=(string)value;break;
                }
            }
		}
		#endregion
	}
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Profiles_Response_SET",Namespace = "")]
	public class Profiles_Response_SET: BaseEntity, IModifiedTag
	{
         #region [Properties]
			/// <summary>
			/// Указание языка для набора multi-language данных 
			/// <para/>
			/// Lang
			/// </summary>
			///<remarks>
			///Указание языка для набора multi-language данных 
			///</remarks>
			[JsonProperty("lang")]
			[DataMember(Name="lang", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
			[JsonIgnore]
            public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
			/// <summary>
			/// Идентификатор Атрибутов узла дерева
			/// <para/>
			/// aatr_ID
			/// </summary>
			///<remarks>
			///Идентификатор Атрибутов узла дерева
			///</remarks>
			[JsonProperty("ID")]
			[DataMember(Name="ID", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
            public global::System.Int32? ID 	{
		get 
		{ 
			if(emptyId.Equals(this.Id))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.Id, out result))
				return result; 
			else
            {
return 0;
            }
		}
		set { this.Id = value.ToString(); }
	}
			/// <summary>
			/// Признак передачи внешнего значения ID
			/// <para/>
			/// IsExternalID
			/// </summary>
			///<remarks>
			///Признак передачи внешнего значения ID
			///</remarks>
			[JsonProperty("IDType")]
			[DataMember(Name="IDType", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
            public global::System.Int32? IDType  { get; set; }
         #endregion
        [JsonIgnore]
	    public DateTime? If_Modified_Since { get {return null;}}
        #region [IDateModified]
        [JsonIgnore]
	    public DateTime? LastModified { get { return If_Modified_Since;}}
        #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "LANG": return lang;
				    case "ID": return ID;
				    case "IDTYPE": return IDType;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "LANG":lang=(string)value;break;
                case "ID":if (value == null)ID=null;else ID=Convert.ToInt32(value);break;
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                }
            }
		}
		#endregion
    }
#endregion
#region [RatingData]
  
    
    ///<remarks>POST &lt;host&gt;[:&lt;port&gt;]/api/v1/BSS/RatingData
///</remarks>
    ///<empty>

	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="RatingData_Request_SET",Namespace = "")]
	public class RatingData_Request_SET : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("beginTimeStamp")]
        [DataMember(Name="beginTimeStamp",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? beginTimeStamp  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("CheckBalanceMode")]
        [DataMember(Name="CheckBalanceMode",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? CheckBalanceMode  { get; set; } = 0;
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("consumedUnit")]
        [DataMember(Name="consumedUnit",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? consumedUnit  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("destinationIdData")]
        [DataMember(Name="destinationIdData",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String destinationIdData  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("destinationIdType")]
        [DataMember(Name="destinationIdType",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String destinationIdType  { get; set; }
              /// <summary>
        /// Формат вывода ошибки
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 'json'</para>
///<para>Max length : 25</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("ErrFormat")]
        [DataMember(Name="ErrFormat",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ErrFormat     {
		get { return Format ?? "json"; }
		set { this.Format = value; }
	}
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("ID")]
        [DataMember(Name="ID",EmitDefaultValue = false)]
		/*norestr*/
[DocIgnore]

	public global::System.String ID 	{
		get {{return this.Id;}}
		set {{ this.Id = value; }}
	}
              /// <summary>
        /// Признак передачи внешнего значения ID
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 1</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("IDType")]
        [DataMember(Name="IDType",EmitDefaultValue = false)]
		/*norestr*/
[DocIgnore]

	public global::System.Int32? IDType  { get; set; } = 1;
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("invocationTimeStamp")]
        [DataMember(Name="invocationTimeStamp",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? invocationTimeStamp  { get; set; }
              /// <summary>
        /// Указание языка для набора multi-language данных 
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 'uk'</para>
///<para>Max length : 3</para>
///<para>Mandatory : Yes</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("lang")]
        [DataMember(Name="lang",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
			[JsonIgnore]
	public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
              /// <summary>
        /// Режим подключения Пакетов и услуг
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("mode")]
        [DataMember(Name="mode",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String mode  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("nfConsumerIdentification")]
        [DataMember(Name="nfConsumerIdentification",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String nfConsumerIdentification  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("oneTimeEvent")]
        [DataMember(Name="oneTimeEvent",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String oneTimeEvent  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("oneTimeEventType")]
        [DataMember(Name="oneTimeEventType",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String oneTimeEventType  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ratingGroup")]
        [DataMember(Name="ratingGroup",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? ratingGroup  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("requestedUnit")]
        [DataMember(Name="requestedUnit",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? requestedUnit  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("requestSubType")]
        [DataMember(Name="requestSubType",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String requestSubType  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("serviceContextId")]
        [DataMember(Name="serviceContextId",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String serviceContextId  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("serviceId")]
        [DataMember(Name="serviceId",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? serviceId  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("serviceRating")]
        [DataMember(Name="serviceRating",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String serviceRating  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("srsv_ID")]
        [DataMember(Name="srsv_ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int64? srsv_ID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("srsv_LinkID")]
        [DataMember(Name="srsv_LinkID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int64? srsv_LinkID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("srsv_Remark")]
        [DataMember(Name="srsv_Remark",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String srsv_Remark  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("subscriptionId")]
        [DataMember(Name="subscriptionId",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String subscriptionId  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("invocationSequenceNumber")]
        [DataMember(Name="invocationSequenceNumber",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? invocationSequenceNumber  { get; set; }
              /// <summary>
        /// Имя сущности для которой выполняется операция
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("EntityName")]
        [DataMember(Name="EntityName",EmitDefaultValue = false)]
		/*norestr*/
[DocIgnore]

	public global::System.String EntityName { get; set; } = "<empty>";
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("location")]
        [DataMember(Name="location",EmitDefaultValue = false)]
		/*norestr*/
[DocIgnore]

	public global::System.String location  { get; set; }
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "BEGINTIMESTAMP": return beginTimeStamp;
				    case "CHECKBALANCEMODE": return CheckBalanceMode;
				    case "CONSUMEDUNIT": return consumedUnit;
				    case "DESTINATIONIDDATA": return destinationIdData;
				    case "DESTINATIONIDTYPE": return destinationIdType;
				    case "ERRFORMAT": return ErrFormat;
				    case "ID": return ID;
				    case "IDTYPE": return IDType;
				    case "INVOCATIONTIMESTAMP": return invocationTimeStamp;
				    case "LANG": return lang;
				    case "MODE": return mode;
				    case "NFCONSUMERIDENTIFICATION": return nfConsumerIdentification;
				    case "ONETIMEEVENT": return oneTimeEvent;
				    case "ONETIMEEVENTTYPE": return oneTimeEventType;
				    case "RATINGGROUP": return ratingGroup;
				    case "REQUESTEDUNIT": return requestedUnit;
				    case "REQUESTSUBTYPE": return requestSubType;
				    case "SERVICECONTEXTID": return serviceContextId;
				    case "SERVICEID": return serviceId;
				    case "SERVICERATING": return serviceRating;
				    case "SRSV_ID": return srsv_ID;
				    case "SRSV_LINKID": return srsv_LinkID;
				    case "SRSV_REMARK": return srsv_Remark;
				    case "SUBSCRIPTIONID": return subscriptionId;
				    case "INVOCATIONSEQUENCENUMBER": return invocationSequenceNumber;
				    case "ENTITYNAME": return EntityName;
				    case "LOCATION": return location;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "BEGINTIMESTAMP":if (value == null)beginTimeStamp=null;else beginTimeStamp=Convert.ToDateTime(value);break;
                case "CHECKBALANCEMODE":if (value == null)CheckBalanceMode=null;else CheckBalanceMode=Convert.ToInt32(value);break;
                case "CONSUMEDUNIT":if (value == null)consumedUnit=null;else consumedUnit=Convert.ToInt32(value);break;
                case "DESTINATIONIDDATA":destinationIdData=(string)value;break;
                case "DESTINATIONIDTYPE":destinationIdType=(string)value;break;
                case "ERRFORMAT":ErrFormat=(string)value;break;
                case "ID":ID=(string)value;break;
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                case "INVOCATIONTIMESTAMP":if (value == null)invocationTimeStamp=null;else invocationTimeStamp=Convert.ToDateTime(value);break;
                case "LANG":lang=(string)value;break;
                case "MODE":mode=(string)value;break;
                case "NFCONSUMERIDENTIFICATION":nfConsumerIdentification=(string)value;break;
                case "ONETIMEEVENT":oneTimeEvent=(string)value;break;
                case "ONETIMEEVENTTYPE":oneTimeEventType=(string)value;break;
                case "RATINGGROUP":if (value == null)ratingGroup=null;else ratingGroup=Convert.ToInt32(value);break;
                case "REQUESTEDUNIT":if (value == null)requestedUnit=null;else requestedUnit=Convert.ToInt32(value);break;
                case "REQUESTSUBTYPE":requestSubType=(string)value;break;
                case "SERVICECONTEXTID":serviceContextId=(string)value;break;
                case "SERVICEID":if (value == null)serviceId=null;else serviceId=Convert.ToInt32(value);break;
                case "SERVICERATING":serviceRating=(string)value;break;
                case "SRSV_ID":if (value == null)srsv_ID=null;else srsv_ID=Convert.ToInt64(value);break;
                case "SRSV_LINKID":if (value == null)srsv_LinkID=null;else srsv_LinkID=Convert.ToInt64(value);break;
                case "SRSV_REMARK":srsv_Remark=(string)value;break;
                case "SUBSCRIPTIONID":subscriptionId=(string)value;break;
                case "INVOCATIONSEQUENCENUMBER":if (value == null)invocationSequenceNumber=null;else invocationSequenceNumber=Convert.ToInt32(value);break;
                case "ENTITYNAME":EntityName=(string)value;break;
                case "LOCATION":location=(string)value;break;
                }
            }
		}
		#endregion
	}
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="RatingData_Response_SET",Namespace = "")]
	public class RatingData_Response_SET: BaseEntity, IModifiedTag
	{
         #region [Properties]
			/// <summary>
			/// No description
			/// <para/>
			/// srsv_UniqueID
			/// </summary>
			///<remarks>
			///No description
			///</remarks>
			[JsonProperty("ID")]
			[DataMember(Name="ID", EmitDefaultValue = false)]
			/*norestr*/
[DocIgnore]

            public global::System.String ID 	{
		get {{return this.Id;}}
		set {{ this.Id = value; }}
	}
			/// <summary>
			/// No description
			/// <para/>
			/// invocationTimeStamp
			/// </summary>
			///<remarks>
			///No description
			///</remarks>
			[JsonProperty("invocationTimeStamp")]
			[DataMember(Name="invocationTimeStamp", EmitDefaultValue = false)]
			/*norestr*/

            public global::System.DateTime? invocationTimeStamp  { get; set; }
			/// <summary>
			/// No description
			/// <para/>
			/// serviceRating
			/// </summary>
			///<remarks>
			///No description
			///</remarks>
			[JsonProperty("serviceRating")]
			[DataMember(Name="serviceRating", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
            public global::System.String serviceRating  { get; set; }
			/// <summary>
			/// No description
			/// <para/>
			/// srsv_ID
			/// </summary>
			///<remarks>
			///No description
			///</remarks>
			[JsonProperty("srsv_ID")]
			[DataMember(Name="srsv_ID", EmitDefaultValue = false)]
			/*norestr*/

            public global::System.Int64? srsv_ID  { get; set; }
			/// <summary>
			/// No description
			/// <para/>
			/// srsv_LinkID
			/// </summary>
			///<remarks>
			///No description
			///</remarks>
			[JsonProperty("srsv_LinkID")]
			[DataMember(Name="srsv_LinkID", EmitDefaultValue = false)]
			/*norestr*/

            public global::System.Int64? srsv_LinkID  { get; set; }
			/// <summary>
			/// No description
			/// <para/>
			/// invocationSequenceNumber
			/// </summary>
			///<remarks>
			///No description
			///</remarks>
			[JsonProperty("invocationSequenceNumber")]
			[DataMember(Name="invocationSequenceNumber", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
            public global::System.Int32? invocationSequenceNumber  { get; set; }
			/// <summary>
			/// No description
			/// <para/>
			/// location
			/// </summary>
			///<remarks>
			///No description
			///</remarks>
			[JsonProperty("location")]
			[DataMember(Name="location", EmitDefaultValue = false)]
			/*norestr*/

            public global::System.String location  { get; set; }
         #endregion
        [JsonIgnore]
	    public DateTime? If_Modified_Since { get {return null;}}
        #region [IDateModified]
        [JsonIgnore]
	    public DateTime? LastModified { get { return If_Modified_Since;}}
        #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "ID": return ID;
				    case "INVOCATIONTIMESTAMP": return invocationTimeStamp;
				    case "SERVICERATING": return serviceRating;
				    case "SRSV_ID": return srsv_ID;
				    case "SRSV_LINKID": return srsv_LinkID;
				    case "INVOCATIONSEQUENCENUMBER": return invocationSequenceNumber;
				    case "LOCATION": return location;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "ID":ID=(string)value;break;
                case "INVOCATIONTIMESTAMP":if (value == null)invocationTimeStamp=null;else invocationTimeStamp=Convert.ToDateTime(value);break;
                case "SERVICERATING":serviceRating=(string)value;break;
                case "SRSV_ID":if (value == null)srsv_ID=null;else srsv_ID=Convert.ToInt64(value);break;
                case "SRSV_LINKID":if (value == null)srsv_LinkID=null;else srsv_LinkID=Convert.ToInt64(value);break;
                case "INVOCATIONSEQUENCENUMBER":if (value == null)invocationSequenceNumber=null;else invocationSequenceNumber=Convert.ToInt32(value);break;
                case "LOCATION":location=(string)value;break;
                }
            }
		}
		#endregion
    }
#endregion
#region [RatingData/Release]

	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="RatingData_Release_Request_ACTION",Namespace = "")]
	public class RatingData_Release_Request_ACTION : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("beginTimeStamp")]
        [DataMember(Name="beginTimeStamp",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? beginTimeStamp  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("CheckBalanceMode")]
        [DataMember(Name="CheckBalanceMode",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? CheckBalanceMode  { get; set; } = 0;
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("consumedUnit")]
        [DataMember(Name="consumedUnit",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? consumedUnit  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("destinationIdData")]
        [DataMember(Name="destinationIdData",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String destinationIdData  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("destinationIdType")]
        [DataMember(Name="destinationIdType",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String destinationIdType  { get; set; }
              /// <summary>
        /// Имя сущности для которой выполняется операция
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("EntityName")]
        [DataMember(Name="EntityName",EmitDefaultValue = false)]
		/*norestr*/
[DocIgnore]

	public global::System.String EntityName { get; set; } = "<empty>";
              /// <summary>
        /// Формат вывода ошибки
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 'json'</para>
///<para>Max length : 25</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("ErrFormat")]
        [DataMember(Name="ErrFormat",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ErrFormat     {
		get { return Format ?? "json"; }
		set { this.Format = value; }
	}
              /// <summary>
        /// Признак передачи внешнего значения ID
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 1</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("IDType")]
        [DataMember(Name="IDType",EmitDefaultValue = false)]
		/*norestr*/
[DocIgnore]

	public global::System.Int32? IDType  { get; set; } = 1;
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("invocationSequenceNumber")]
        [DataMember(Name="invocationSequenceNumber",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? invocationSequenceNumber  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("invocationTimeStamp")]
        [DataMember(Name="invocationTimeStamp",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? invocationTimeStamp  { get; set; }
              /// <summary>
        /// Указание языка для набора multi-language данных 
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 'uk'</para>
///<para>Max length : 3</para>
///<para>Mandatory : Yes</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("lang")]
        [DataMember(Name="lang",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
			[JsonIgnore]
	public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
              /// <summary>
        /// Режим подключения Пакетов и услуг
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 'Release'</para>
///<para>Max length : 200</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("mode")]
        [DataMember(Name="mode",EmitDefaultValue = false)]
		/*norestr*/
[DocIgnore]

	public global::System.String mode  { get; set; } = "Release";
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("nfConsumerIdentification")]
        [DataMember(Name="nfConsumerIdentification",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String nfConsumerIdentification  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("ParentID")]
        [DataMember(Name="ParentID",EmitDefaultValue = false)]
		[JsonRestrictedByValue("<empty>")]

			[Required]
	public global::System.String ParentID 	{
		get {{return this.ParentId;}}
		set {{ this.ParentId = value; }}
	}
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ratingGroup")]
        [DataMember(Name="ratingGroup",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? ratingGroup  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("requestedUnit")]
        [DataMember(Name="requestedUnit",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? requestedUnit  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("requestSubType")]
        [DataMember(Name="requestSubType",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String requestSubType  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("serviceContextId")]
        [DataMember(Name="serviceContextId",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String serviceContextId  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("serviceId")]
        [DataMember(Name="serviceId",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? serviceId  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("serviceRating")]
        [DataMember(Name="serviceRating",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String serviceRating  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("srsv_ID")]
        [DataMember(Name="srsv_ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int64? srsv_ID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("srsv_LinkID")]
        [DataMember(Name="srsv_LinkID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int64? srsv_LinkID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("srsv_Remark")]
        [DataMember(Name="srsv_Remark",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String srsv_Remark  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("subscriptionId")]
        [DataMember(Name="subscriptionId",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String subscriptionId  { get; set; }
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "BEGINTIMESTAMP": return beginTimeStamp;
				    case "CHECKBALANCEMODE": return CheckBalanceMode;
				    case "CONSUMEDUNIT": return consumedUnit;
				    case "DESTINATIONIDDATA": return destinationIdData;
				    case "DESTINATIONIDTYPE": return destinationIdType;
				    case "ENTITYNAME": return EntityName;
				    case "ERRFORMAT": return ErrFormat;
				    case "IDTYPE": return IDType;
				    case "INVOCATIONSEQUENCENUMBER": return invocationSequenceNumber;
				    case "INVOCATIONTIMESTAMP": return invocationTimeStamp;
				    case "LANG": return lang;
				    case "MODE": return mode;
				    case "NFCONSUMERIDENTIFICATION": return nfConsumerIdentification;
				    case "PARENTID": return ParentID;
				    case "RATINGGROUP": return ratingGroup;
				    case "REQUESTEDUNIT": return requestedUnit;
				    case "REQUESTSUBTYPE": return requestSubType;
				    case "SERVICECONTEXTID": return serviceContextId;
				    case "SERVICEID": return serviceId;
				    case "SERVICERATING": return serviceRating;
				    case "SRSV_ID": return srsv_ID;
				    case "SRSV_LINKID": return srsv_LinkID;
				    case "SRSV_REMARK": return srsv_Remark;
				    case "SUBSCRIPTIONID": return subscriptionId;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "BEGINTIMESTAMP":if (value == null)beginTimeStamp=null;else beginTimeStamp=Convert.ToDateTime(value);break;
                case "CHECKBALANCEMODE":if (value == null)CheckBalanceMode=null;else CheckBalanceMode=Convert.ToInt32(value);break;
                case "CONSUMEDUNIT":if (value == null)consumedUnit=null;else consumedUnit=Convert.ToInt32(value);break;
                case "DESTINATIONIDDATA":destinationIdData=(string)value;break;
                case "DESTINATIONIDTYPE":destinationIdType=(string)value;break;
                case "ENTITYNAME":EntityName=(string)value;break;
                case "ERRFORMAT":ErrFormat=(string)value;break;
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                case "INVOCATIONSEQUENCENUMBER":if (value == null)invocationSequenceNumber=null;else invocationSequenceNumber=Convert.ToInt32(value);break;
                case "INVOCATIONTIMESTAMP":if (value == null)invocationTimeStamp=null;else invocationTimeStamp=Convert.ToDateTime(value);break;
                case "LANG":lang=(string)value;break;
                case "MODE":mode=(string)value;break;
                case "NFCONSUMERIDENTIFICATION":nfConsumerIdentification=(string)value;break;
                case "PARENTID":ParentID=(string)value;break;
                case "RATINGGROUP":if (value == null)ratingGroup=null;else ratingGroup=Convert.ToInt32(value);break;
                case "REQUESTEDUNIT":if (value == null)requestedUnit=null;else requestedUnit=Convert.ToInt32(value);break;
                case "REQUESTSUBTYPE":requestSubType=(string)value;break;
                case "SERVICECONTEXTID":serviceContextId=(string)value;break;
                case "SERVICEID":if (value == null)serviceId=null;else serviceId=Convert.ToInt32(value);break;
                case "SERVICERATING":serviceRating=(string)value;break;
                case "SRSV_ID":if (value == null)srsv_ID=null;else srsv_ID=Convert.ToInt64(value);break;
                case "SRSV_LINKID":if (value == null)srsv_LinkID=null;else srsv_LinkID=Convert.ToInt64(value);break;
                case "SRSV_REMARK":srsv_Remark=(string)value;break;
                case "SUBSCRIPTIONID":subscriptionId=(string)value;break;
                }
            }
		}
		#endregion
	}
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="RatingData_Release_Response_ACTION",Namespace = "")]
	public class RatingData_Release_Response_ACTION: BaseEntity, IModifiedTag
	{
         #region [Properties]
			/// <summary>
			/// No description
			/// <para/>
			/// invocationSequenceNumber
			/// </summary>
			///<remarks>
			///No description
			///</remarks>
			[JsonProperty("invocationSequenceNumber")]
			[DataMember(Name="invocationSequenceNumber", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
            public global::System.Int32? invocationSequenceNumber  { get; set; }
			/// <summary>
			/// No description
			/// <para/>
			/// invocationTimeStamp
			/// </summary>
			///<remarks>
			///No description
			///</remarks>
			[JsonProperty("invocationTimeStamp")]
			[DataMember(Name="invocationTimeStamp", EmitDefaultValue = false)]
			/*norestr*/

            public global::System.DateTime? invocationTimeStamp  { get; set; }
			/// <summary>
			/// No description
			/// <para/>
			/// serviceRating
			/// </summary>
			///<remarks>
			///No description
			///</remarks>
			[JsonProperty("serviceRating")]
			[DataMember(Name="serviceRating", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
            public global::System.String serviceRating  { get; set; }
			/// <summary>
			/// No description
			/// <para/>
			/// srsv_ID
			/// </summary>
			///<remarks>
			///No description
			///</remarks>
			[JsonProperty("srsv_ID")]
			[DataMember(Name="srsv_ID", EmitDefaultValue = false)]
			/*norestr*/

            public global::System.Int64? srsv_ID  { get; set; }
			/// <summary>
			/// No description
			/// <para/>
			/// srsv_LinkID
			/// </summary>
			///<remarks>
			///No description
			///</remarks>
			[JsonProperty("srsv_LinkID")]
			[DataMember(Name="srsv_LinkID", EmitDefaultValue = false)]
			/*norestr*/

            public global::System.Int64? srsv_LinkID  { get; set; }
         #endregion
        [JsonIgnore]
	    public DateTime? If_Modified_Since { get {return null;}}
        #region [IDateModified]
        [JsonIgnore]
	    public DateTime? LastModified { get { return If_Modified_Since;}}
        #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                }
            }
		}
		#endregion
    }
#endregion
#region [RatingData/Update]

	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="RatingData_Update_Request_ACTION",Namespace = "")]
	public class RatingData_Update_Request_ACTION : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("beginTimeStamp")]
        [DataMember(Name="beginTimeStamp",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? beginTimeStamp  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("CheckBalanceMode")]
        [DataMember(Name="CheckBalanceMode",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? CheckBalanceMode  { get; set; } = 0;
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("consumedUnit")]
        [DataMember(Name="consumedUnit",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? consumedUnit  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("destinationIdData")]
        [DataMember(Name="destinationIdData",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String destinationIdData  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("destinationIdType")]
        [DataMember(Name="destinationIdType",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String destinationIdType  { get; set; }
              /// <summary>
        /// Имя сущности для которой выполняется операция
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("EntityName")]
        [DataMember(Name="EntityName",EmitDefaultValue = false)]
		/*norestr*/
[DocIgnore]

	public global::System.String EntityName { get; set; } = "<empty>";
              /// <summary>
        /// Формат вывода ошибки
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 'json'</para>
///<para>Max length : 25</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("ErrFormat")]
        [DataMember(Name="ErrFormat",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ErrFormat     {
		get { return Format ?? "json"; }
		set { this.Format = value; }
	}
              /// <summary>
        /// Признак передачи внешнего значения ID
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 1</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("IDType")]
        [DataMember(Name="IDType",EmitDefaultValue = false)]
		/*norestr*/
[DocIgnore]

	public global::System.Int32? IDType  { get; set; } = 1;
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("invocationSequenceNumber")]
        [DataMember(Name="invocationSequenceNumber",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? invocationSequenceNumber  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("invocationTimeStamp")]
        [DataMember(Name="invocationTimeStamp",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? invocationTimeStamp  { get; set; }
              /// <summary>
        /// Указание языка для набора multi-language данных 
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 'uk'</para>
///<para>Max length : 3</para>
///<para>Mandatory : Yes</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("lang")]
        [DataMember(Name="lang",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
			[JsonIgnore]
	public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("location")]
        [DataMember(Name="location",EmitDefaultValue = false)]
		/*norestr*/
[DocIgnore]

	public global::System.String location  { get; set; }
              /// <summary>
        /// Режим подключения Пакетов и услуг
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("mode")]
        [DataMember(Name="mode",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String mode  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("nfConsumerIdentification")]
        [DataMember(Name="nfConsumerIdentification",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String nfConsumerIdentification  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("oneTimeEvent")]
        [DataMember(Name="oneTimeEvent",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String oneTimeEvent  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("oneTimeEventType")]
        [DataMember(Name="oneTimeEventType",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String oneTimeEventType  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("ParentID")]
        [DataMember(Name="ParentID",EmitDefaultValue = false)]
		[JsonRestrictedByValue("<empty>")]

			[Required]
	public global::System.String ParentID 	{
		get {{return this.ParentId;}}
		set {{ this.ParentId = value; }}
	}
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ratingGroup")]
        [DataMember(Name="ratingGroup",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? ratingGroup  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("requestedUnit")]
        [DataMember(Name="requestedUnit",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? requestedUnit  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("requestSubType")]
        [DataMember(Name="requestSubType",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String requestSubType  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("serviceContextId")]
        [DataMember(Name="serviceContextId",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String serviceContextId  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("serviceId")]
        [DataMember(Name="serviceId",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? serviceId  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("serviceRating")]
        [DataMember(Name="serviceRating",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String serviceRating  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("srsv_ID")]
        [DataMember(Name="srsv_ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int64? srsv_ID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("srsv_LinkID")]
        [DataMember(Name="srsv_LinkID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int64? srsv_LinkID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("srsv_Remark")]
        [DataMember(Name="srsv_Remark",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String srsv_Remark  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("subscriptionId")]
        [DataMember(Name="subscriptionId",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String subscriptionId  { get; set; }
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "BEGINTIMESTAMP": return beginTimeStamp;
				    case "CHECKBALANCEMODE": return CheckBalanceMode;
				    case "CONSUMEDUNIT": return consumedUnit;
				    case "DESTINATIONIDDATA": return destinationIdData;
				    case "DESTINATIONIDTYPE": return destinationIdType;
				    case "ENTITYNAME": return EntityName;
				    case "ERRFORMAT": return ErrFormat;
				    case "IDTYPE": return IDType;
				    case "INVOCATIONSEQUENCENUMBER": return invocationSequenceNumber;
				    case "INVOCATIONTIMESTAMP": return invocationTimeStamp;
				    case "LANG": return lang;
				    case "LOCATION": return location;
				    case "MODE": return mode;
				    case "NFCONSUMERIDENTIFICATION": return nfConsumerIdentification;
				    case "ONETIMEEVENT": return oneTimeEvent;
				    case "ONETIMEEVENTTYPE": return oneTimeEventType;
				    case "PARENTID": return ParentID;
				    case "RATINGGROUP": return ratingGroup;
				    case "REQUESTEDUNIT": return requestedUnit;
				    case "REQUESTSUBTYPE": return requestSubType;
				    case "SERVICECONTEXTID": return serviceContextId;
				    case "SERVICEID": return serviceId;
				    case "SERVICERATING": return serviceRating;
				    case "SRSV_ID": return srsv_ID;
				    case "SRSV_LINKID": return srsv_LinkID;
				    case "SRSV_REMARK": return srsv_Remark;
				    case "SUBSCRIPTIONID": return subscriptionId;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "BEGINTIMESTAMP":if (value == null)beginTimeStamp=null;else beginTimeStamp=Convert.ToDateTime(value);break;
                case "CHECKBALANCEMODE":if (value == null)CheckBalanceMode=null;else CheckBalanceMode=Convert.ToInt32(value);break;
                case "CONSUMEDUNIT":if (value == null)consumedUnit=null;else consumedUnit=Convert.ToInt32(value);break;
                case "DESTINATIONIDDATA":destinationIdData=(string)value;break;
                case "DESTINATIONIDTYPE":destinationIdType=(string)value;break;
                case "ENTITYNAME":EntityName=(string)value;break;
                case "ERRFORMAT":ErrFormat=(string)value;break;
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                case "INVOCATIONSEQUENCENUMBER":if (value == null)invocationSequenceNumber=null;else invocationSequenceNumber=Convert.ToInt32(value);break;
                case "INVOCATIONTIMESTAMP":if (value == null)invocationTimeStamp=null;else invocationTimeStamp=Convert.ToDateTime(value);break;
                case "LANG":lang=(string)value;break;
                case "LOCATION":location=(string)value;break;
                case "MODE":mode=(string)value;break;
                case "NFCONSUMERIDENTIFICATION":nfConsumerIdentification=(string)value;break;
                case "ONETIMEEVENT":oneTimeEvent=(string)value;break;
                case "ONETIMEEVENTTYPE":oneTimeEventType=(string)value;break;
                case "PARENTID":ParentID=(string)value;break;
                case "RATINGGROUP":if (value == null)ratingGroup=null;else ratingGroup=Convert.ToInt32(value);break;
                case "REQUESTEDUNIT":if (value == null)requestedUnit=null;else requestedUnit=Convert.ToInt32(value);break;
                case "REQUESTSUBTYPE":requestSubType=(string)value;break;
                case "SERVICECONTEXTID":serviceContextId=(string)value;break;
                case "SERVICEID":if (value == null)serviceId=null;else serviceId=Convert.ToInt32(value);break;
                case "SERVICERATING":serviceRating=(string)value;break;
                case "SRSV_ID":if (value == null)srsv_ID=null;else srsv_ID=Convert.ToInt64(value);break;
                case "SRSV_LINKID":if (value == null)srsv_LinkID=null;else srsv_LinkID=Convert.ToInt64(value);break;
                case "SRSV_REMARK":srsv_Remark=(string)value;break;
                case "SUBSCRIPTIONID":subscriptionId=(string)value;break;
                }
            }
		}
		#endregion
	}
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="RatingData_Update_Response_ACTION",Namespace = "")]
	public class RatingData_Update_Response_ACTION: BaseEntity, IModifiedTag
	{
         #region [Properties]
			/// <summary>
			/// No description
			/// <para/>
			/// invocationSequenceNumber
			/// </summary>
			///<remarks>
			///No description
			///</remarks>
			[JsonProperty("invocationSequenceNumber")]
			[DataMember(Name="invocationSequenceNumber", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
            public global::System.Int32? invocationSequenceNumber  { get; set; }
			/// <summary>
			/// No description
			/// <para/>
			/// invocationTimeStamp
			/// </summary>
			///<remarks>
			///No description
			///</remarks>
			[JsonProperty("invocationTimeStamp")]
			[DataMember(Name="invocationTimeStamp", EmitDefaultValue = false)]
			/*norestr*/

            public global::System.DateTime? invocationTimeStamp  { get; set; }
			/// <summary>
			/// No description
			/// <para/>
			/// location
			/// </summary>
			///<remarks>
			///No description
			///</remarks>
			[JsonProperty("location")]
			[DataMember(Name="location", EmitDefaultValue = false)]
			/*norestr*/

            public global::System.String location  { get; set; }
			/// <summary>
			/// No description
			/// <para/>
			/// serviceRating
			/// </summary>
			///<remarks>
			///No description
			///</remarks>
			[JsonProperty("serviceRating")]
			[DataMember(Name="serviceRating", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
            public global::System.String serviceRating  { get; set; }
			/// <summary>
			/// No description
			/// <para/>
			/// srsv_ID
			/// </summary>
			///<remarks>
			///No description
			///</remarks>
			[JsonProperty("srsv_ID")]
			[DataMember(Name="srsv_ID", EmitDefaultValue = false)]
			/*norestr*/

            public global::System.Int64? srsv_ID  { get; set; }
			/// <summary>
			/// No description
			/// <para/>
			/// srsv_LinkID
			/// </summary>
			///<remarks>
			///No description
			///</remarks>
			[JsonProperty("srsv_LinkID")]
			[DataMember(Name="srsv_LinkID", EmitDefaultValue = false)]
			/*norestr*/

            public global::System.Int64? srsv_LinkID  { get; set; }
         #endregion
        [JsonIgnore]
	    public DateTime? If_Modified_Since { get {return null;}}
        #region [IDateModified]
        [JsonIgnore]
	    public DateTime? LastModified { get { return If_Modified_Since;}}
        #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                }
            }
		}
		#endregion
    }
#endregion
#region [ServiceSubscriptions]
  
    
    ///<remarks>POST &lt;host&gt;[:&lt;port&gt;]/api/v1/bss/templatesubscriptions/[parentid]/servicesubscriptions
///</remarks>
    ///Templatesubscriptions
    [EntitySubentity("Templatesubscriptions")]

	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="ServiceSubscriptions_Request_SET",Namespace = "")]
	public class ServiceSubscriptions_Request_SET : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// Эффективная дата для изменения подписки на услугу, используется как DateSet для новых изменений подписки - количества, статуса или PriceRatio
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("EffectiveDate")]
        [DataMember(Name="EffectiveDate",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? EffectiveDate  { get; set; }
              /// <summary>
        /// Дополнительные параметры для provisioning
	    ///<list type='bullet'>
///<item>
///	<description>json</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("TaskJsonData")]
        [DataMember(Name="TaskJsonData",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String TaskJsonData  { get; set; }
              /// <summary>
        /// Дата завершения подписки на услугу, время не требуется. Для разовых подписок параметр не передается или должен быть равен DateSet
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("DateDrop")]
        [DataMember(Name="DateDrop",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? DateDrop  { get; set; }
              /// <summary>
        /// Явное указание суммы подписки - для переопределения цены пакета в случае использования FMC подписок (сумма списания на основании суммы платежа)
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Amount")]
        [DataMember(Name="Amount",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Decimal? Amount  { get; set; } = 0;
              /// <summary>
        /// Явное переопределение стоимости услуги через коеффициент - уменьшает или увеличивает сумму подписки на основании цены из Тарифного пакета.
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 1</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("PriceRatio")]
        [DataMember(Name="PriceRatio",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Decimal? PriceRatio  { get; set; } = 1;
              /// <summary>
        /// Явное указание кол-ва подписки - по умолчанию подписка создается с кол-вом =1. Используется в качестве мультпликатора для подписок на услугу более одного раза в отчетном периоде.
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 1</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Count")]
        [DataMember(Name="Count",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? Count  { get; set; } = 1;
              /// <summary>
        /// Зарезервировано
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("PacketID")]
        [DataMember(Name="PacketID",EmitDefaultValue = false)]
		/*norestr*/
[DocIgnore]

	public global::System.Int32? PacketID  { get; set; }
              /// <summary>
        /// Зарезервировано
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("TaskID")]
        [DataMember(Name="TaskID",EmitDefaultValue = false)]
		/*norestr*/
[DocIgnore]

	public global::System.Int32? TaskID  { get; set; }
              /// <summary>
        /// Явное указание статуса услуги на подписке - используется для разовых подписок с целью изменения статусов услуги для подписок FMC.
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("StatusID")]
        [DataMember(Name="StatusID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? StatusID  { get; set; }
              /// <summary>
        /// Причина изменения параметров подписки
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Remark")]
        [DataMember(Name="Remark",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Remark  { get; set; }
              /// <summary>
        /// Дата завершения подписки на услугу, время не требуется
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("DateSet")]
        [DataMember(Name="DateSet",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? DateSet  { get; set; }
              /// <summary>
        /// Идентификатор услуги - значения соответствуют SRLS_ID и PRCL_ID 
	    ///<list type='bullet'>
///<item>
///	<description>значения соответствуют SRLS_ID и PRCL_ID</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ServiceCode")]
        [DataMember(Name="ServiceCode",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String ServiceCode  { get; set; }
              /// <summary>
        /// Пользователь данного изменения
	    ///<list type='bullet'>
///<item>
///	<term>Username </term>
///	<description> - пользователь из контекста</description>
///</item>
///<item>
///	<term>NULL </term>
///	<description> -если неизвестен</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedBy")]
        [DataMember(Name="ModifiedBy",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedBy  { get; set; }
              /// <summary>
        /// Источник данного изменения
	    ///<list type='bullet'>
///<item>
///	<term>IP </term>
///	<description> -адрес/имя компьютера</description>
///</item>
///<item>
///	<term>NULL </term>
///	<description> - если неизвестен</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedFrom")]
        [DataMember(Name="ModifiedFrom",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedFrom  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("OverrideHistory")]
        [DataMember(Name="OverrideHistory",EmitDefaultValue = false)]
		/*norestr*/
[DocIgnore]

	public global::System.Int32? OverrideHistory  { get; set; }
              /// <summary>
        /// Идентификатор подписки TemplateSubscriptions - обязательное поле для изменения записи
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("ParentID")]
        [DataMember(Name="ParentID",EmitDefaultValue = false)]
		[JsonRestrictedByValue("<empty>")]

[SecondaryKey("TemplateSubscriptions_Request_SET","ID")]/*SET*/
	public global::System.Int32? ParentID 	{
		get 
		{ 
			if(emptyId.Equals(this.ParentId))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.ParentId, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.ParentId = value.ToString(); }
	}
              /// <summary>
        /// Идентификатор подписки на услугу - обьединяет множественные подписи одной услуги в разное время в одно целое.
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("ID")]
        [DataMember(Name="ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ID 	{
		get {{return this.Id;}}
		set {{ this.Id = value; }}
	}
              /// <summary>
        /// Формат вывода ошибки
	    ///<list type='bullet'>
///<item>
///	<description>'json'</description>
///</item>
///<item>
///	<description>'xml'</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 'json'</para>
///<para>Max length : 25</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ErrFormat")]
        [DataMember(Name="ErrFormat",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ErrFormat     {
		get { return Format ?? "json"; }
		set { this.Format = value; }
	}
    //Base Attrribute '' skipped
          /// <summary>
        /// Идентификатор Extentions (Номера MSISDN)
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ExtentionID")]
        [DataMember(Name="ExtentionID",EmitDefaultValue = false)]
		/*norestr*/
[DocIgnore]

	public global::System.Int32? ExtentionID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModDate")]
        [DataMember(Name="ModDate",EmitDefaultValue = false)]
		/*norestr*/
[DocIgnore]

	public global::System.DateTime? ModDate  { get; set; }
              /// <summary>
        /// Режим подключения Пакетов и услуг
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Mode")]
        [DataMember(Name="Mode",EmitDefaultValue = false)]
		/*norestr*/
[DocIgnore]

	public global::System.String Mode  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ServiceMode")]
        [DataMember(Name="ServiceMode",EmitDefaultValue = false)]
		/*norestr*/
[DocIgnore]

	public global::System.String ServiceMode  { get; set; }
              /// <summary>
        /// Признак первичной активации или изменения существующей подписки
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("TariffBegin")]
        [DataMember(Name="TariffBegin",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? TariffBegin  { get; set; }
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "EFFECTIVEDATE": return EffectiveDate;
				    case "TASKJSONDATA": return TaskJsonData;
				    case "DATEDROP": return DateDrop;
				    case "AMOUNT": return Amount;
				    case "PRICERATIO": return PriceRatio;
				    case "COUNT": return Count;
				    case "PACKETID": return PacketID;
				    case "TASKID": return TaskID;
				    case "STATUSID": return StatusID;
				    case "REMARK": return Remark;
				    case "DATESET": return DateSet;
				    case "SERVICECODE": return ServiceCode;
				    case "MODIFIEDBY": return ModifiedBy;
				    case "MODIFIEDFROM": return ModifiedFrom;
				    case "OVERRIDEHISTORY": return OverrideHistory;
				    case "PARENTID": return ParentID;
				    case "ID": return ID;
				    case "ERRFORMAT": return ErrFormat;
				    case "LANG": return Lang;
				    case "EXTENTIONID": return ExtentionID;
				    case "MODDATE": return ModDate;
				    case "MODE": return Mode;
				    case "SERVICEMODE": return ServiceMode;
				    case "TARIFFBEGIN": return TariffBegin;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "EFFECTIVEDATE":if (value == null)EffectiveDate=null;else EffectiveDate=Convert.ToDateTime(value);break;
                case "TASKJSONDATA":TaskJsonData=(string)value;break;
                case "DATEDROP":if (value == null)DateDrop=null;else DateDrop=Convert.ToDateTime(value);break;
                case "AMOUNT":if (value == null)Amount=null;else Amount=Convert.ToDecimal(value);break;
                case "PRICERATIO":if (value == null)PriceRatio=null;else PriceRatio=Convert.ToDecimal(value);break;
                case "COUNT":if (value == null)Count=null;else Count=Convert.ToInt32(value);break;
                case "PACKETID":if (value == null)PacketID=null;else PacketID=Convert.ToInt32(value);break;
                case "TASKID":if (value == null)TaskID=null;else TaskID=Convert.ToInt32(value);break;
                case "STATUSID":if (value == null)StatusID=null;else StatusID=Convert.ToInt32(value);break;
                case "REMARK":Remark=(string)value;break;
                case "DATESET":if (value == null)DateSet=null;else DateSet=Convert.ToDateTime(value);break;
                case "SERVICECODE":ServiceCode=(string)value;break;
                case "MODIFIEDBY":ModifiedBy=(string)value;break;
                case "MODIFIEDFROM":ModifiedFrom=(string)value;break;
                case "OVERRIDEHISTORY":if (value == null)OverrideHistory=null;else OverrideHistory=Convert.ToInt32(value);break;
                case "PARENTID":if (value == null)ParentID=null;else ParentID=Convert.ToInt32(value);break;
                case "ID":ID=(string)value;break;
                case "ERRFORMAT":ErrFormat=(string)value;break;
                case "LANG":Lang=(string)value;break;
                case "EXTENTIONID":if (value == null)ExtentionID=null;else ExtentionID=Convert.ToInt32(value);break;
                case "MODDATE":if (value == null)ModDate=null;else ModDate=Convert.ToDateTime(value);break;
                case "MODE":Mode=(string)value;break;
                case "SERVICEMODE":ServiceMode=(string)value;break;
                case "TARIFFBEGIN":if (value == null)TariffBegin=null;else TariffBegin=Convert.ToInt32(value);break;
                }
            }
		}
		#endregion
	}
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="ServiceSubscriptions_Response_SET",Namespace = "")]
	public class ServiceSubscriptions_Response_SET: BaseEntity, IModifiedTag
	{
         #region [Properties]
//Base Attrribute '' skipped
			/// <summary>
			/// Идентификатор Tasks, если изменение статута услуги по данной подписки происходит в текущих сутках. Используется для изменения статуса в случе необходимости.
			/// <para/>
			/// Tsk_ID
			/// </summary>
			///<remarks>
			///Идентификатор Tasks, если изменение статута услуги по данной подписки происходит в текущих сутках. Используется для изменения статуса в случе необходимости.
			///</remarks>
			[JsonProperty("TaskID")]
			[DataMember(Name="TaskID", EmitDefaultValue = false)]
			/*norestr*/
[DocIgnore]

            public global::System.Int32? TaskID  { get; set; }
			/// <summary>
			/// Идентификатор подписки на услугу - обьединяет множественные подписи одной услуги в разное время в одно целое.
			/// <para/>
			/// Srs_SessionID
			/// </summary>
			///<remarks>
			///Идентификатор подписки на услугу - обьединяет множественные подписи одной услуги в разное время в одно целое.
			///</remarks>
			[JsonProperty("ID")]
			[DataMember(Name="ID", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
            public global::System.String ID 	{
		get {{return this.Id;}}
		set {{ this.Id = value; }}
	}
         #endregion
        [JsonIgnore]
	    public DateTime? If_Modified_Since { get {return null;}}
        #region [IDateModified]
        [JsonIgnore]
	    public DateTime? LastModified { get { return If_Modified_Since;}}
        #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "LANG": return Lang;
				    case "TASKID": return TaskID;
				    case "ID": return ID;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "LANG":Lang=(string)value;break;
                case "TASKID":if (value == null)TaskID=null;else TaskID=Convert.ToInt32(value);break;
                case "ID":ID=(string)value;break;
                }
            }
		}
		#endregion
    }
#endregion
#region [Subscribers]
  
    
    ///<remarks>GET &lt;host&gt;[:&lt;port&gt;]/api/v1/bss/Subscribers
///</remarks>
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Subscribers_Request_GET",Namespace = "")]
	public class Subscribers_Request_GET : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("SortColumn")]
        [DataMember(Name="SortColumn",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String SortColumn  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : ASC</para>
///<para>Max length : 20</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("SortDirection")]
        [DataMember(Name="SortDirection",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String SortDirection  { get; set; } = "ASC";
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("Srv_ID")]
        [DataMember(Name="Srv_ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? Srv_ID  { get; set; } = 0;
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("Srv_Name")]
        [DataMember(Name="Srv_Name",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Srv_Name  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("Sst_ID")]
        [DataMember(Name="Sst_ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? Sst_ID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("tnst_Code")]
        [DataMember(Name="tnst_Code",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String tnst_Code  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("trf_ID")]
        [DataMember(Name="trf_ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? trf_ID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("abn_Employee_ID")]
        [DataMember(Name="abn_Employee_ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String abn_Employee_ID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("abn_ExternalID")]
        [DataMember(Name="abn_ExternalID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? abn_ExternalID  { get; set; }
              /// <summary>
        /// Идентификатор Абонента
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ID")]
        [DataMember(Name="ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? ID 	{
		get 
		{ 
			if(emptyId.Equals(this.Id))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.Id, out result))
				return result; 
			else
            {
return 0;
            }
		}
		set { this.Id = value.ToString(); }
	}
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("LastModifiedDate")]
        [DataMember(Name="LastModifiedDate",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? LastModifiedDate  { get; set; }
    //Base Attrribute '' skipped
          /// <summary>
        /// Идентификатор Ассоциации или корня 
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ParentID")]
        [DataMember(Name="ParentID",EmitDefaultValue = false)]
		[JsonRestrictedByValue("<empty>")]

	public global::System.Int32? ParentID 	{
		get 
		{ 
			if(emptyId.Equals(this.ParentId))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.ParentId, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.ParentId = value.ToString(); }
	}
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("abn_IsExistAD")]
        [DataMember(Name="abn_IsExistAD",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? abn_IsExistAD  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("abn_LastName")]
        [DataMember(Name="abn_LastName",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String abn_LastName  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("abn_WorkPlace")]
        [DataMember(Name="abn_WorkPlace",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String abn_WorkPlace  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("Acat_ID")]
        [DataMember(Name="Acat_ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? Acat_ID  { get; set; } = 0;
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("Accl_ID")]
        [DataMember(Name="Accl_ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? Accl_ID  { get; set; } = 0;
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("Acnt_Number")]
        [DataMember(Name="Acnt_Number",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Acnt_Number  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("Actp_ID")]
        [DataMember(Name="Actp_ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? Actp_ID  { get; set; } = 0;
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("Adlsb_Code")]
        [DataMember(Name="Adlsb_Code",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? Adlsb_Code  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("Aptp_ID")]
        [DataMember(Name="Aptp_ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? Aptp_ID  { get; set; } = 0;
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("aut_NameAuthCode")]
        [DataMember(Name="aut_NameAuthCode",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String aut_NameAuthCode  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("Bac_Number")]
        [DataMember(Name="Bac_Number",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Bac_Number  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("bll_Number")]
        [DataMember(Name="bll_Number",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String bll_Number  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("BossLastName")]
        [DataMember(Name="BossLastName",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String BossLastName  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("Cntr_Name")]
        [DataMember(Name="Cntr_Name",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Cntr_Name  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("com_ID")]
        [DataMember(Name="com_ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? com_ID  { get; set; } = 0;
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("dep_ID")]
        [DataMember(Name="dep_ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? dep_ID  { get; set; } = 0;
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("Dls_ID")]
        [DataMember(Name="Dls_ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? Dls_ID  { get; set; } = 0;
              /// <summary>
        /// Формат вывода ошибки
	    ///<list type='bullet'>
///<item>
///	<description>'json'</description>
///</item>
///<item>
///	<description>'xml'</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : xml</para>
///<para>Max length : 25</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ErrFormat")]
        [DataMember(Name="ErrFormat",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ErrFormat     {
		get { return Format ?? "xml"; }
		set { this.Format = value; }
	}
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ext_ExtNum")]
        [DataMember(Name="ext_ExtNum",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ext_ExtNum  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("grp_ID")]
        [DataMember(Name="grp_ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? grp_ID  { get; set; } = 0;
              /// <summary>
        /// Признак передачи внешнего значения ID
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - внешний ID (для BIS всегда устанавливаем в 1)</description>
///</item>
///<item>
///	<term>0 </term>
///	<description> - внутренний ID</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("IDType")]
        [DataMember(Name="IDType",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? IDType  { get; set; } = 0;
              /// <summary>
        /// Дата модификации для http-тега If-Modified-Since
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("CacheControlDate")]
        [DataMember(Name="CacheControlDate",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? CacheControlDate  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("jsonFieldsName")]
        [DataMember(Name="jsonFieldsName",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String jsonFieldsName  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("jsonFilter")]
        [DataMember(Name="jsonFilter",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String jsonFilter  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("jsonFilterContain")]
        [DataMember(Name="jsonFilterContain",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? jsonFilterContain  { get; set; } = 0;
              /// <summary>
        /// Указание языка для набора multi-language данных 
	    ///<list type='bullet'>
///<item>
///	<term>'uk' </term>
///	<description> -украинский</description>
///</item>
///<item>
///	<term>'ru' </term>
///	<description> -руский </description>
///</item>
///<item>
///	<term>'en' </term>
///	<description> -английский</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("lang")]
        [DataMember(Name="lang",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
			[JsonIgnore]
	public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("Lng_ID")]
        [DataMember(Name="Lng_ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? Lng_ID  { get; set; }
              /// <summary>
        /// Режим подключения Пакетов и услуг
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("mode")]
        [DataMember(Name="mode",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? mode  { get; set; } = 0;
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("Ntw_ID")]
        [DataMember(Name="Ntw_ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? Ntw_ID  { get; set; } = 0;
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 1</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("PageNumber")]
        [DataMember(Name="PageNumber",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? PageNumber  { get; set; } = 1;
              /// <summary>
        /// Кол-во записей на странице (server paging)
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 50</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("PageSize")]
        [DataMember(Name="PageSize",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? PageSize  { get; set; } = 50;
              /// <summary>
        /// Тип профиля
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ProfileType")]
        [DataMember(Name="ProfileType",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? ProfileType  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("Rgsc_ID")]
        [DataMember(Name="Rgsc_ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? Rgsc_ID  { get; set; } = 0;
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ShowBalances")]
        [DataMember(Name="ShowBalances",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? ShowBalances  { get; set; } = 0;
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ShowEntities")]
        [DataMember(Name="ShowEntities",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ShowEntities  { get; set; }
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "SORTCOLUMN": return SortColumn;
				    case "SORTDIRECTION": return SortDirection;
				    case "SRV_ID": return Srv_ID;
				    case "SRV_NAME": return Srv_Name;
				    case "SST_ID": return Sst_ID;
				    case "TNST_CODE": return tnst_Code;
				    case "TRF_ID": return trf_ID;
				    case "ABN_EMPLOYEE_ID": return abn_Employee_ID;
				    case "ABN_EXTERNALID": return abn_ExternalID;
				    case "ID": return ID;
				    case "LASTMODIFIEDDATE": return LastModifiedDate;
				    case "FORMAT": return Format;
				    case "PARENTID": return ParentID;
				    case "ABN_ISEXISTAD": return abn_IsExistAD;
				    case "ABN_LASTNAME": return abn_LastName;
				    case "ABN_WORKPLACE": return abn_WorkPlace;
				    case "ACAT_ID": return Acat_ID;
				    case "ACCL_ID": return Accl_ID;
				    case "ACNT_NUMBER": return Acnt_Number;
				    case "ACTP_ID": return Actp_ID;
				    case "ADLSB_CODE": return Adlsb_Code;
				    case "APTP_ID": return Aptp_ID;
				    case "AUT_NAMEAUTHCODE": return aut_NameAuthCode;
				    case "BAC_NUMBER": return Bac_Number;
				    case "BLL_NUMBER": return bll_Number;
				    case "BOSSLASTNAME": return BossLastName;
				    case "CNTR_NAME": return Cntr_Name;
				    case "COM_ID": return com_ID;
				    case "DEP_ID": return dep_ID;
				    case "DLS_ID": return Dls_ID;
				    case "ERRFORMAT": return ErrFormat;
				    case "EXT_EXTNUM": return ext_ExtNum;
				    case "GRP_ID": return grp_ID;
				    case "IDTYPE": return IDType;
				    case "CACHECONTROLDATE": return CacheControlDate;
				    case "JSONFIELDSNAME": return jsonFieldsName;
				    case "JSONFILTER": return jsonFilter;
				    case "JSONFILTERCONTAIN": return jsonFilterContain;
				    case "LANG": return lang;
				    case "LNG_ID": return Lng_ID;
				    case "MODE": return mode;
				    case "NTW_ID": return Ntw_ID;
				    case "PAGENUMBER": return PageNumber;
				    case "PAGESIZE": return PageSize;
				    case "PROFILETYPE": return ProfileType;
				    case "RGSC_ID": return Rgsc_ID;
				    case "SHOWBALANCES": return ShowBalances;
				    case "SHOWENTITIES": return ShowEntities;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "SORTCOLUMN":SortColumn=(string)value;break;
                case "SORTDIRECTION":SortDirection=(string)value;break;
                case "SRV_ID":if (value == null)Srv_ID=null;else Srv_ID=Convert.ToInt32(value);break;
                case "SRV_NAME":Srv_Name=(string)value;break;
                case "SST_ID":if (value == null)Sst_ID=null;else Sst_ID=Convert.ToInt32(value);break;
                case "TNST_CODE":tnst_Code=(string)value;break;
                case "TRF_ID":if (value == null)trf_ID=null;else trf_ID=Convert.ToInt32(value);break;
                case "ABN_EMPLOYEE_ID":abn_Employee_ID=(string)value;break;
                case "ABN_EXTERNALID":if (value == null)abn_ExternalID=null;else abn_ExternalID=Convert.ToInt32(value);break;
                case "ID":if (value == null)ID=null;else ID=Convert.ToInt32(value);break;
                case "LASTMODIFIEDDATE":if (value == null)LastModifiedDate=null;else LastModifiedDate=Convert.ToDateTime(value);break;
                case "FORMAT":Format=(string)value;break;
                case "PARENTID":if (value == null)ParentID=null;else ParentID=Convert.ToInt32(value);break;
                case "ABN_ISEXISTAD":if (value == null)abn_IsExistAD=null;else abn_IsExistAD=Convert.ToInt32(value);break;
                case "ABN_LASTNAME":abn_LastName=(string)value;break;
                case "ABN_WORKPLACE":abn_WorkPlace=(string)value;break;
                case "ACAT_ID":if (value == null)Acat_ID=null;else Acat_ID=Convert.ToInt32(value);break;
                case "ACCL_ID":if (value == null)Accl_ID=null;else Accl_ID=Convert.ToInt32(value);break;
                case "ACNT_NUMBER":Acnt_Number=(string)value;break;
                case "ACTP_ID":if (value == null)Actp_ID=null;else Actp_ID=Convert.ToInt32(value);break;
                case "ADLSB_CODE":if (value == null)Adlsb_Code=null;else Adlsb_Code=Convert.ToInt32(value);break;
                case "APTP_ID":if (value == null)Aptp_ID=null;else Aptp_ID=Convert.ToInt32(value);break;
                case "AUT_NAMEAUTHCODE":aut_NameAuthCode=(string)value;break;
                case "BAC_NUMBER":Bac_Number=(string)value;break;
                case "BLL_NUMBER":bll_Number=(string)value;break;
                case "BOSSLASTNAME":BossLastName=(string)value;break;
                case "CNTR_NAME":Cntr_Name=(string)value;break;
                case "COM_ID":if (value == null)com_ID=null;else com_ID=Convert.ToInt32(value);break;
                case "DEP_ID":if (value == null)dep_ID=null;else dep_ID=Convert.ToInt32(value);break;
                case "DLS_ID":if (value == null)Dls_ID=null;else Dls_ID=Convert.ToInt32(value);break;
                case "ERRFORMAT":ErrFormat=(string)value;break;
                case "EXT_EXTNUM":ext_ExtNum=(string)value;break;
                case "GRP_ID":if (value == null)grp_ID=null;else grp_ID=Convert.ToInt32(value);break;
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                case "CACHECONTROLDATE":if (value == null)CacheControlDate=null;else CacheControlDate=Convert.ToDateTime(value);break;
                case "JSONFIELDSNAME":jsonFieldsName=(string)value;break;
                case "JSONFILTER":jsonFilter=(string)value;break;
                case "JSONFILTERCONTAIN":if (value == null)jsonFilterContain=null;else jsonFilterContain=Convert.ToInt32(value);break;
                case "LANG":lang=(string)value;break;
                case "LNG_ID":if (value == null)Lng_ID=null;else Lng_ID=Convert.ToInt32(value);break;
                case "MODE":if (value == null)mode=null;else mode=Convert.ToInt32(value);break;
                case "NTW_ID":if (value == null)Ntw_ID=null;else Ntw_ID=Convert.ToInt32(value);break;
                case "PAGENUMBER":if (value == null)PageNumber=null;else PageNumber=Convert.ToInt32(value);break;
                case "PAGESIZE":if (value == null)PageSize=null;else PageSize=Convert.ToInt32(value);break;
                case "PROFILETYPE":if (value == null)ProfileType=null;else ProfileType=Convert.ToInt32(value);break;
                case "RGSC_ID":if (value == null)Rgsc_ID=null;else Rgsc_ID=Convert.ToInt32(value);break;
                case "SHOWBALANCES":if (value == null)ShowBalances=null;else ShowBalances=Convert.ToInt32(value);break;
                case "SHOWENTITIES":ShowEntities=(string)value;break;
                }
            }
		}
		#endregion
	}
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Subscribers_Response_GET",Namespace = "")]
	public class Subscribers_Response_GET: BaseEntity, IModifiedTag
	{
         #region [Properties]
			/// <summary>
			/// Дата модификации для http-тега If-Modified-Since
			/// <para/>
			/// IfModifiedSinceDate
			/// </summary>
			///<remarks>
			///Дата модификации для http-тега If-Modified-Since
			///</remarks>
			[JsonProperty("CacheControlDate")]
			[DataMember(Name="CacheControlDate", EmitDefaultValue = false)]
			/*norestr*/

            public global::System.DateTime? CacheControlDate  { get; set; }
			/// <summary>
			/// Указание языка для набора multi-language данных 
			/// <para/>
			/// Lang
			/// </summary>
			///<remarks>
			///Указание языка для набора multi-language данных 
			///</remarks>
			[JsonProperty("lang")]
			[DataMember(Name="lang", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
			[JsonIgnore]
            public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
         #endregion
        [JsonIgnore]
	    public DateTime? If_Modified_Since { get {return CacheControlDate;}}
        #region [IDateModified]
        [JsonIgnore]
	    public DateTime? LastModified { get { return If_Modified_Since;}}
        #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "CACHECONTROLDATE": return CacheControlDate;
				    case "LANG": return lang;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "CACHECONTROLDATE":if (value == null)CacheControlDate=null;else CacheControlDate=Convert.ToDateTime(value);break;
                case "LANG":lang=(string)value;break;
                }
            }
		}
		#endregion
    }
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Subscribers_Response_GET_OUTPUT",Namespace = "")]
	public class Subscribers_Response_GET_OUTPUT : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_HasNotEmptyPrepaid")]
        [DataMember(Name="abn_HasNotEmptyPrepaid",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? abn_HasNotEmptyPrepaid  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_LastName")]
        [DataMember(Name="abn_LastName",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String abn_LastName  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_Balance")]
        [DataMember(Name="abn_Balance",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Decimal? abn_Balance  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_CreateDate")]
        [DataMember(Name="abn_CreateDate",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.DateTime? abn_CreateDate  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_Date")]
        [DataMember(Name="abn_Date",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.DateTime? abn_Date  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_Employe_Export_ID")]
        [DataMember(Name="abn_Employe_Export_ID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String abn_Employe_Export_ID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_Employee_ID")]
        [DataMember(Name="abn_Employee_ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String abn_Employee_ID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_ExternalID")]
        [DataMember(Name="abn_ExternalID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? abn_ExternalID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_FirstName")]
        [DataMember(Name="abn_FirstName",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String abn_FirstName  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_Guid")]
        [DataMember(Name="abn_Guid",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Guid? abn_Guid  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Max length : 4</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ID")]
        [DataMember(Name="ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? ID 	{
		get 
		{ 
			if(emptyId.Equals(this.Id))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.Id, out result))
				return result; 
			else
            {
return 0;
            }
		}
		set { this.Id = value.ToString(); }
	}
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ParentID")]
        [DataMember(Name="ParentID",EmitDefaultValue = false)]
		[JsonRestrictedByValue("<empty>")]

	public global::System.Int32? ParentID 	{
		get 
		{ 
			if(emptyId.Equals(this.ParentId))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.ParentId, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.ParentId = value.ToString(); }
	}
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_IsExistAD")]
        [DataMember(Name="abn_IsExistAD",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? abn_IsExistAD  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_IsGuest")]
        [DataMember(Name="abn_IsGuest",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? abn_IsGuest  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_Login")]
        [DataMember(Name="abn_Login",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String abn_Login  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_MiddleName")]
        [DataMember(Name="abn_MiddleName",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String abn_MiddleName  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_ModifiedBy")]
        [DataMember(Name="abn_ModifiedBy",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String abn_ModifiedBy  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_ModifiedDate")]
        [DataMember(Name="abn_ModifiedDate",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.DateTime? abn_ModifiedDate  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_ModifiedFrom")]
        [DataMember(Name="abn_ModifiedFrom",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String abn_ModifiedFrom  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_NestedSets_Left")]
        [DataMember(Name="abn_NestedSets_Left",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? abn_NestedSets_Left  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_NestedSets_Right")]
        [DataMember(Name="abn_NestedSets_Right",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? abn_NestedSets_Right  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_Password")]
        [DataMember(Name="abn_Password",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String abn_Password  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_PositionCode")]
        [DataMember(Name="abn_PositionCode",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String abn_PositionCode  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_ShowPhoneDirectory")]
        [DataMember(Name="abn_ShowPhoneDirectory",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? abn_ShowPhoneDirectory  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_WorkPlace")]
        [DataMember(Name="abn_WorkPlace",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String abn_WorkPlace  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("AbonentFullName")]
        [DataMember(Name="AbonentFullName",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String AbonentFullName  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("acnt_ID")]
        [DataMember(Name="acnt_ID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? acnt_ID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("acnt_ID_count")]
        [DataMember(Name="acnt_ID_count",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? acnt_ID_count  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("acnt_IsPersonal")]
        [DataMember(Name="acnt_IsPersonal",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? acnt_IsPersonal  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("acnt_Number")]
        [DataMember(Name="acnt_Number",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String acnt_Number  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("acnt_Number_Personal")]
        [DataMember(Name="acnt_Number_Personal",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String acnt_Number_Personal  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Max length : 4</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("actp_ID")]
        [DataMember(Name="actp_ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? actp_ID  { get; set; } = 0;
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Max length : 4</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("dep_ID")]
        [DataMember(Name="dep_ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? dep_ID  { get; set; } = 0;
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("actpd_Name")]
        [DataMember(Name="actpd_Name",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String actpd_Name  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Actpd_Name_Personal")]
        [DataMember(Name="Actpd_Name_Personal",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String Actpd_Name_Personal  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("aut_ID_count")]
        [DataMember(Name="aut_ID_count",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? aut_ID_count  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("aut_NameAuthCode")]
        [DataMember(Name="aut_NameAuthCode",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String aut_NameAuthCode  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("aut_NumberAts")]
        [DataMember(Name="aut_NumberAts",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? aut_NumberAts  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("BossFullName")]
        [DataMember(Name="BossFullName",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String BossFullName  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("cntr_ID_count")]
        [DataMember(Name="cntr_ID_count",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? cntr_ID_count  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("cntr_Name")]
        [DataMember(Name="cntr_Name",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String cntr_Name  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Max length : 4</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("com_Id")]
        [DataMember(Name="com_Id",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? com_Id  { get; set; } = 0;
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ext_ExtNum")]
        [DataMember(Name="ext_ExtNum",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ext_ExtNum  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ext_ID_count")]
        [DataMember(Name="ext_ID_count",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? ext_ID_count  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Max length : 4</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("grp_ID")]
        [DataMember(Name="grp_ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? grp_ID  { get; set; } = 0;
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("grp_Name")]
        [DataMember(Name="grp_Name",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String grp_Name  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("CacheControlDate")]
        [DataMember(Name="CacheControlDate",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? CacheControlDate  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("isEditAllow")]
        [DataMember(Name="isEditAllow",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? isEditAllow  { get; set; }
              /// <summary>
        /// Указание языка для набора multi-language данных 
	    ///<list type='bullet'>
///<item>
///	<term>'uk' </term>
///	<description> -украинский</description>
///</item>
///<item>
///	<term>'ru' </term>
///	<description> -руский </description>
///</item>
///<item>
///	<term>'en' </term>
///	<description> -английский</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("lang")]
        [DataMember(Name="lang",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
			[JsonIgnore]
	public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("lng_ID")]
        [DataMember(Name="lng_ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? lng_ID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("loc_Name")]
        [DataMember(Name="loc_Name",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String loc_Name  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Location_ID")]
        [DataMember(Name="Location_ID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? Location_ID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Max length : 4</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ntw_ID")]
        [DataMember(Name="ntw_ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? ntw_ID  { get; set; } = 0;
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("pbx_networkName")]
        [DataMember(Name="pbx_networkName",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String pbx_networkName  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ProfileType")]
        [DataMember(Name="ProfileType",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? ProfileType  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("rptURL")]
        [DataMember(Name="rptURL",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String rptURL  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("SubsCount")]
        [DataMember(Name="SubsCount",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? SubsCount  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("tnst_ExternalID")]
        [DataMember(Name="tnst_ExternalID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? tnst_ExternalID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("tnst_ID")]
        [DataMember(Name="tnst_ID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? tnst_ID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("tnt_AccountMandatory")]
        [DataMember(Name="tnt_AccountMandatory",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? tnt_AccountMandatory  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("tnt_ID")]
        [DataMember(Name="tnt_ID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? tnt_ID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Total")]
        [DataMember(Name="Total",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? Total  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("TreeNodeType")]
        [DataMember(Name="TreeNodeType",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String TreeNodeType  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("trf_ID")]
        [DataMember(Name="trf_ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? trf_ID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("isEditWorkPlace")]
        [DataMember(Name="isEditWorkPlace",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? isEditWorkPlace  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("dep_id_boss")]
        [DataMember(Name="dep_id_boss",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? dep_id_boss  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("dep_Name_boss")]
        [DataMember(Name="dep_Name_boss",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String dep_Name_boss  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("isRefusalChangeName")]
        [DataMember(Name="isRefusalChangeName",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? isRefusalChangeName  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("max_ModDate")]
        [DataMember(Name="max_ModDate",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? max_ModDate  { get; set; }
              /// <summary>
        /// Идентификатор причины версии
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("vrr_ID")]
        [DataMember(Name="vrr_ID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? vrr_ID  { get; set; }
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "ABN_HASNOTEMPTYPREPAID": return abn_HasNotEmptyPrepaid;
				    case "ABN_LASTNAME": return abn_LastName;
				    case "ABN_BALANCE": return abn_Balance;
				    case "ABN_CREATEDATE": return abn_CreateDate;
				    case "ABN_DATE": return abn_Date;
				    case "ABN_EMPLOYE_EXPORT_ID": return abn_Employe_Export_ID;
				    case "ABN_EMPLOYEE_ID": return abn_Employee_ID;
				    case "ABN_EXTERNALID": return abn_ExternalID;
				    case "ABN_FIRSTNAME": return abn_FirstName;
				    case "ABN_GUID": return abn_Guid;
				    case "ID": return ID;
				    case "PARENTID": return ParentID;
				    case "ABN_ISEXISTAD": return abn_IsExistAD;
				    case "ABN_ISGUEST": return abn_IsGuest;
				    case "ABN_LOGIN": return abn_Login;
				    case "ABN_MIDDLENAME": return abn_MiddleName;
				    case "ABN_MODIFIEDBY": return abn_ModifiedBy;
				    case "ABN_MODIFIEDDATE": return abn_ModifiedDate;
				    case "ABN_MODIFIEDFROM": return abn_ModifiedFrom;
				    case "ABN_NESTEDSETS_LEFT": return abn_NestedSets_Left;
				    case "ABN_NESTEDSETS_RIGHT": return abn_NestedSets_Right;
				    case "ABN_PASSWORD": return abn_Password;
				    case "ABN_POSITIONCODE": return abn_PositionCode;
				    case "ABN_SHOWPHONEDIRECTORY": return abn_ShowPhoneDirectory;
				    case "ABN_WORKPLACE": return abn_WorkPlace;
				    case "ABONENTFULLNAME": return AbonentFullName;
				    case "ACNT_ID": return acnt_ID;
				    case "ACNT_ID_COUNT": return acnt_ID_count;
				    case "ACNT_ISPERSONAL": return acnt_IsPersonal;
				    case "ACNT_NUMBER": return acnt_Number;
				    case "ACNT_NUMBER_PERSONAL": return acnt_Number_Personal;
				    case "ACTP_ID": return actp_ID;
				    case "DEP_ID": return dep_ID;
				    case "ACTPD_NAME": return actpd_Name;
				    case "ACTPD_NAME_PERSONAL": return Actpd_Name_Personal;
				    case "AUT_ID_COUNT": return aut_ID_count;
				    case "AUT_NAMEAUTHCODE": return aut_NameAuthCode;
				    case "AUT_NUMBERATS": return aut_NumberAts;
				    case "BOSSFULLNAME": return BossFullName;
				    case "CNTR_ID_COUNT": return cntr_ID_count;
				    case "CNTR_NAME": return cntr_Name;
				    case "COM_ID": return com_Id;
				    case "EXT_EXTNUM": return ext_ExtNum;
				    case "EXT_ID_COUNT": return ext_ID_count;
				    case "GRP_ID": return grp_ID;
				    case "GRP_NAME": return grp_Name;
				    case "CACHECONTROLDATE": return CacheControlDate;
				    case "ISEDITALLOW": return isEditAllow;
				    case "LANG": return lang;
				    case "LNG_ID": return lng_ID;
				    case "LOC_NAME": return loc_Name;
				    case "LOCATION_ID": return Location_ID;
				    case "NTW_ID": return ntw_ID;
				    case "PBX_NETWORKNAME": return pbx_networkName;
				    case "PROFILETYPE": return ProfileType;
				    case "RPTURL": return rptURL;
				    case "SUBSCOUNT": return SubsCount;
				    case "TNST_EXTERNALID": return tnst_ExternalID;
				    case "TNST_ID": return tnst_ID;
				    case "TNT_ACCOUNTMANDATORY": return tnt_AccountMandatory;
				    case "TNT_ID": return tnt_ID;
				    case "TOTAL": return Total;
				    case "TREENODETYPE": return TreeNodeType;
				    case "TRF_ID": return trf_ID;
				    case "ISEDITWORKPLACE": return isEditWorkPlace;
				    case "DEP_ID_BOSS": return dep_id_boss;
				    case "DEP_NAME_BOSS": return dep_Name_boss;
				    case "ISREFUSALCHANGENAME": return isRefusalChangeName;
				    case "MAX_MODDATE": return max_ModDate;
				    case "VRR_ID": return vrr_ID;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "ABN_HASNOTEMPTYPREPAID":if (value == null)abn_HasNotEmptyPrepaid=null;else abn_HasNotEmptyPrepaid=Convert.ToInt32(value);break;
                case "ABN_LASTNAME":abn_LastName=(string)value;break;
                case "ABN_BALANCE":if (value == null)abn_Balance=null;else abn_Balance=Convert.ToDecimal(value);break;
                case "ABN_CREATEDATE":if (value == null)abn_CreateDate=null;else abn_CreateDate=Convert.ToDateTime(value);break;
                case "ABN_DATE":if (value == null)abn_Date=null;else abn_Date=Convert.ToDateTime(value);break;
                case "ABN_EMPLOYE_EXPORT_ID":abn_Employe_Export_ID=(string)value;break;
                case "ABN_EMPLOYEE_ID":abn_Employee_ID=(string)value;break;
                case "ABN_EXTERNALID":if (value == null)abn_ExternalID=null;else abn_ExternalID=Convert.ToInt32(value);break;
                case "ABN_FIRSTNAME":abn_FirstName=(string)value;break;
                case "ABN_GUID":if (value == null)abn_Guid=null;else abn_Guid=(Guid)value;break;
                case "ID":if (value == null)ID=null;else ID=Convert.ToInt32(value);break;
                case "PARENTID":if (value == null)ParentID=null;else ParentID=Convert.ToInt32(value);break;
                case "ABN_ISEXISTAD":if (value == null)abn_IsExistAD=null;else abn_IsExistAD=Convert.ToInt32(value);break;
                case "ABN_ISGUEST":if (value == null)abn_IsGuest=null;else abn_IsGuest=Convert.ToInt32(value);break;
                case "ABN_LOGIN":abn_Login=(string)value;break;
                case "ABN_MIDDLENAME":abn_MiddleName=(string)value;break;
                case "ABN_MODIFIEDBY":abn_ModifiedBy=(string)value;break;
                case "ABN_MODIFIEDDATE":if (value == null)abn_ModifiedDate=null;else abn_ModifiedDate=Convert.ToDateTime(value);break;
                case "ABN_MODIFIEDFROM":abn_ModifiedFrom=(string)value;break;
                case "ABN_NESTEDSETS_LEFT":if (value == null)abn_NestedSets_Left=null;else abn_NestedSets_Left=Convert.ToInt32(value);break;
                case "ABN_NESTEDSETS_RIGHT":if (value == null)abn_NestedSets_Right=null;else abn_NestedSets_Right=Convert.ToInt32(value);break;
                case "ABN_PASSWORD":abn_Password=(string)value;break;
                case "ABN_POSITIONCODE":abn_PositionCode=(string)value;break;
                case "ABN_SHOWPHONEDIRECTORY":if (value == null)abn_ShowPhoneDirectory=null;else abn_ShowPhoneDirectory=Convert.ToInt32(value);break;
                case "ABN_WORKPLACE":abn_WorkPlace=(string)value;break;
                case "ABONENTFULLNAME":AbonentFullName=(string)value;break;
                case "ACNT_ID":if (value == null)acnt_ID=null;else acnt_ID=Convert.ToInt32(value);break;
                case "ACNT_ID_COUNT":if (value == null)acnt_ID_count=null;else acnt_ID_count=Convert.ToInt32(value);break;
                case "ACNT_ISPERSONAL":if (value == null)acnt_IsPersonal=null;else acnt_IsPersonal=Convert.ToInt32(value);break;
                case "ACNT_NUMBER":acnt_Number=(string)value;break;
                case "ACNT_NUMBER_PERSONAL":acnt_Number_Personal=(string)value;break;
                case "ACTP_ID":if (value == null)actp_ID=null;else actp_ID=Convert.ToInt32(value);break;
                case "DEP_ID":if (value == null)dep_ID=null;else dep_ID=Convert.ToInt32(value);break;
                case "ACTPD_NAME":actpd_Name=(string)value;break;
                case "ACTPD_NAME_PERSONAL":Actpd_Name_Personal=(string)value;break;
                case "AUT_ID_COUNT":if (value == null)aut_ID_count=null;else aut_ID_count=Convert.ToInt32(value);break;
                case "AUT_NAMEAUTHCODE":aut_NameAuthCode=(string)value;break;
                case "AUT_NUMBERATS":if (value == null)aut_NumberAts=null;else aut_NumberAts=Convert.ToInt32(value);break;
                case "BOSSFULLNAME":BossFullName=(string)value;break;
                case "CNTR_ID_COUNT":if (value == null)cntr_ID_count=null;else cntr_ID_count=Convert.ToInt32(value);break;
                case "CNTR_NAME":cntr_Name=(string)value;break;
                case "COM_ID":if (value == null)com_Id=null;else com_Id=Convert.ToInt32(value);break;
                case "EXT_EXTNUM":ext_ExtNum=(string)value;break;
                case "EXT_ID_COUNT":if (value == null)ext_ID_count=null;else ext_ID_count=Convert.ToInt32(value);break;
                case "GRP_ID":if (value == null)grp_ID=null;else grp_ID=Convert.ToInt32(value);break;
                case "GRP_NAME":grp_Name=(string)value;break;
                case "CACHECONTROLDATE":if (value == null)CacheControlDate=null;else CacheControlDate=Convert.ToDateTime(value);break;
                case "ISEDITALLOW":if (value == null)isEditAllow=null;else isEditAllow=Convert.ToInt32(value);break;
                case "LANG":lang=(string)value;break;
                case "LNG_ID":if (value == null)lng_ID=null;else lng_ID=Convert.ToInt32(value);break;
                case "LOC_NAME":loc_Name=(string)value;break;
                case "LOCATION_ID":if (value == null)Location_ID=null;else Location_ID=Convert.ToInt32(value);break;
                case "NTW_ID":if (value == null)ntw_ID=null;else ntw_ID=Convert.ToInt32(value);break;
                case "PBX_NETWORKNAME":pbx_networkName=(string)value;break;
                case "PROFILETYPE":if (value == null)ProfileType=null;else ProfileType=Convert.ToInt32(value);break;
                case "RPTURL":rptURL=(string)value;break;
                case "SUBSCOUNT":if (value == null)SubsCount=null;else SubsCount=Convert.ToInt32(value);break;
                case "TNST_EXTERNALID":if (value == null)tnst_ExternalID=null;else tnst_ExternalID=Convert.ToInt32(value);break;
                case "TNST_ID":if (value == null)tnst_ID=null;else tnst_ID=Convert.ToInt32(value);break;
                case "TNT_ACCOUNTMANDATORY":if (value == null)tnt_AccountMandatory=null;else tnt_AccountMandatory=Convert.ToInt32(value);break;
                case "TNT_ID":if (value == null)tnt_ID=null;else tnt_ID=Convert.ToInt32(value);break;
                case "TOTAL":if (value == null)Total=null;else Total=Convert.ToInt32(value);break;
                case "TREENODETYPE":TreeNodeType=(string)value;break;
                case "TRF_ID":if (value == null)trf_ID=null;else trf_ID=Convert.ToInt32(value);break;
                case "ISEDITWORKPLACE":if (value == null)isEditWorkPlace=null;else isEditWorkPlace=Convert.ToInt32(value);break;
                case "DEP_ID_BOSS":if (value == null)dep_id_boss=null;else dep_id_boss=Convert.ToInt32(value);break;
                case "DEP_NAME_BOSS":dep_Name_boss=(string)value;break;
                case "ISREFUSALCHANGENAME":if (value == null)isRefusalChangeName=null;else isRefusalChangeName=Convert.ToInt32(value);break;
                case "MAX_MODDATE":if (value == null)max_ModDate=null;else max_ModDate=Convert.ToDateTime(value);break;
                case "VRR_ID":if (value == null)vrr_ID=null;else vrr_ID=Convert.ToInt32(value);break;
                }
            }
		}
		#endregion
	}
  
    
    ///<remarks>POST &lt;host&gt;[:&lt;port&gt;]/api/v1/bss/customers/[parentid]/subscribers
///</remarks>
    ///Customers
    [EntitySubentity("Customers")]

	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Subscribers_Request_SET",Namespace = "")]
	public class Subscribers_Request_SET : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// Статус Абонента
	    ///<list type='bullet'>
///<item>
///	<description>CLIS_ID из справочника CLIENT_STATUSES</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("StatusID")]
        [DataMember(Name="StatusID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? StatusID  { get; set; }
              /// <summary>
        /// Идентификатор стандарта абонента
	    ///<list type='bullet'>
///<item>
///	<description>STND_ID из справочника STANDARTS</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("StandartID")]
        [DataMember(Name="StandartID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? StandartID  { get; set; } = 0;
              /// <summary>
        /// Полное юридическое наименование 
	    ///<list type='bullet'>
///<item>
///	<description>Полное юридическое наименование (опционально)</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("FullName")]
        [DataMember(Name="FullName",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String FullName  { get; set; }
              /// <summary>
        /// Короткое наименование
	    ///<list type='bullet'>
///<item>
///	<description>Короткое наименование для учета (опционально)</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ShortName")]
        [DataMember(Name="ShortName",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ShortName  { get; set; }
              /// <summary>
        /// признак создать Приложение Договора для Внутреннего номера  
	    ///<list type='bullet'>
///<item>
///	<description>Зарезервировано</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("AutoCreateContract")]
        [DataMember(Name="AutoCreateContract",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? AutoCreateContract  { get; set; } = 0;
              /// <summary>
        /// Краткое название для поиска
	    ///<list type='bullet'>
///<item>
///	<description>Служебное название для поиска в UI</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Customer_SearchName")]
        [DataMember(Name="Customer_SearchName",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Customer_SearchName  { get; set; }
              /// <summary>
        /// Дата активации абонента
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("CustomerDate")]
        [DataMember(Name="CustomerDate",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? CustomerDate  { get; set; }
              /// <summary>
        /// Режим отладки (зарезервировано)
	    ///<list type='bullet'>
///<item>
///	<description>Зарезервировано</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("DebugLevel")]
        [DataMember(Name="DebugLevel",EmitDefaultValue = false)]
		/*norestr*/
[DocIgnore]

	public global::System.Int32? DebugLevel  { get; set; } = 0;
              /// <summary>
        /// Дата применения изменений
	    ///<list type='bullet'>
///<item>
///	<description>Зарезервировано</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("EffectiveDate")]
        [DataMember(Name="EffectiveDate",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? EffectiveDate  { get; set; }
              /// <summary>
        /// Уникальный идентификатор для экспорта
	    ///<list type='bullet'>
///<item>
///	<description>Зарезервировано</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Export_ID")]
        [DataMember(Name="Export_ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Export_ID  { get; set; }
              /// <summary>
        /// PositionCode для синхронизации иерархии узлов дерева
	    ///<list type='bullet'>
///<item>
///	<description>Зарезервировано</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("PositionCode")]
        [DataMember(Name="PositionCode",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String PositionCode  { get; set; }
              /// <summary>
        /// Код диллера
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("AgentCode")]
        [DataMember(Name="AgentCode",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String AgentCode  { get; set; }
              /// <summary>
        /// Уникальный идентификатор диллера
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("AgentID")]
        [DataMember(Name="AgentID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? AgentID  { get; set; }
              /// <summary>
        /// Код точки продаж
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("SalesPointCode")]
        [DataMember(Name="SalesPointCode",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String SalesPointCode  { get; set; }
              /// <summary>
        /// Уникальный идентификатор точки продаж
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("SalesPointID")]
        [DataMember(Name="SalesPointID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? SalesPointID  { get; set; }
              /// <summary>
        /// Признак передачи внешнего значения ID
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - внешний ID (для BIS всегда устанавливаем в 1)</description>
///</item>
///<item>
///	<term>0 </term>
///	<description> - внутренний ID</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("IDType")]
        [DataMember(Name="IDType",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? IDType  { get; set; }
              /// <summary>
        /// Признак ""создание узла дерева не завершено
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - да</description>
///</item>
///<item>
///	<term>0 </term>
///	<description> - нет</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("IsCreatedWithTariffication")]
        [DataMember(Name="IsCreatedWithTariffication",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? IsCreatedWithTariffication  { get; set; } = 0;
              /// <summary>
        /// Пользователь данного изменения
	    ///<list type='bullet'>
///<item>
///	<term>Username </term>
///	<description> - пользователь из контекста</description>
///</item>
///<item>
///	<term>NULL </term>
///	<description> -если неизвестен</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedBy")]
        [DataMember(Name="ModifiedBy",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedBy  { get; set; }
              /// <summary>
        /// Источник данного изменения
	    ///<list type='bullet'>
///<item>
///	<term>IP </term>
///	<description> -адрес/имя компьютера</description>
///</item>
///<item>
///	<term>NULL </term>
///	<description> - если неизвестен</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedFrom")]
        [DataMember(Name="ModifiedFrom",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedFrom  { get; set; }
              /// <summary>
        /// Комментарий изменения
	    ///<list type='bullet'>
///<item>
///	<description>Заполняем причину изменений для истории</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Remark")]
        [DataMember(Name="Remark",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Remark  { get; set; }
              /// <summary>
        /// Тип профиля
	    ///<list type='bullet'>
///<item>
///	<term>0 </term>
///	<description> - не указан</description>
///</item>
///<item>
///	<term>1 </term>
///	<description> - физ.лицо</description>
///</item>
///<item>
///	<term>2 </term>
///	<description> - юр.лицо</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ProfileType")]
        [DataMember(Name="ProfileType",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? ProfileType  { get; set; } = 0;
              /// <summary>
        /// Уникальный номер узла дерева для синхронизации с внешней системой
	    ///<list type='bullet'>
///<item>
///	<description>Зарезервировано</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("SyncId")]
        [DataMember(Name="SyncId",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String SyncId  { get; set; }
              /// <summary>
        /// Уникальный идентификатор логина абонента
	    ///<list type='bullet'>
///<item>
///	<term>для FTTB </term>
///	<description> - значение option82</description>
///</item>
///<item>
///	<term>для GSM </term>
///	<description> - значение SUBSCR_NO</description>
///</item>
///<item>
///	<term>для PSTN </term>
///	<description> -не используется</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("SubscriberLogin")]
        [DataMember(Name="SubscriberLogin",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String SubscriberLogin  { get; set; }
              /// <summary>
        /// Пароль абонента (если применимо)
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("SubscriberPassword")]
        [DataMember(Name="SubscriberPassword",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String SubscriberPassword  { get; set; }
              /// <summary>
        /// Уникальный идентификатор транзакции для идемпотентности
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Header
        /// </remarks>
        [JsonProperty("global_unique_id")]
        [DataMember(Name="global_unique_id",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String global_unique_id  { get; set; }
              /// <summary>
        /// Идентификатор Абонента
	    ///<list type='bullet'>
///<item>
///	<description>SUBS_ID из справочника SUBSCRIBERS</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("ID")]
        [DataMember(Name="ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? ID 	{
		get 
		{ 
			if(emptyId.Equals(this.Id))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.Id, out result))
				return result; 
			else
            {
return 0;
            }
		}
		set { this.Id = value.ToString(); }
	}
              /// <summary>
        /// Идентификатор Клиента (узла типа Customers)
	    ///<list type='bullet'>
///<item>
///	<description>CLNT_ID из справочника CLIENT_HISTORIES</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("ParentID")]
        [DataMember(Name="ParentID",EmitDefaultValue = false)]
		[JsonRestrictedByValue("<empty>")]

	public global::System.Int32? ParentID 	{
		get 
		{ 
			if(emptyId.Equals(this.ParentId))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.ParentId, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.ParentId = value.ToString(); }
	}
              /// <summary>
        /// Указание языка для набора multi-language данных 
	    ///<list type='bullet'>
///<item>
///	<term>'uk' </term>
///	<description> -украинский</description>
///</item>
///<item>
///	<term>'ru' </term>
///	<description> -руский </description>
///</item>
///<item>
///	<term>'en' </term>
///	<description> -английский</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("lang")]
        [DataMember(Name="lang",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
			[JsonIgnore]
	public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
              /// <summary>
        /// Формат вывода ошибки
	    ///<list type='bullet'>
///<item>
///	<description>'json'</description>
///</item>
///<item>
///	<description>'xml'</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : xml</para>
///<para>Max length : 25</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ErrFormat")]
        [DataMember(Name="ErrFormat",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ErrFormat     {
		get { return Format ?? "xml"; }
		set { this.Format = value; }
	}
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "STATUSID": return StatusID;
				    case "STANDARTID": return StandartID;
				    case "FULLNAME": return FullName;
				    case "SHORTNAME": return ShortName;
				    case "AUTOCREATECONTRACT": return AutoCreateContract;
				    case "CUSTOMER_SEARCHNAME": return Customer_SearchName;
				    case "CUSTOMERDATE": return CustomerDate;
				    case "DEBUGLEVEL": return DebugLevel;
				    case "EFFECTIVEDATE": return EffectiveDate;
				    case "EXPORT_ID": return Export_ID;
				    case "POSITIONCODE": return PositionCode;
				    case "AGENTCODE": return AgentCode;
				    case "AGENTID": return AgentID;
				    case "SALESPOINTCODE": return SalesPointCode;
				    case "SALESPOINTID": return SalesPointID;
				    case "IDTYPE": return IDType;
				    case "ISCREATEDWITHTARIFFICATION": return IsCreatedWithTariffication;
				    case "MODIFIEDBY": return ModifiedBy;
				    case "MODIFIEDFROM": return ModifiedFrom;
				    case "REMARK": return Remark;
				    case "PROFILETYPE": return ProfileType;
				    case "SYNCID": return SyncId;
				    case "SUBSCRIBERLOGIN": return SubscriberLogin;
				    case "SUBSCRIBERPASSWORD": return SubscriberPassword;
				    case "GLOBAL_UNIQUE_ID": return global_unique_id;
				    case "ID": return ID;
				    case "PARENTID": return ParentID;
				    case "LANG": return lang;
				    case "ERRFORMAT": return ErrFormat;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "STATUSID":if (value == null)StatusID=null;else StatusID=Convert.ToInt32(value);break;
                case "STANDARTID":if (value == null)StandartID=null;else StandartID=Convert.ToInt32(value);break;
                case "FULLNAME":FullName=(string)value;break;
                case "SHORTNAME":ShortName=(string)value;break;
                case "AUTOCREATECONTRACT":if (value == null)AutoCreateContract=null;else AutoCreateContract=Convert.ToInt32(value);break;
                case "CUSTOMER_SEARCHNAME":Customer_SearchName=(string)value;break;
                case "CUSTOMERDATE":if (value == null)CustomerDate=null;else CustomerDate=Convert.ToDateTime(value);break;
                case "DEBUGLEVEL":if (value == null)DebugLevel=null;else DebugLevel=Convert.ToInt32(value);break;
                case "EFFECTIVEDATE":if (value == null)EffectiveDate=null;else EffectiveDate=Convert.ToDateTime(value);break;
                case "EXPORT_ID":Export_ID=(string)value;break;
                case "POSITIONCODE":PositionCode=(string)value;break;
                case "AGENTCODE":AgentCode=(string)value;break;
                case "AGENTID":if (value == null)AgentID=null;else AgentID=Convert.ToInt32(value);break;
                case "SALESPOINTCODE":SalesPointCode=(string)value;break;
                case "SALESPOINTID":if (value == null)SalesPointID=null;else SalesPointID=Convert.ToInt32(value);break;
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                case "ISCREATEDWITHTARIFFICATION":if (value == null)IsCreatedWithTariffication=null;else IsCreatedWithTariffication=Convert.ToInt32(value);break;
                case "MODIFIEDBY":ModifiedBy=(string)value;break;
                case "MODIFIEDFROM":ModifiedFrom=(string)value;break;
                case "REMARK":Remark=(string)value;break;
                case "PROFILETYPE":if (value == null)ProfileType=null;else ProfileType=Convert.ToInt32(value);break;
                case "SYNCID":SyncId=(string)value;break;
                case "SUBSCRIBERLOGIN":SubscriberLogin=(string)value;break;
                case "SUBSCRIBERPASSWORD":SubscriberPassword=(string)value;break;
                case "GLOBAL_UNIQUE_ID":global_unique_id=(string)value;break;
                case "ID":if (value == null)ID=null;else ID=Convert.ToInt32(value);break;
                case "PARENTID":if (value == null)ParentID=null;else ParentID=Convert.ToInt32(value);break;
                case "LANG":lang=(string)value;break;
                case "ERRFORMAT":ErrFormat=(string)value;break;
                }
            }
		}
		#endregion
	}
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Subscribers_Response_SET",Namespace = "")]
	public class Subscribers_Response_SET: BaseEntity, IModifiedTag
	{
         #region [Properties]
			/// <summary>
			/// Идентификатор Абонента
			/// <para/>
			/// Abn_ID
			/// </summary>
			///<remarks>
			///Идентификатор Абонента
			///</remarks>
			[JsonProperty("ID")]
			[DataMember(Name="ID", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
            public global::System.Int32? ID 	{
		get 
		{ 
			if(emptyId.Equals(this.Id))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.Id, out result))
				return result; 
			else
            {
return 0;
            }
		}
		set { this.Id = value.ToString(); }
	}
			/// <summary>
			/// Признак передачи внешнего значения ID
			/// <para/>
			/// IsExternalID
			/// </summary>
			///<remarks>
			///Признак передачи внешнего значения ID
			///</remarks>
			[JsonProperty("IDType")]
			[DataMember(Name="IDType", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
            public global::System.Int32? IDType  { get; set; }
			/// <summary>
			/// Указание языка для набора multi-language данных 
			/// <para/>
			/// Lang
			/// </summary>
			///<remarks>
			///Указание языка для набора multi-language данных 
			///</remarks>
			[JsonProperty("lang")]
			[DataMember(Name="lang", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
			[JsonIgnore]
            public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
         #endregion
        [JsonIgnore]
	    public DateTime? If_Modified_Since { get {return null;}}
        #region [IDateModified]
        [JsonIgnore]
	    public DateTime? LastModified { get { return If_Modified_Since;}}
        #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "ID": return ID;
				    case "IDTYPE": return IDType;
				    case "LANG": return lang;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "ID":if (value == null)ID=null;else ID=Convert.ToInt32(value);break;
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                case "LANG":lang=(string)value;break;
                }
            }
		}
		#endregion
    }
#endregion
#region [Subscribers/Activate]

	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Subscribers_Activate_Request_ACTION",Namespace = "")]
	public class Subscribers_Activate_Request_ACTION : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// Зарезервировано
	    ///<list type='bullet'>
///<item>
///	<description>Зарезервировано для будущего использования</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("AuthCode")]
        [DataMember(Name="AuthCode",EmitDefaultValue = false)]
		/*norestr*/

[SecondaryKey("AuthCodes_Request_SET","AuthCodeName")]/*ACTION*/
	public global::System.String AuthCode  { get; set; }
              /// <summary>
        /// дата активации
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("EffectiveDate")]
        [DataMember(Name="EffectiveDate",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? EffectiveDate  { get; set; }
              /// <summary>
        /// Название сущности REST, для которой выполняется POST операция
	    ///<list type='bullet'>
///<item>
///	<description>Зарезервировано</description>
///</item>
///<item>
///	<description>доступные значения: Subsribers</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("EntityName")]
        [DataMember(Name="EntityName",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String EntityName { get; set; } = "<empty>";
              /// <summary>
        /// Формат вывода ошибки
	    ///<list type='bullet'>
///<item>
///	<description>'json'</description>
///</item>
///<item>
///	<description>'xml'</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : xml</para>
///<para>Max length : 25</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ErrFormat")]
        [DataMember(Name="ErrFormat",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ErrFormat     {
		get { return Format ?? "xml"; }
		set { this.Format = value; }
	}
              /// <summary>
        /// Уникальный идентификатор транзакции для идемпотентности
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Header
        /// </remarks>
        [JsonProperty("global_unique_id")]
        [DataMember(Name="global_unique_id",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String global_unique_id  { get; set; }
              /// <summary>
        /// Признак передачи внешнего значения ID
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - внешний ID (для BIS всегда устанавливаем в 1)</description>
///</item>
///<item>
///	<term>0 </term>
///	<description> - внутренний ID</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("IDType")]
        [DataMember(Name="IDType",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? IDType  { get; set; }
              /// <summary>
        /// Указание языка для набора multi-language данных 
	    ///<list type='bullet'>
///<item>
///	<term>'uk' </term>
///	<description> -украинский</description>
///</item>
///<item>
///	<term>'ru' </term>
///	<description> -руский </description>
///</item>
///<item>
///	<term>'en' </term>
///	<description> -английский</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("lang")]
        [DataMember(Name="lang",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
			[JsonIgnore]
	public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
              /// <summary>
        /// уникальное значение логина, например Option82 
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Login")]
        [DataMember(Name="Login",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Login  { get; set; }
              /// <summary>
        /// Пользователь данного изменения
	    ///<list type='bullet'>
///<item>
///	<term>Username </term>
///	<description> - пользователь из контекста</description>
///</item>
///<item>
///	<term>NULL </term>
///	<description> -если неизвестен</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedBy")]
        [DataMember(Name="ModifiedBy",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedBy  { get; set; }
              /// <summary>
        /// Источник данного изменения
	    ///<list type='bullet'>
///<item>
///	<term>IP </term>
///	<description> -адрес/имя компьютера</description>
///</item>
///<item>
///	<term>NULL </term>
///	<description> - если неизвестен</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedFrom")]
        [DataMember(Name="ModifiedFrom",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedFrom  { get; set; }
              /// <summary>
        /// Адрес для нотификации об активации
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Notification")]
        [DataMember(Name="Notification",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Notification  { get; set; }
              /// <summary>
        /// Идентификатор абонента
	    ///<list type='bullet'>
///<item>
///	<description>SUBS_ID из справочника SUBSCRIBERS</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("ParentID")]
        [DataMember(Name="ParentID",EmitDefaultValue = false)]
		[JsonRestrictedByValue("<empty>")]

			[Required]
[SecondaryKey("Subscribers_Request_GET","ID")]/*ACTION*/
	public global::System.Int32? ParentID 	{
		get 
		{ 
			if(emptyId.Equals(this.ParentId))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.ParentId, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.ParentId = value.ToString(); }
	}
              /// <summary>
        /// пароль
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Password")]
        [DataMember(Name="Password",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Password  { get; set; }
              /// <summary>
        /// Телефон для нотификации об активации
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("PhoneNumber")]
        [DataMember(Name="PhoneNumber",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String PhoneNumber  { get; set; }
              /// <summary>
        /// Комментарий для активации
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Remark")]
        [DataMember(Name="Remark",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String Remark  { get; set; }
              /// <summary>
        /// Статус узла дерева после активаци
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("StatusID")]
        [DataMember(Name="StatusID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? StatusID  { get; set; }
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "AUTHCODE": return AuthCode;
				    case "EFFECTIVEDATE": return EffectiveDate;
				    case "ENTITYNAME": return EntityName;
				    case "ERRFORMAT": return ErrFormat;
				    case "GLOBAL_UNIQUE_ID": return global_unique_id;
				    case "IDTYPE": return IDType;
				    case "LANG": return lang;
				    case "LOGIN": return Login;
				    case "MODIFIEDBY": return ModifiedBy;
				    case "MODIFIEDFROM": return ModifiedFrom;
				    case "NOTIFICATION": return Notification;
				    case "PARENTID": return ParentID;
				    case "PASSWORD": return Password;
				    case "PHONENUMBER": return PhoneNumber;
				    case "REMARK": return Remark;
				    case "STATUSID": return StatusID;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "AUTHCODE":AuthCode=(string)value;break;
                case "EFFECTIVEDATE":if (value == null)EffectiveDate=null;else EffectiveDate=Convert.ToDateTime(value);break;
                case "ENTITYNAME":EntityName=(string)value;break;
                case "ERRFORMAT":ErrFormat=(string)value;break;
                case "GLOBAL_UNIQUE_ID":global_unique_id=(string)value;break;
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                case "LANG":lang=(string)value;break;
                case "LOGIN":Login=(string)value;break;
                case "MODIFIEDBY":ModifiedBy=(string)value;break;
                case "MODIFIEDFROM":ModifiedFrom=(string)value;break;
                case "NOTIFICATION":Notification=(string)value;break;
                case "PARENTID":if (value == null)ParentID=null;else ParentID=Convert.ToInt32(value);break;
                case "PASSWORD":Password=(string)value;break;
                case "PHONENUMBER":PhoneNumber=(string)value;break;
                case "REMARK":Remark=(string)value;break;
                case "STATUSID":if (value == null)StatusID=null;else StatusID=Convert.ToInt32(value);break;
                }
            }
		}
		#endregion
	}
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Subscribers_Activate_Response_ACTION",Namespace = "")]
	public class Subscribers_Activate_Response_ACTION: BaseEntity, IModifiedTag
	{
         #region [Properties]
			/// <summary>
			/// Признак передачи внешнего значения ID
			/// <para/>
			/// IsExternalID
			/// </summary>
			///<remarks>
			///Признак передачи внешнего значения ID
			///</remarks>
			[JsonProperty("IDType")]
			[DataMember(Name="IDType", EmitDefaultValue = false)]
			/*norestr*/

            public global::System.Int32? IDType  { get; set; }
			/// <summary>
			/// Указание языка для набора multi-language данных 
			/// <para/>
			/// Lang
			/// </summary>
			///<remarks>
			///Указание языка для набора multi-language данных 
			///</remarks>
			[JsonProperty("lang")]
			[DataMember(Name="lang", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
			[JsonIgnore]
            public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
         #endregion
        [JsonIgnore]
	    public DateTime? If_Modified_Since { get {return null;}}
        #region [IDateModified]
        [JsonIgnore]
	    public DateTime? LastModified { get { return If_Modified_Since;}}
        #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                }
            }
		}
		#endregion
    }
#endregion
#region [Subscribers/CalcCharges]

	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Subscribers_CalcCharges_Request_ACTION",Namespace = "")]
	public class Subscribers_CalcCharges_Request_ACTION : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// Тип начислений (зарезервировано)
	    ///<list type='bullet'>
///<item>
///	<description>зарезервировано</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ChargeCode")]
        [DataMember(Name="ChargeCode",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ChargeCode  { get; set; }
              /// <summary>
        /// Дата окончания периода для расчета начислений
	    ///<list type='bullet'>
///<item>
///	<description>первое число месяца</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("DateEnd")]
        [DataMember(Name="DateEnd",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.DateTime? DateEnd  { get; set; }
              /// <summary>
        /// Дата начала периода для расчета начислений
	    ///<list type='bullet'>
///<item>
///	<description>текущая дата</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("DateStart")]
        [DataMember(Name="DateStart",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? DateStart  { get; set; }
              /// <summary>
        /// Дата начисления, на которую необходимо посчитать сумму АП
	    ///<list type='bullet'>
///<item>
///	<description>практически всегда = DateEnd</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("EffectiveDate")]
        [DataMember(Name="EffectiveDate",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.DateTime? EffectiveDate  { get; set; }
              /// <summary>
        /// режим расчета суммы АП к начислению
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - без учета FinBlock+Pause</description>
///</item>
///<item>
///	<term>2 </term>
///	<description> - с учетом FinBlock+Pause</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("EmulateMode")]
        [DataMember(Name="EmulateMode",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? EmulateMode  { get; set; } = 0;
              /// <summary>
        /// Название сущности REST, для которой выполняется POST операция
	    ///<list type='bullet'>
///<item>
///	<description>зарезервировано</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("EntityName")]
        [DataMember(Name="EntityName",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String EntityName { get; set; } = "<empty>";
              /// <summary>
        /// Формат вывода ошибки
	    ///<list type='bullet'>
///<item>
///	<description>'json'</description>
///</item>
///<item>
///	<description>'xml'</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : xml</para>
///<para>Max length : 25</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ErrFormat")]
        [DataMember(Name="ErrFormat",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ErrFormat     {
		get { return Format ?? "xml"; }
		set { this.Format = value; }
	}
              /// <summary>
        /// Идентификатор номера (зарезервировано) 
	    ///<list type='bullet'>
///<item>
///	<description>зарезервировано</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ExtentionID")]
        [DataMember(Name="ExtentionID",EmitDefaultValue = false)]
		/*norestr*/

[SecondaryKey("Extentions_Request_SET","ExtentionID")]/*ACTION*/[DocIgnore]

	public global::System.Int32? ExtentionID  { get; set; }
              /// <summary>
        /// Идентификатор группы устройств
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ID_GroupATS")]
        [DataMember(Name="ID_GroupATS",EmitDefaultValue = false)]
		/*norestr*/
[DocIgnore]

	public global::System.Int32? ID_GroupATS  { get; set; }
              /// <summary>
        /// Признак передачи внешнего значения ID
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - внешний ID (для BIS всегда устанавливаем в 1)</description>
///</item>
///<item>
///	<term>0 </term>
///	<description> - внутренний ID</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 1</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("IDType")]
        [DataMember(Name="IDType",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? IDType  { get; set; } = 1;
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 1</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("IsReCharge")]
        [DataMember(Name="IsReCharge",EmitDefaultValue = false)]
		/*norestr*/
[DocIgnore]

	public global::System.Int32? IsReCharge  { get; set; } = 1;
              /// <summary>
        /// Указание языка для набора multi-language данных 
	    ///<list type='bullet'>
///<item>
///	<term>'uk' </term>
///	<description> -украинский</description>
///</item>
///<item>
///	<term>'ru' </term>
///	<description> -руский </description>
///</item>
///<item>
///	<term>'en' </term>
///	<description> -английский</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("lang")]
        [DataMember(Name="lang",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
			[JsonIgnore]
	public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
              /// <summary>
        /// Пользователь данного изменения
	    ///<list type='bullet'>
///<item>
///	<term>Username </term>
///	<description> - пользователь из контекста</description>
///</item>
///<item>
///	<term>NULL </term>
///	<description> -если неизвестен</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedBy")]
        [DataMember(Name="ModifiedBy",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedBy  { get; set; }
              /// <summary>
        /// Источник данного изменения
	    ///<list type='bullet'>
///<item>
///	<term>IP </term>
///	<description> -адрес/имя компьютера</description>
///</item>
///<item>
///	<term>NULL </term>
///	<description> - если неизвестен</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedFrom")]
        [DataMember(Name="ModifiedFrom",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedFrom  { get; set; }
              /// <summary>
        /// Идентификатор абонента
	    ///<list type='bullet'>
///<item>
///	<description>SUBS_ID</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("ParentID")]
        [DataMember(Name="ParentID",EmitDefaultValue = false)]
		[JsonRestrictedByValue("<empty>")]

			[Required]
[SecondaryKey("Subscribers_Request_GET","ID")]/*ACTION*/
	public global::System.Int32? ParentID 	{
		get 
		{ 
			if(emptyId.Equals(this.ParentId))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.ParentId, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.ParentId = value.ToString(); }
	}
              /// <summary>
        /// Идентификатор услуги (зарезервировано) 
	    ///<list type='bullet'>
///<item>
///	<description>зарезервировано</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ServiceID")]
        [DataMember(Name="ServiceID",EmitDefaultValue = false)]
		/*norestr*/
[DocIgnore]

	public global::System.Int32? ServiceID  { get; set; }
              /// <summary>
        /// Идентификатор сессии: код системы(3 знака), код операции(2 знака) и идентификатор сессии(15 знаков). Используется функция fn_GetUniqueID
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Srs_SessionID")]
        [DataMember(Name="Srs_SessionID",EmitDefaultValue = false)]
		/*norestr*/
[DocIgnore]

	public global::System.String Srs_SessionID  { get; set; }
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "CHARGECODE": return ChargeCode;
				    case "DATEEND": return DateEnd;
				    case "DATESTART": return DateStart;
				    case "EFFECTIVEDATE": return EffectiveDate;
				    case "EMULATEMODE": return EmulateMode;
				    case "ENTITYNAME": return EntityName;
				    case "ERRFORMAT": return ErrFormat;
				    case "EXTENTIONID": return ExtentionID;
				    case "ID_GROUPATS": return ID_GroupATS;
				    case "IDTYPE": return IDType;
				    case "ISRECHARGE": return IsReCharge;
				    case "LANG": return lang;
				    case "MODIFIEDBY": return ModifiedBy;
				    case "MODIFIEDFROM": return ModifiedFrom;
				    case "PARENTID": return ParentID;
				    case "SERVICEID": return ServiceID;
				    case "SRS_SESSIONID": return Srs_SessionID;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "CHARGECODE":ChargeCode=(string)value;break;
                case "DATEEND":if (value == null)DateEnd=null;else DateEnd=Convert.ToDateTime(value);break;
                case "DATESTART":if (value == null)DateStart=null;else DateStart=Convert.ToDateTime(value);break;
                case "EFFECTIVEDATE":if (value == null)EffectiveDate=null;else EffectiveDate=Convert.ToDateTime(value);break;
                case "EMULATEMODE":if (value == null)EmulateMode=null;else EmulateMode=Convert.ToInt32(value);break;
                case "ENTITYNAME":EntityName=(string)value;break;
                case "ERRFORMAT":ErrFormat=(string)value;break;
                case "EXTENTIONID":if (value == null)ExtentionID=null;else ExtentionID=Convert.ToInt32(value);break;
                case "ID_GROUPATS":if (value == null)ID_GroupATS=null;else ID_GroupATS=Convert.ToInt32(value);break;
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                case "ISRECHARGE":if (value == null)IsReCharge=null;else IsReCharge=Convert.ToInt32(value);break;
                case "LANG":lang=(string)value;break;
                case "MODIFIEDBY":ModifiedBy=(string)value;break;
                case "MODIFIEDFROM":ModifiedFrom=(string)value;break;
                case "PARENTID":if (value == null)ParentID=null;else ParentID=Convert.ToInt32(value);break;
                case "SERVICEID":if (value == null)ServiceID=null;else ServiceID=Convert.ToInt32(value);break;
                case "SRS_SESSIONID":Srs_SessionID=(string)value;break;
                }
            }
		}
		#endregion
	}
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Subscribers_CalcCharges_Response_ACTION",Namespace = "")]
	public class Subscribers_CalcCharges_Response_ACTION: BaseEntity, IModifiedTag
	{
         #region [Properties]
			/// <summary>
			/// Расчетная сумма АП подлежащая начислению, вкл. налоги
			/// <para/>
			/// Amount
			/// </summary>
			///<remarks>
			///Расчетная сумма АП подлежащая начислению, вкл. налоги
			///</remarks>
			[JsonProperty("Amount")]
			[DataMember(Name="Amount", EmitDefaultValue = false)]
			/*norestr*/

            public global::System.Decimal? Amount  { get; set; } = 0;
			/// <summary>
			/// Указание языка для набора multi-language данных 
			/// <para/>
			/// Lang
			/// </summary>
			///<remarks>
			///Указание языка для набора multi-language данных 
			///</remarks>
			[JsonProperty("lang")]
			[DataMember(Name="lang", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
			[JsonIgnore]
            public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
			/// <summary>
			/// Идентификатор процесса расчета
			/// <para/>
			/// Wev_ID
			/// </summary>
			///<remarks>
			///Идентификатор процесса расчета
			///</remarks>
			[JsonProperty("WorkEventID")]
			[DataMember(Name="WorkEventID", EmitDefaultValue = false)]
			/*norestr*/

            public global::System.Int32? WorkEventID  { get; set; }
         #endregion
        [JsonIgnore]
	    public DateTime? If_Modified_Since { get {return null;}}
        #region [IDateModified]
        [JsonIgnore]
	    public DateTime? LastModified { get { return If_Modified_Since;}}
        #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                }
            }
		}
		#endregion
    }
#endregion
#region [Subscribers/ChangeAccount]

	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Subscribers_ChangeAccount_Request_ACTION",Namespace = "")]
	public class Subscribers_ChangeAccount_Request_ACTION : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// Идентификатор нового клиента (в качестве внреход абонентаешнего идентификатора), на который делается пе
	    ///<list type='bullet'>
///<item>
///	<description>CLNT_ID (справочник CLIENT_HISTORIES)</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("AccountID")]
        [DataMember(Name="AccountID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
[SecondaryKey("Accounts_Request_GET","ID")]/*ACTION*/
	public global::System.Int32? AccountID  { get; set; }
              /// <summary>
        /// Код авторизации для нового Лицевого счета
	    ///<list type='bullet'>
///<item>
///	<description>комбинированное значение Префикс номера счета + SubscrNo</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("AuthCode")]
        [DataMember(Name="AuthCode",EmitDefaultValue = false)]
		/*norestr*/

[SecondaryKey("AuthCodes_Request_SET","AuthCodeName")]/*ACTION*/
	public global::System.String AuthCode  { get; set; }
              /// <summary>
        /// Код авторизации для нового персонального Лицевого счета
	    ///<list type='bullet'>
///<item>
///	<description>комбинированное значение Префикс номера счета + SubscrNo</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("AuthCodePrivate")]
        [DataMember(Name="AuthCodePrivate",EmitDefaultValue = false)]
		/*norestr*/

[SecondaryKey("AuthCodes_Request_SET","AuthCodeName")]/*ACTION*/
	public global::System.String AuthCodePrivate  { get; set; }
              /// <summary>
        /// Признак получения акцепта пользователя перед выполнением операции
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - выполнять операцию без подтверждения</description>
///</item>
///<item>
///	<term>0 </term>
///	<description> - с подтверждением</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 1</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ConfAccepted")]
        [DataMember(Name="ConfAccepted",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? ConfAccepted  { get; set; } = 1;
              /// <summary>
        /// Сообщение для конечного пользователя, требующее его обязательного подтверждения
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ConfMessage")]
        [DataMember(Name="ConfMessage",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ConfMessage  { get; set; }
              /// <summary>
        /// Дата изменений
	    ///<list type='bullet'>
///<item>
///	<description>дата/время активации AuthCode</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("EffectiveDate")]
        [DataMember(Name="EffectiveDate",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? EffectiveDate  { get; set; }
              /// <summary>
        /// Название сущности REST, для которой выполняется POST операция
	    ///<list type='bullet'>
///<item>
///	<description>Зарезервировано</description>
///</item>
///<item>
///	<description>доступные значения: Subsribers</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("EntityName")]
        [DataMember(Name="EntityName",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String EntityName { get; set; } = "<empty>";
              /// <summary>
        /// Формат вывода ошибки
	    ///<list type='bullet'>
///<item>
///	<description>'json'</description>
///</item>
///<item>
///	<description>'xml'</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : xml</para>
///<para>Max length : 25</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ErrFormat")]
        [DataMember(Name="ErrFormat",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ErrFormat     {
		get { return Format ?? "xml"; }
		set { this.Format = value; }
	}
              /// <summary>
        /// Признак передачи внешнего значения ID
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - внешний ID (для BIS всегда устанавливаем в 1)</description>
///</item>
///<item>
///	<term>0 </term>
///	<description> - внутренний ID</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 1</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("IDType")]
        [DataMember(Name="IDType",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? IDType  { get; set; } = 1;
              /// <summary>
        /// Указание языка для набора multi-language данных 
	    ///<list type='bullet'>
///<item>
///	<term>'uk' </term>
///	<description> -украинский</description>
///</item>
///<item>
///	<term>'ru' </term>
///	<description> -руский </description>
///</item>
///<item>
///	<term>'en' </term>
///	<description> -английский</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 'uk'</para>
///<para>Max length : 3</para>
///<para>Mandatory : Yes</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("lang")]
        [DataMember(Name="lang",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
			[JsonIgnore]
	public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
              /// <summary>
        /// Пользователь данного изменения
	    ///<list type='bullet'>
///<item>
///	<term>Username </term>
///	<description> - пользователь из контекста</description>
///</item>
///<item>
///	<term>NULL </term>
///	<description> -если неизвестен</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedBy")]
        [DataMember(Name="ModifiedBy",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedBy  { get; set; }
              /// <summary>
        /// Источник данного изменения
	    ///<list type='bullet'>
///<item>
///	<term>IP </term>
///	<description> -адрес/имя компьютера</description>
///</item>
///<item>
///	<term>NULL </term>
///	<description> - если неизвестен</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedFrom")]
        [DataMember(Name="ModifiedFrom",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedFrom  { get; set; }
              /// <summary>
        /// Идентификатор абонента
	    ///<list type='bullet'>
///<item>
///	<description>SUBS_ID (справочник SUBSCRIBERS)</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("ParentID")]
        [DataMember(Name="ParentID",EmitDefaultValue = false)]
		[JsonRestrictedByValue("<empty>")]

			[Required]
[SecondaryKey("Subscribers_Request_GET","ID")]/*ACTION*/
	public global::System.Int32? ParentID 	{
		get 
		{ 
			if(emptyId.Equals(this.ParentId))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.ParentId, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.ParentId = value.ToString(); }
	}
              /// <summary>
        /// Комментарий 
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Remark")]
        [DataMember(Name="Remark",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Remark  { get; set; }
              /// <summary>
        /// Признак необходимости провести внеочередной биллинг перед сменой лицевого счета
	    ///<list type='bullet'>
///<item>
///	<description>Зарезервировано</description>
///</item>
///<item>
///	<term>доступные значения 0 </term>
///	<description> - не проводить</description>
///</item>
///<item>
///	<term>1 </term>
///	<description> - проводить</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("RunBilling")]
        [DataMember(Name="RunBilling",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? RunBilling  { get; set; } = 0;
              /// <summary>
        /// Статус копии абонента, созданной при перерегистрации (для отложенного биллинга)
	    ///<list type='bullet'>
///<item>
///	<description>Зарезервировано</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("StatusID")]
        [DataMember(Name="StatusID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? StatusID  { get; set; } = 0;
              /// <summary>
        /// Логин абонента после смены Лицевого счета
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("SubscriberLogin")]
        [DataMember(Name="SubscriberLogin",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String SubscriberLogin  { get; set; }
              /// <summary>
        /// Пароль абонента после смены Лицевого счета
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("SubscriberPassword")]
        [DataMember(Name="SubscriberPassword",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String SubscriberPassword  { get; set; }
              /// <summary>
        /// Статус абонента после перерегистрации
	    ///<list type='bullet'>
///<item>
///	<description>Зарезервировано</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("TargetStatusID")]
        [DataMember(Name="TargetStatusID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? TargetStatusID  { get; set; } = 0;
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "ACCOUNTID": return AccountID;
				    case "AUTHCODE": return AuthCode;
				    case "AUTHCODEPRIVATE": return AuthCodePrivate;
				    case "CONFACCEPTED": return ConfAccepted;
				    case "CONFMESSAGE": return ConfMessage;
				    case "EFFECTIVEDATE": return EffectiveDate;
				    case "ENTITYNAME": return EntityName;
				    case "ERRFORMAT": return ErrFormat;
				    case "IDTYPE": return IDType;
				    case "LANG": return lang;
				    case "MODIFIEDBY": return ModifiedBy;
				    case "MODIFIEDFROM": return ModifiedFrom;
				    case "PARENTID": return ParentID;
				    case "REMARK": return Remark;
				    case "RUNBILLING": return RunBilling;
				    case "STATUSID": return StatusID;
				    case "SUBSCRIBERLOGIN": return SubscriberLogin;
				    case "SUBSCRIBERPASSWORD": return SubscriberPassword;
				    case "TARGETSTATUSID": return TargetStatusID;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "ACCOUNTID":if (value == null)AccountID=null;else AccountID=Convert.ToInt32(value);break;
                case "AUTHCODE":AuthCode=(string)value;break;
                case "AUTHCODEPRIVATE":AuthCodePrivate=(string)value;break;
                case "CONFACCEPTED":if (value == null)ConfAccepted=null;else ConfAccepted=Convert.ToInt32(value);break;
                case "CONFMESSAGE":ConfMessage=(string)value;break;
                case "EFFECTIVEDATE":if (value == null)EffectiveDate=null;else EffectiveDate=Convert.ToDateTime(value);break;
                case "ENTITYNAME":EntityName=(string)value;break;
                case "ERRFORMAT":ErrFormat=(string)value;break;
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                case "LANG":lang=(string)value;break;
                case "MODIFIEDBY":ModifiedBy=(string)value;break;
                case "MODIFIEDFROM":ModifiedFrom=(string)value;break;
                case "PARENTID":if (value == null)ParentID=null;else ParentID=Convert.ToInt32(value);break;
                case "REMARK":Remark=(string)value;break;
                case "RUNBILLING":if (value == null)RunBilling=null;else RunBilling=Convert.ToInt32(value);break;
                case "STATUSID":if (value == null)StatusID=null;else StatusID=Convert.ToInt32(value);break;
                case "SUBSCRIBERLOGIN":SubscriberLogin=(string)value;break;
                case "SUBSCRIBERPASSWORD":SubscriberPassword=(string)value;break;
                case "TARGETSTATUSID":if (value == null)TargetStatusID=null;else TargetStatusID=Convert.ToInt32(value);break;
                }
            }
		}
		#endregion
	}
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Subscribers_ChangeAccount_Response_ACTION",Namespace = "")]
	public class Subscribers_ChangeAccount_Response_ACTION: BaseEntity, IModifiedTag
	{
         #region [Properties]
			/// <summary>
			/// Сообщение для конечного пользователя, требующее его обязательного подтверждения
			/// <para/>
			/// ConfMessage
			/// </summary>
			///<remarks>
			///Сообщение для конечного пользователя, требующее его обязательного подтверждения
			///</remarks>
			[JsonProperty("ConfMessage")]
			[DataMember(Name="ConfMessage", EmitDefaultValue = false)]
			/*norestr*/

            public global::System.String ConfMessage  { get; set; }
         #endregion
        [JsonIgnore]
	    public DateTime? If_Modified_Since { get {return null;}}
        #region [IDateModified]
        [JsonIgnore]
	    public DateTime? LastModified { get { return If_Modified_Since;}}
        #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                }
            }
		}
		#endregion
    }
#endregion
#region [Subscribers/ChangeName]

	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Subscribers_ChangeName_Request_ACTION",Namespace = "")]
	public class Subscribers_ChangeName_Request_ACTION : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// Дата изменений
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("EffectiveDate")]
        [DataMember(Name="EffectiveDate",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? EffectiveDate  { get; set; }
              /// <summary>
        /// Название сущности REST, для которой выполняется POST операция
	    ///<list type='bullet'>
///<item>
///	<description>Зарезервировано</description>
///</item>
///<item>
///	<description>доступные значения Customers</description>
///</item>
///<item>
///	<description>Suscribers или Associations</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("EntityName")]
        [DataMember(Name="EntityName",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String EntityName { get; set; } = "<empty>";
              /// <summary>
        /// Формат вывода ошибки
	    ///<list type='bullet'>
///<item>
///	<description>'json'</description>
///</item>
///<item>
///	<description>'xml'</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : xml</para>
///<para>Max length : 25</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ErrFormat")]
        [DataMember(Name="ErrFormat",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ErrFormat     {
		get { return Format ?? "xml"; }
		set { this.Format = value; }
	}
              /// <summary>
        /// Имя
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("FirstName")]
        [DataMember(Name="FirstName",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String FirstName  { get; set; }
              /// <summary>
        /// Юридическое наименование
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("FullName")]
        [DataMember(Name="FullName",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String FullName  { get; set; }
              /// <summary>
        /// Признак передачи внешнего значения ID
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - внешний ID (для BIS всегда устанавливаем в 1)</description>
///</item>
///<item>
///	<term>0 </term>
///	<description> - внутренний ID</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("IDType")]
        [DataMember(Name="IDType",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? IDType  { get; set; } = 0;
              /// <summary>
        /// Указание языка для набора multi-language данных 
	    ///<list type='bullet'>
///<item>
///	<term>'uk' </term>
///	<description> -украинский</description>
///</item>
///<item>
///	<term>'ru' </term>
///	<description> -руский </description>
///</item>
///<item>
///	<term>'en' </term>
///	<description> -английский</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("lang")]
        [DataMember(Name="lang",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
			[JsonIgnore]
	public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
              /// <summary>
        /// Отчество
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("MiddleName")]
        [DataMember(Name="MiddleName",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String MiddleName  { get; set; }
              /// <summary>
        /// Пользователь данного изменения
	    ///<list type='bullet'>
///<item>
///	<term>Username </term>
///	<description> - пользователь из контекста</description>
///</item>
///<item>
///	<term>NULL </term>
///	<description> -если неизвестен</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedBy")]
        [DataMember(Name="ModifiedBy",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedBy  { get; set; }
              /// <summary>
        /// Источник данного изменения
	    ///<list type='bullet'>
///<item>
///	<term>IP </term>
///	<description> -адрес/имя компьютера</description>
///</item>
///<item>
///	<term>NULL </term>
///	<description> - если неизвестен</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedFrom")]
        [DataMember(Name="ModifiedFrom",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedFrom  { get; set; }
    //Base Attrribute '' skipped
          /// <summary>
        /// Идентификатор Ассоциации 
	    ///<list type='bullet'>
///<item>
///	<description>ID Ассоциации</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("ParentID")]
        [DataMember(Name="ParentID",EmitDefaultValue = false)]
		[JsonRestrictedByValue("<empty>")]

			[Required]
[SecondaryKey("Associations_Request_GET","ID")]/*ACTION*/
[SecondaryKey("Subscribers_Request_GET","ID")]/*ACTION*/
[SecondaryKey("Customers_Request_GET","ID")]/*ACTION*/
	public global::System.Int32? ParentID 	{
		get 
		{ 
			if(emptyId.Equals(this.ParentId))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.ParentId, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.ParentId = value.ToString(); }
	}
              /// <summary>
        /// Комментарий
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Remark")]
        [DataMember(Name="Remark",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Remark  { get; set; }
              /// <summary>
        /// ОКПО или Паспорт
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("SearchName")]
        [DataMember(Name="SearchName",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String SearchName  { get; set; }
              /// <summary>
        /// Сокращенное наименование
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ShortName")]
        [DataMember(Name="ShortName",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ShortName  { get; set; }
              /// <summary>
        /// Указание очистить значение, в случае передачи ПУСТО в значении
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ToClean")]
        [DataMember(Name="ToClean",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? ToClean  { get; set; } = 0;
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "EFFECTIVEDATE": return EffectiveDate;
				    case "ENTITYNAME": return EntityName;
				    case "ERRFORMAT": return ErrFormat;
				    case "FIRSTNAME": return FirstName;
				    case "FULLNAME": return FullName;
				    case "IDTYPE": return IDType;
				    case "LANG": return lang;
				    case "MIDDLENAME": return MiddleName;
				    case "MODIFIEDBY": return ModifiedBy;
				    case "MODIFIEDFROM": return ModifiedFrom;
				    case "NAME": return Name;
				    case "PARENTID": return ParentID;
				    case "REMARK": return Remark;
				    case "SEARCHNAME": return SearchName;
				    case "SHORTNAME": return ShortName;
				    case "TOCLEAN": return ToClean;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "EFFECTIVEDATE":if (value == null)EffectiveDate=null;else EffectiveDate=Convert.ToDateTime(value);break;
                case "ENTITYNAME":EntityName=(string)value;break;
                case "ERRFORMAT":ErrFormat=(string)value;break;
                case "FIRSTNAME":FirstName=(string)value;break;
                case "FULLNAME":FullName=(string)value;break;
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                case "LANG":lang=(string)value;break;
                case "MIDDLENAME":MiddleName=(string)value;break;
                case "MODIFIEDBY":ModifiedBy=(string)value;break;
                case "MODIFIEDFROM":ModifiedFrom=(string)value;break;
                case "NAME":Name=(string)value;break;
                case "PARENTID":if (value == null)ParentID=null;else ParentID=Convert.ToInt32(value);break;
                case "REMARK":Remark=(string)value;break;
                case "SEARCHNAME":SearchName=(string)value;break;
                case "SHORTNAME":ShortName=(string)value;break;
                case "TOCLEAN":if (value == null)ToClean=null;else ToClean=Convert.ToInt32(value);break;
                }
            }
		}
		#endregion
	}
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Subscribers_ChangeName_Response_ACTION",Namespace = "")]
	public class Subscribers_ChangeName_Response_ACTION: BaseEntity, IModifiedTag
	{
         #region [Properties]
			/// <summary>
			/// Признак передачи внешнего значения ID
			/// <para/>
			/// IsExternalID
			/// </summary>
			///<remarks>
			///Признак передачи внешнего значения ID
			///</remarks>
			[JsonProperty("IDType")]
			[DataMember(Name="IDType", EmitDefaultValue = false)]
			/*norestr*/

            public global::System.Int32? IDType  { get; set; } = 0;
			/// <summary>
			/// Указание языка для набора multi-language данных 
			/// <para/>
			/// Lang
			/// </summary>
			///<remarks>
			///Указание языка для набора multi-language данных 
			///</remarks>
			[JsonProperty("lang")]
			[DataMember(Name="lang", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
			[JsonIgnore]
            public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
         #endregion
        [JsonIgnore]
	    public DateTime? If_Modified_Since { get {return null;}}
        #region [IDateModified]
        [JsonIgnore]
	    public DateTime? LastModified { get { return If_Modified_Since;}}
        #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                }
            }
		}
		#endregion
    }
#endregion
#region [Subscribers/ChangeStatus]

	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Subscribers_ChangeStatus_Request_ACTION",Namespace = "")]
	public class Subscribers_ChangeStatus_Request_ACTION : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// Зарезервировано
	    ///<list type='bullet'>
///<item>
///	<description>Не устанавливается пользователем</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ConfirmationMessage")]
        [DataMember(Name="ConfirmationMessage",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ConfirmationMessage  { get; set; }
              /// <summary>
        /// Дата изменения статуса
	    ///<list type='bullet'>
///<item>
///	<description>для изменения статуса на сейчас требуется указание времени</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("EffectiveDate")]
        [DataMember(Name="EffectiveDate",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? EffectiveDate  { get; set; }
              /// <summary>
        /// Название сущности для которой выполняется операция
	    ///<list type='bullet'>
///<item>
///	<description>Не устанавливается пользователем</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("EntityName")]
        [DataMember(Name="EntityName",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String EntityName { get; set; } = "<empty>";
              /// <summary>
        /// Формат вывода ошибки
	    ///<list type='bullet'>
///<item>
///	<description>'json'</description>
///</item>
///<item>
///	<description>'xml'</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : xml</para>
///<para>Max length : 25</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ErrFormat")]
        [DataMember(Name="ErrFormat",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ErrFormat     {
		get { return Format ?? "xml"; }
		set { this.Format = value; }
	}
              /// <summary>
        /// Признак передачи внешнего значения ID
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - внешний ID (для BIS всегда устанавливаем в 1)</description>
///</item>
///<item>
///	<term>0 </term>
///	<description> - внутренний ID</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("IDType")]
        [DataMember(Name="IDType",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? IDType  { get; set; } = 0;
              /// <summary>
        /// Указание языка для набора multi-language данных 
	    ///<list type='bullet'>
///<item>
///	<term>'uk' </term>
///	<description> -украинский</description>
///</item>
///<item>
///	<term>'ru' </term>
///	<description> -руский </description>
///</item>
///<item>
///	<term>'en' </term>
///	<description> -английский</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("lang")]
        [DataMember(Name="lang",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
			[JsonIgnore]
	public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
              /// <summary>
        /// Пользователь данного изменения
	    ///<list type='bullet'>
///<item>
///	<description>пользователь из контекста</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedBy")]
        [DataMember(Name="ModifiedBy",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedBy  { get; set; }
              /// <summary>
        /// Источник данного изменения
	    ///<list type='bullet'>
///<item>
///	<description>название компьютера из контекста</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedFrom")]
        [DataMember(Name="ModifiedFrom",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedFrom  { get; set; }
              /// <summary>
        /// Идентификатор абонента, клиента или ассоциации
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> -корень дерева учета</description>
///</item>
///<item>
///	<term>SUBS_ID </term>
///	<description> -справочник SUBSCRIBERS</description>
///</item>
///<item>
///	<term>CLNT_ID </term>
///	<description> -справочник CLIENT_HISTORIES</description>
///</item>
///<item>
///	<term>ASSC_ID </term>
///	<description> -справочник ASSOCIATIONS</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("ParentID")]
        [DataMember(Name="ParentID",EmitDefaultValue = false)]
		[JsonRestrictedByValue("<empty>")]

			[Required]
[SecondaryKey("Associations_Request_GET","ID")]/*ACTION*/
[SecondaryKey("Subscribers_Request_GET","ID")]/*ACTION*/
[SecondaryKey("Customers_Request_GET","ID")]/*ACTION*/
	public global::System.Int32? ParentID 	{
		get 
		{ 
			if(emptyId.Equals(this.ParentId))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.ParentId, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.ParentId = value.ToString(); }
	}
              /// <summary>
        /// Комментарий изменения статуса
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Remark")]
        [DataMember(Name="Remark",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String Remark  { get; set; }
              /// <summary>
        /// Статус узла дерева
	    ///<list type='bullet'>
///<item>
///	<description>согласно справочнику статусов (TNST_ID из TreeNodeStatuses)</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("StatusID")]
        [DataMember(Name="StatusID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? StatusID  { get; set; }
              /// <summary>
        /// Признак подтверждения операции со стороны пользователя
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - операция не требует подтверждения</description>
///</item>
///<item>
///	<term>0 </term>
///	<description> - требуется подтверждение</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 1</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("UserAcceptance")]
        [DataMember(Name="UserAcceptance",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? UserAcceptance  { get; set; } = 1;
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "CONFIRMATIONMESSAGE": return ConfirmationMessage;
				    case "EFFECTIVEDATE": return EffectiveDate;
				    case "ENTITYNAME": return EntityName;
				    case "ERRFORMAT": return ErrFormat;
				    case "IDTYPE": return IDType;
				    case "LANG": return lang;
				    case "MODIFIEDBY": return ModifiedBy;
				    case "MODIFIEDFROM": return ModifiedFrom;
				    case "PARENTID": return ParentID;
				    case "REMARK": return Remark;
				    case "STATUSID": return StatusID;
				    case "USERACCEPTANCE": return UserAcceptance;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "CONFIRMATIONMESSAGE":ConfirmationMessage=(string)value;break;
                case "EFFECTIVEDATE":if (value == null)EffectiveDate=null;else EffectiveDate=Convert.ToDateTime(value);break;
                case "ENTITYNAME":EntityName=(string)value;break;
                case "ERRFORMAT":ErrFormat=(string)value;break;
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                case "LANG":lang=(string)value;break;
                case "MODIFIEDBY":ModifiedBy=(string)value;break;
                case "MODIFIEDFROM":ModifiedFrom=(string)value;break;
                case "PARENTID":if (value == null)ParentID=null;else ParentID=Convert.ToInt32(value);break;
                case "REMARK":Remark=(string)value;break;
                case "STATUSID":if (value == null)StatusID=null;else StatusID=Convert.ToInt32(value);break;
                case "USERACCEPTANCE":if (value == null)UserAcceptance=null;else UserAcceptance=Convert.ToInt32(value);break;
                }
            }
		}
		#endregion
	}
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Subscribers_ChangeStatus_Response_ACTION",Namespace = "")]
	public class Subscribers_ChangeStatus_Response_ACTION: BaseEntity, IModifiedTag
	{
         #region [Properties]
			/// <summary>
			/// Ответ АПИ с текстом предупреждения перед изменением статуса
			/// <para/>
			/// ConfMessage
			/// </summary>
			///<remarks>
			///Ответ АПИ с текстом предупреждения перед изменением статуса
			///</remarks>
			[JsonProperty("ConfirmationMessage")]
			[DataMember(Name="ConfirmationMessage", EmitDefaultValue = false)]
			/*norestr*/

            public global::System.String ConfirmationMessage  { get; set; }
			/// <summary>
			/// Признак передачи внешнего значения ID
			/// <para/>
			/// IsExternalID
			/// </summary>
			///<remarks>
			///Признак передачи внешнего значения ID
			///</remarks>
			[JsonProperty("IDType")]
			[DataMember(Name="IDType", EmitDefaultValue = false)]
			/*norestr*/

            public global::System.Int32? IDType  { get; set; } = 0;
			/// <summary>
			/// Указание языка для набора multi-language данных 
			/// <para/>
			/// Lang
			/// </summary>
			///<remarks>
			///Указание языка для набора multi-language данных 
			///</remarks>
			[JsonProperty("lang")]
			[DataMember(Name="lang", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
			[JsonIgnore]
            public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
         #endregion
        [JsonIgnore]
	    public DateTime? If_Modified_Since { get {return null;}}
        #region [IDateModified]
        [JsonIgnore]
	    public DateTime? LastModified { get { return If_Modified_Since;}}
        #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                }
            }
		}
		#endregion
    }
#endregion
#region [Subscribers/Deactivate]

	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Subscribers_Deactivate_Request_ACTION",Namespace = "")]
	public class Subscribers_Deactivate_Request_ACTION : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// Дата деактивации
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("EffectiveDate")]
        [DataMember(Name="EffectiveDate",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? EffectiveDate  { get; set; }
              /// <summary>
        /// Имя сущности для которой выполняется операция
	    ///<list type='bullet'>
///<item>
///	<description>Допустимые значения Associations</description>
///</item>
///<item>
///	<description>Customers</description>
///</item>
///<item>
///	<description>Subscribers</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("EntityName")]
        [DataMember(Name="EntityName",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String EntityName { get; set; } = "<empty>";
              /// <summary>
        /// Формат вывода ошибки
	    ///<list type='bullet'>
///<item>
///	<description>'json'</description>
///</item>
///<item>
///	<description>'xml'</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : xml</para>
///<para>Max length : 25</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ErrFormat")]
        [DataMember(Name="ErrFormat",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ErrFormat     {
		get { return Format ?? "xml"; }
		set { this.Format = value; }
	}
              /// <summary>
        /// Уникальный идентификатор транзакции для идемпотентности
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Header
        /// </remarks>
        [JsonProperty("global_unique_id")]
        [DataMember(Name="global_unique_id",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String global_unique_id  { get; set; }
              /// <summary>
        /// Признак передачи внешнего значения ID
	    ///<list type='bullet'>
///<item>
///	<term>0 </term>
///	<description> - внутренний</description>
///</item>
///<item>
///	<term>1 </term>
///	<description> - внешний</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("IDType")]
        [DataMember(Name="IDType",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? IDType  { get; set; }
              /// <summary>
        /// Фильтр для отбора узлов по коду метки
	    ///<list type='bullet'>
///<item>
///	<description>LABEL_CODE из TREENODE_LABELS</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("LabelCode")]
        [DataMember(Name="LabelCode",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String LabelCode  { get; set; }
              /// <summary>
        /// Указание языка для набора multi-language данных 
	    ///<list type='bullet'>
///<item>
///	<term>'uk' </term>
///	<description> -украинский</description>
///</item>
///<item>
///	<term>'ru' </term>
///	<description> -руский </description>
///</item>
///<item>
///	<term>'en' </term>
///	<description> -английский</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("lang")]
        [DataMember(Name="lang",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
			[JsonIgnore]
	public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
              /// <summary>
        /// Пользователь данного изменения
	    ///<list type='bullet'>
///<item>
///	<term>Username </term>
///	<description> - пользователь из контекста</description>
///</item>
///<item>
///	<term>NULL </term>
///	<description> -если неизвестен</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedBy")]
        [DataMember(Name="ModifiedBy",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedBy  { get; set; }
              /// <summary>
        /// Источник данного изменения
	    ///<list type='bullet'>
///<item>
///	<term>IP </term>
///	<description> -адрес/имя компьютера</description>
///</item>
///<item>
///	<term>NULL </term>
///	<description> - если неизвестен</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedFrom")]
        [DataMember(Name="ModifiedFrom",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedFrom  { get; set; }
              /// <summary>
        /// Адрес для нотификации о деактивации
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Notification")]
        [DataMember(Name="Notification",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Notification  { get; set; }
              /// <summary>
        /// Идентификатор абонента
	    ///<list type='bullet'>
///<item>
///	<description>SUBS_ID из справочника SUBSCRIBERS</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("ParentID")]
        [DataMember(Name="ParentID",EmitDefaultValue = false)]
		[JsonRestrictedByValue("<empty>")]

			[Required]
[SecondaryKey("Subscribers_Request_GET","ID")]/*ACTION*/
	public global::System.Int32? ParentID 	{
		get 
		{ 
			if(emptyId.Equals(this.ParentId))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.ParentId, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.ParentId = value.ToString(); }
	}
              /// <summary>
        /// Телефон для нотификации о деактивации
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("PhoneNumber")]
        [DataMember(Name="PhoneNumber",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String PhoneNumber  { get; set; }
              /// <summary>
        /// Комментарий
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Remark")]
        [DataMember(Name="Remark",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String Remark  { get; set; }
              /// <summary>
        /// Фильтр для отбора узлов по текущему статусу узла дерева
	    ///<list type='bullet'>
///<item>
///	<description>tnst_Code из TreeNodeStatuses</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("StatusCode")]
        [DataMember(Name="StatusCode",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String StatusCode  { get; set; }
              /// <summary>
        /// Значение статуса узла после выполнения операции
	    ///<list type='bullet'>
///<item>
///	<description>tnst_Code из TreeNodeStatuses</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("TargetStatusCode")]
        [DataMember(Name="TargetStatusCode",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String TargetStatusCode  { get; set; }
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "EFFECTIVEDATE": return EffectiveDate;
				    case "ENTITYNAME": return EntityName;
				    case "ERRFORMAT": return ErrFormat;
				    case "GLOBAL_UNIQUE_ID": return global_unique_id;
				    case "IDTYPE": return IDType;
				    case "LABELCODE": return LabelCode;
				    case "LANG": return lang;
				    case "MODIFIEDBY": return ModifiedBy;
				    case "MODIFIEDFROM": return ModifiedFrom;
				    case "NOTIFICATION": return Notification;
				    case "PARENTID": return ParentID;
				    case "PHONENUMBER": return PhoneNumber;
				    case "REMARK": return Remark;
				    case "STATUSCODE": return StatusCode;
				    case "TARGETSTATUSCODE": return TargetStatusCode;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "EFFECTIVEDATE":if (value == null)EffectiveDate=null;else EffectiveDate=Convert.ToDateTime(value);break;
                case "ENTITYNAME":EntityName=(string)value;break;
                case "ERRFORMAT":ErrFormat=(string)value;break;
                case "GLOBAL_UNIQUE_ID":global_unique_id=(string)value;break;
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                case "LABELCODE":LabelCode=(string)value;break;
                case "LANG":lang=(string)value;break;
                case "MODIFIEDBY":ModifiedBy=(string)value;break;
                case "MODIFIEDFROM":ModifiedFrom=(string)value;break;
                case "NOTIFICATION":Notification=(string)value;break;
                case "PARENTID":if (value == null)ParentID=null;else ParentID=Convert.ToInt32(value);break;
                case "PHONENUMBER":PhoneNumber=(string)value;break;
                case "REMARK":Remark=(string)value;break;
                case "STATUSCODE":StatusCode=(string)value;break;
                case "TARGETSTATUSCODE":TargetStatusCode=(string)value;break;
                }
            }
		}
		#endregion
	}
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Subscribers_Deactivate_Response_ACTION",Namespace = "")]
	public class Subscribers_Deactivate_Response_ACTION: BaseEntity, IModifiedTag
	{
         #region [Properties]
			/// <summary>
			/// Кол-во обработанных записей 
			/// <para/>
			/// AffectedCount
			/// </summary>
			///<remarks>
			///Кол-во обработанных записей 
			///</remarks>
			[JsonProperty("AffectedCount")]
			[DataMember(Name="AffectedCount", EmitDefaultValue = false)]
			/*norestr*/

            public global::System.Int32? AffectedCount  { get; set; }
			/// <summary>
			/// Признак передачи внешнего значения ID
			/// <para/>
			/// IsExternalID
			/// </summary>
			///<remarks>
			///Признак передачи внешнего значения ID
			///</remarks>
			[JsonProperty("IDType")]
			[DataMember(Name="IDType", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
            public global::System.Int32? IDType  { get; set; }
			/// <summary>
			/// Указание языка для набора multi-language данных 
			/// <para/>
			/// Lang
			/// </summary>
			///<remarks>
			///Указание языка для набора multi-language данных 
			///</remarks>
			[JsonProperty("lang")]
			[DataMember(Name="lang", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
			[JsonIgnore]
            public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
			/// <summary>
			/// Идентификатор процесса 
			/// <para/>
			/// Wev_ID
			/// </summary>
			///<remarks>
			///Идентификатор процесса 
			///</remarks>
			[JsonProperty("WorkEventID")]
			[DataMember(Name="WorkEventID", EmitDefaultValue = false)]
			/*norestr*/

            public global::System.Int32? WorkEventID  { get; set; }
         #endregion
        [JsonIgnore]
	    public DateTime? If_Modified_Since { get {return null;}}
        #region [IDateModified]
        [JsonIgnore]
	    public DateTime? LastModified { get { return If_Modified_Since;}}
        #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                }
            }
		}
		#endregion
    }
#endregion
#region [Subscribers/Details]
  
    
    ///<remarks>GET &lt;host&gt;[:&lt;port&gt;]/api/v1/bss/Subscribers/Details
///</remarks>
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Subscribers_Details_Request_GET",Namespace = "")]
	public class Subscribers_Details_Request_GET : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// Дата модификации для http-тега If-Modified-Since
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("CacheControlDate")]
        [DataMember(Name="CacheControlDate",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? CacheControlDate  { get; set; }
              /// <summary>
        /// Идентификатор Абонента
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ID")]
        [DataMember(Name="ID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? ID 	{
		get 
		{ 
			if(emptyId.Equals(this.Id))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.Id, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.Id = value.ToString(); }
	}
              /// <summary>
        /// Формат вывода ошибки
	    ///<list type='bullet'>
///<item>
///	<description>'json'</description>
///</item>
///<item>
///	<description>'xml'</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : xml</para>
///<para>Max length : 25</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ErrFormat")]
        [DataMember(Name="ErrFormat",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ErrFormat     {
		get { return Format ?? "xml"; }
		set { this.Format = value; }
	}
              /// <summary>
        /// Признак передачи внешнего значения ID
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - внешний ID (для BIS всегда устанавливаем в 1)</description>
///</item>
///<item>
///	<term>0 </term>
///	<description> - внутренний ID</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("IDType")]
        [DataMember(Name="IDType",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? IDType  { get; set; } = 0;
              /// <summary>
        /// Указание языка для набора multi-language данных 
	    ///<list type='bullet'>
///<item>
///	<term>'uk' </term>
///	<description> -украинский</description>
///</item>
///<item>
///	<term>'ru' </term>
///	<description> -руский </description>
///</item>
///<item>
///	<term>'en' </term>
///	<description> -английский</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("lang")]
        [DataMember(Name="lang",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
			[JsonIgnore]
	public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "CACHECONTROLDATE": return CacheControlDate;
				    case "ID": return ID;
				    case "ERRFORMAT": return ErrFormat;
				    case "IDTYPE": return IDType;
				    case "LANG": return lang;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "CACHECONTROLDATE":if (value == null)CacheControlDate=null;else CacheControlDate=Convert.ToDateTime(value);break;
                case "ID":if (value == null)ID=null;else ID=Convert.ToInt32(value);break;
                case "ERRFORMAT":ErrFormat=(string)value;break;
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                case "LANG":lang=(string)value;break;
                }
            }
		}
		#endregion
	}
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Subscribers_Details_Response_GET",Namespace = "")]
	public class Subscribers_Details_Response_GET: BaseEntity, IModifiedTag
	{
         #region [Properties]
			/// <summary>
			/// Дата модификации для http-тега If-Modified-Since
			/// <para/>
			/// IfModifiedSinceDate
			/// </summary>
			///<remarks>
			///Дата модификации для http-тега If-Modified-Since
			///</remarks>
			[JsonProperty("CacheControlDate")]
			[DataMember(Name="CacheControlDate", EmitDefaultValue = false)]
			/*norestr*/

            public global::System.DateTime? CacheControlDate  { get; set; }
			/// <summary>
			/// Указание языка для набора multi-language данных 
			/// <para/>
			/// Lang
			/// </summary>
			///<remarks>
			///Указание языка для набора multi-language данных 
			///</remarks>
			[JsonProperty("lang")]
			[DataMember(Name="lang", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
			[JsonIgnore]
            public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
         #endregion
        [JsonIgnore]
	    public DateTime? If_Modified_Since { get {return CacheControlDate;}}
        #region [IDateModified]
        [JsonIgnore]
	    public DateTime? LastModified { get { return If_Modified_Since;}}
        #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "CACHECONTROLDATE": return CacheControlDate;
				    case "LANG": return lang;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "CACHECONTROLDATE":if (value == null)CacheControlDate=null;else CacheControlDate=Convert.ToDateTime(value);break;
                case "LANG":lang=(string)value;break;
                }
            }
		}
		#endregion
    }
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Subscribers_Details_Response_GET_OUTPUT",Namespace = "")]
	public class Subscribers_Details_Response_GET_OUTPUT : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_IsGuest")]
        [DataMember(Name="abn_IsGuest",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? abn_IsGuest  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abc_Date_Personal")]
        [DataMember(Name="abc_Date_Personal",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.DateTime? abc_Date_Personal  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_Balance")]
        [DataMember(Name="abn_Balance",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Decimal? abn_Balance  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_CreateDate")]
        [DataMember(Name="abn_CreateDate",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.DateTime? abn_CreateDate  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_Date")]
        [DataMember(Name="abn_Date",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.DateTime? abn_Date  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_Employe_Export_ID")]
        [DataMember(Name="abn_Employe_Export_ID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String abn_Employe_Export_ID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_Employee_ID")]
        [DataMember(Name="abn_Employee_ID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String abn_Employee_ID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_ExternalID")]
        [DataMember(Name="abn_ExternalID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? abn_ExternalID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_FirstName")]
        [DataMember(Name="abn_FirstName",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String abn_FirstName  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_Guid")]
        [DataMember(Name="abn_Guid",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Guid? abn_Guid  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ID")]
        [DataMember(Name="ID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? ID 	{
		get 
		{ 
			if(emptyId.Equals(this.Id))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.Id, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.Id = value.ToString(); }
	}
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_ID_Boss")]
        [DataMember(Name="abn_ID_Boss",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? abn_ID_Boss  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_IsExistAD")]
        [DataMember(Name="abn_IsExistAD",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? abn_IsExistAD  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_LastFM")]
        [DataMember(Name="abn_LastFM",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String abn_LastFM  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_LastName")]
        [DataMember(Name="abn_LastName",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String abn_LastName  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_Login")]
        [DataMember(Name="abn_Login",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String abn_Login  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_MiddleName")]
        [DataMember(Name="abn_MiddleName",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String abn_MiddleName  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_ModifiedBy")]
        [DataMember(Name="abn_ModifiedBy",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String abn_ModifiedBy  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_ModifiedDate")]
        [DataMember(Name="abn_ModifiedDate",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.DateTime? abn_ModifiedDate  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_ModifiedFrom")]
        [DataMember(Name="abn_ModifiedFrom",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String abn_ModifiedFrom  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_NestedSets_Left")]
        [DataMember(Name="abn_NestedSets_Left",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? abn_NestedSets_Left  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_NestedSets_Right")]
        [DataMember(Name="abn_NestedSets_Right",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? abn_NestedSets_Right  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_Password")]
        [DataMember(Name="abn_Password",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String abn_Password  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_PositionCode")]
        [DataMember(Name="abn_PositionCode",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String abn_PositionCode  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_ShowPhoneDirectory")]
        [DataMember(Name="abn_ShowPhoneDirectory",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? abn_ShowPhoneDirectory  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_WorkPlace")]
        [DataMember(Name="abn_WorkPlace",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String abn_WorkPlace  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_WorkPlace_Personal")]
        [DataMember(Name="abn_WorkPlace_Personal",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String abn_WorkPlace_Personal  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abn_XmlData")]
        [DataMember(Name="abn_XmlData",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String abn_XmlData  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("AbonentFullName")]
        [DataMember(Name="AbonentFullName",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String AbonentFullName  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("acnt_ID")]
        [DataMember(Name="acnt_ID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? acnt_ID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("acnt_ID_count")]
        [DataMember(Name="acnt_ID_count",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? acnt_ID_count  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("acnt_IsPersonal")]
        [DataMember(Name="acnt_IsPersonal",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? acnt_IsPersonal  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("acnt_Number")]
        [DataMember(Name="acnt_Number",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String acnt_Number  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("acnt_Number_Personal")]
        [DataMember(Name="acnt_Number_Personal",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String acnt_Number_Personal  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Actpd_Name")]
        [DataMember(Name="Actpd_Name",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String Actpd_Name  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Actpd_Name_Personal")]
        [DataMember(Name="Actpd_Name_Personal",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String Actpd_Name_Personal  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("atnsb_DateEnd")]
        [DataMember(Name="atnsb_DateEnd",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.DateTime? atnsb_DateEnd  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("atnsb_DateStart")]
        [DataMember(Name="atnsb_DateStart",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.DateTime? atnsb_DateStart  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abb_Balance")]
        [DataMember(Name="abb_Balance",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Decimal? abb_Balance  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abb_Balance_Personal")]
        [DataMember(Name="abb_Balance_Personal",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Decimal? abb_Balance_Personal  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abb_ModifiedDate")]
        [DataMember(Name="abb_ModifiedDate",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.DateTime? abb_ModifiedDate  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abb_ModifiedDate_Personal")]
        [DataMember(Name="abb_ModifiedDate_Personal",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.DateTime? abb_ModifiedDate_Personal  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abc_Balance")]
        [DataMember(Name="abc_Balance",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Decimal? abc_Balance  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abc_Balance_Personal")]
        [DataMember(Name="abc_Balance_Personal",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Decimal? abc_Balance_Personal  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("abc_Date")]
        [DataMember(Name="abc_Date",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.DateTime? abc_Date  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("aut_ID_count")]
        [DataMember(Name="aut_ID_count",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? aut_ID_count  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Boss_Tnt_Type")]
        [DataMember(Name="Boss_Tnt_Type",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String Boss_Tnt_Type  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("BossFullName")]
        [DataMember(Name="BossFullName",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String BossFullName  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("com_Id")]
        [DataMember(Name="com_Id",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? com_Id  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("debt_Amount")]
        [DataMember(Name="debt_Amount",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Decimal? debt_Amount  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("debt_Date")]
        [DataMember(Name="debt_Date",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.DateTime? debt_Date  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("dep_ID")]
        [DataMember(Name="dep_ID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? dep_ID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ext_ExtNum")]
        [DataMember(Name="ext_ExtNum",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String ext_ExtNum  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ext_ID_count")]
        [DataMember(Name="ext_ID_count",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? ext_ID_count  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("grp_ID")]
        [DataMember(Name="grp_ID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? grp_ID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("grp_Name")]
        [DataMember(Name="grp_Name",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String grp_Name  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("isActivated")]
        [DataMember(Name="isActivated",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? isActivated  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("isEditAllow")]
        [DataMember(Name="isEditAllow",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? isEditAllow  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("isEditWorkPlace")]
        [DataMember(Name="isEditWorkPlace",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? isEditWorkPlace  { get; set; }
              /// <summary>
        /// Указание языка для набора multi-language данных 
	    ///<list type='bullet'>
///<item>
///	<term>'uk' </term>
///	<description> -украинский</description>
///</item>
///<item>
///	<term>'ru' </term>
///	<description> -руский </description>
///</item>
///<item>
///	<term>'en' </term>
///	<description> -английский</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("lang")]
        [DataMember(Name="lang",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
			[JsonIgnore]
	public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("lng_ID")]
        [DataMember(Name="lng_ID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? lng_ID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("loc_Name")]
        [DataMember(Name="loc_Name",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String loc_Name  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Location_ID")]
        [DataMember(Name="Location_ID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? Location_ID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ntw_ID")]
        [DataMember(Name="ntw_ID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? ntw_ID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("pbx_networkName")]
        [DataMember(Name="pbx_networkName",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String pbx_networkName  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ProfileType")]
        [DataMember(Name="ProfileType",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? ProfileType  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("SubsCount")]
        [DataMember(Name="SubsCount",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? SubsCount  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("tnh_LastFM")]
        [DataMember(Name="tnh_LastFM",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String tnh_LastFM  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("tnst_ExternalID")]
        [DataMember(Name="tnst_ExternalID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? tnst_ExternalID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("tnst_ID")]
        [DataMember(Name="tnst_ID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? tnst_ID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("tnt_AccountMandatory")]
        [DataMember(Name="tnt_AccountMandatory",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? tnt_AccountMandatory  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("tnt_ID")]
        [DataMember(Name="tnt_ID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? tnt_ID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("TreeNodeType")]
        [DataMember(Name="TreeNodeType",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String TreeNodeType  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("trf_ID")]
        [DataMember(Name="trf_ID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? trf_ID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("CacheControlDate")]
        [DataMember(Name="CacheControlDate",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? CacheControlDate  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("isRefusalChangeName")]
        [DataMember(Name="isRefusalChangeName",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? isRefusalChangeName  { get; set; }
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "ABN_ISGUEST": return abn_IsGuest;
				    case "ABC_DATE_PERSONAL": return abc_Date_Personal;
				    case "ABN_BALANCE": return abn_Balance;
				    case "ABN_CREATEDATE": return abn_CreateDate;
				    case "ABN_DATE": return abn_Date;
				    case "ABN_EMPLOYE_EXPORT_ID": return abn_Employe_Export_ID;
				    case "ABN_EMPLOYEE_ID": return abn_Employee_ID;
				    case "ABN_EXTERNALID": return abn_ExternalID;
				    case "ABN_FIRSTNAME": return abn_FirstName;
				    case "ABN_GUID": return abn_Guid;
				    case "ID": return ID;
				    case "ABN_ID_BOSS": return abn_ID_Boss;
				    case "ABN_ISEXISTAD": return abn_IsExistAD;
				    case "ABN_LASTFM": return abn_LastFM;
				    case "ABN_LASTNAME": return abn_LastName;
				    case "ABN_LOGIN": return abn_Login;
				    case "ABN_MIDDLENAME": return abn_MiddleName;
				    case "ABN_MODIFIEDBY": return abn_ModifiedBy;
				    case "ABN_MODIFIEDDATE": return abn_ModifiedDate;
				    case "ABN_MODIFIEDFROM": return abn_ModifiedFrom;
				    case "ABN_NESTEDSETS_LEFT": return abn_NestedSets_Left;
				    case "ABN_NESTEDSETS_RIGHT": return abn_NestedSets_Right;
				    case "ABN_PASSWORD": return abn_Password;
				    case "ABN_POSITIONCODE": return abn_PositionCode;
				    case "ABN_SHOWPHONEDIRECTORY": return abn_ShowPhoneDirectory;
				    case "ABN_WORKPLACE": return abn_WorkPlace;
				    case "ABN_WORKPLACE_PERSONAL": return abn_WorkPlace_Personal;
				    case "ABN_XMLDATA": return abn_XmlData;
				    case "ABONENTFULLNAME": return AbonentFullName;
				    case "ACNT_ID": return acnt_ID;
				    case "ACNT_ID_COUNT": return acnt_ID_count;
				    case "ACNT_ISPERSONAL": return acnt_IsPersonal;
				    case "ACNT_NUMBER": return acnt_Number;
				    case "ACNT_NUMBER_PERSONAL": return acnt_Number_Personal;
				    case "ACTPD_NAME": return Actpd_Name;
				    case "ACTPD_NAME_PERSONAL": return Actpd_Name_Personal;
				    case "ATNSB_DATEEND": return atnsb_DateEnd;
				    case "ATNSB_DATESTART": return atnsb_DateStart;
				    case "ABB_BALANCE": return abb_Balance;
				    case "ABB_BALANCE_PERSONAL": return abb_Balance_Personal;
				    case "ABB_MODIFIEDDATE": return abb_ModifiedDate;
				    case "ABB_MODIFIEDDATE_PERSONAL": return abb_ModifiedDate_Personal;
				    case "ABC_BALANCE": return abc_Balance;
				    case "ABC_BALANCE_PERSONAL": return abc_Balance_Personal;
				    case "ABC_DATE": return abc_Date;
				    case "AUT_ID_COUNT": return aut_ID_count;
				    case "BOSS_TNT_TYPE": return Boss_Tnt_Type;
				    case "BOSSFULLNAME": return BossFullName;
				    case "COM_ID": return com_Id;
				    case "DEBT_AMOUNT": return debt_Amount;
				    case "DEBT_DATE": return debt_Date;
				    case "DEP_ID": return dep_ID;
				    case "EXT_EXTNUM": return ext_ExtNum;
				    case "EXT_ID_COUNT": return ext_ID_count;
				    case "GRP_ID": return grp_ID;
				    case "GRP_NAME": return grp_Name;
				    case "ISACTIVATED": return isActivated;
				    case "ISEDITALLOW": return isEditAllow;
				    case "ISEDITWORKPLACE": return isEditWorkPlace;
				    case "LANG": return lang;
				    case "LNG_ID": return lng_ID;
				    case "LOC_NAME": return loc_Name;
				    case "LOCATION_ID": return Location_ID;
				    case "NTW_ID": return ntw_ID;
				    case "PBX_NETWORKNAME": return pbx_networkName;
				    case "PROFILETYPE": return ProfileType;
				    case "SUBSCOUNT": return SubsCount;
				    case "TNH_LASTFM": return tnh_LastFM;
				    case "TNST_EXTERNALID": return tnst_ExternalID;
				    case "TNST_ID": return tnst_ID;
				    case "TNT_ACCOUNTMANDATORY": return tnt_AccountMandatory;
				    case "TNT_ID": return tnt_ID;
				    case "TREENODETYPE": return TreeNodeType;
				    case "TRF_ID": return trf_ID;
				    case "CACHECONTROLDATE": return CacheControlDate;
				    case "ISREFUSALCHANGENAME": return isRefusalChangeName;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "ABN_ISGUEST":if (value == null)abn_IsGuest=null;else abn_IsGuest=Convert.ToInt32(value);break;
                case "ABC_DATE_PERSONAL":if (value == null)abc_Date_Personal=null;else abc_Date_Personal=Convert.ToDateTime(value);break;
                case "ABN_BALANCE":if (value == null)abn_Balance=null;else abn_Balance=Convert.ToDecimal(value);break;
                case "ABN_CREATEDATE":if (value == null)abn_CreateDate=null;else abn_CreateDate=Convert.ToDateTime(value);break;
                case "ABN_DATE":if (value == null)abn_Date=null;else abn_Date=Convert.ToDateTime(value);break;
                case "ABN_EMPLOYE_EXPORT_ID":abn_Employe_Export_ID=(string)value;break;
                case "ABN_EMPLOYEE_ID":abn_Employee_ID=(string)value;break;
                case "ABN_EXTERNALID":if (value == null)abn_ExternalID=null;else abn_ExternalID=Convert.ToInt32(value);break;
                case "ABN_FIRSTNAME":abn_FirstName=(string)value;break;
                case "ABN_GUID":if (value == null)abn_Guid=null;else abn_Guid=(Guid)value;break;
                case "ID":if (value == null)ID=null;else ID=Convert.ToInt32(value);break;
                case "ABN_ID_BOSS":if (value == null)abn_ID_Boss=null;else abn_ID_Boss=Convert.ToInt32(value);break;
                case "ABN_ISEXISTAD":if (value == null)abn_IsExistAD=null;else abn_IsExistAD=Convert.ToInt32(value);break;
                case "ABN_LASTFM":abn_LastFM=(string)value;break;
                case "ABN_LASTNAME":abn_LastName=(string)value;break;
                case "ABN_LOGIN":abn_Login=(string)value;break;
                case "ABN_MIDDLENAME":abn_MiddleName=(string)value;break;
                case "ABN_MODIFIEDBY":abn_ModifiedBy=(string)value;break;
                case "ABN_MODIFIEDDATE":if (value == null)abn_ModifiedDate=null;else abn_ModifiedDate=Convert.ToDateTime(value);break;
                case "ABN_MODIFIEDFROM":abn_ModifiedFrom=(string)value;break;
                case "ABN_NESTEDSETS_LEFT":if (value == null)abn_NestedSets_Left=null;else abn_NestedSets_Left=Convert.ToInt32(value);break;
                case "ABN_NESTEDSETS_RIGHT":if (value == null)abn_NestedSets_Right=null;else abn_NestedSets_Right=Convert.ToInt32(value);break;
                case "ABN_PASSWORD":abn_Password=(string)value;break;
                case "ABN_POSITIONCODE":abn_PositionCode=(string)value;break;
                case "ABN_SHOWPHONEDIRECTORY":if (value == null)abn_ShowPhoneDirectory=null;else abn_ShowPhoneDirectory=Convert.ToInt32(value);break;
                case "ABN_WORKPLACE":abn_WorkPlace=(string)value;break;
                case "ABN_WORKPLACE_PERSONAL":abn_WorkPlace_Personal=(string)value;break;
                case "ABN_XMLDATA":abn_XmlData=(string)value;break;
                case "ABONENTFULLNAME":AbonentFullName=(string)value;break;
                case "ACNT_ID":if (value == null)acnt_ID=null;else acnt_ID=Convert.ToInt32(value);break;
                case "ACNT_ID_COUNT":if (value == null)acnt_ID_count=null;else acnt_ID_count=Convert.ToInt32(value);break;
                case "ACNT_ISPERSONAL":if (value == null)acnt_IsPersonal=null;else acnt_IsPersonal=Convert.ToInt32(value);break;
                case "ACNT_NUMBER":acnt_Number=(string)value;break;
                case "ACNT_NUMBER_PERSONAL":acnt_Number_Personal=(string)value;break;
                case "ACTPD_NAME":Actpd_Name=(string)value;break;
                case "ACTPD_NAME_PERSONAL":Actpd_Name_Personal=(string)value;break;
                case "ATNSB_DATEEND":if (value == null)atnsb_DateEnd=null;else atnsb_DateEnd=Convert.ToDateTime(value);break;
                case "ATNSB_DATESTART":if (value == null)atnsb_DateStart=null;else atnsb_DateStart=Convert.ToDateTime(value);break;
                case "ABB_BALANCE":if (value == null)abb_Balance=null;else abb_Balance=Convert.ToDecimal(value);break;
                case "ABB_BALANCE_PERSONAL":if (value == null)abb_Balance_Personal=null;else abb_Balance_Personal=Convert.ToDecimal(value);break;
                case "ABB_MODIFIEDDATE":if (value == null)abb_ModifiedDate=null;else abb_ModifiedDate=Convert.ToDateTime(value);break;
                case "ABB_MODIFIEDDATE_PERSONAL":if (value == null)abb_ModifiedDate_Personal=null;else abb_ModifiedDate_Personal=Convert.ToDateTime(value);break;
                case "ABC_BALANCE":if (value == null)abc_Balance=null;else abc_Balance=Convert.ToDecimal(value);break;
                case "ABC_BALANCE_PERSONAL":if (value == null)abc_Balance_Personal=null;else abc_Balance_Personal=Convert.ToDecimal(value);break;
                case "ABC_DATE":if (value == null)abc_Date=null;else abc_Date=Convert.ToDateTime(value);break;
                case "AUT_ID_COUNT":if (value == null)aut_ID_count=null;else aut_ID_count=Convert.ToInt32(value);break;
                case "BOSS_TNT_TYPE":Boss_Tnt_Type=(string)value;break;
                case "BOSSFULLNAME":BossFullName=(string)value;break;
                case "COM_ID":if (value == null)com_Id=null;else com_Id=Convert.ToInt32(value);break;
                case "DEBT_AMOUNT":if (value == null)debt_Amount=null;else debt_Amount=Convert.ToDecimal(value);break;
                case "DEBT_DATE":if (value == null)debt_Date=null;else debt_Date=Convert.ToDateTime(value);break;
                case "DEP_ID":if (value == null)dep_ID=null;else dep_ID=Convert.ToInt32(value);break;
                case "EXT_EXTNUM":ext_ExtNum=(string)value;break;
                case "EXT_ID_COUNT":if (value == null)ext_ID_count=null;else ext_ID_count=Convert.ToInt32(value);break;
                case "GRP_ID":if (value == null)grp_ID=null;else grp_ID=Convert.ToInt32(value);break;
                case "GRP_NAME":grp_Name=(string)value;break;
                case "ISACTIVATED":if (value == null)isActivated=null;else isActivated=Convert.ToInt32(value);break;
                case "ISEDITALLOW":if (value == null)isEditAllow=null;else isEditAllow=Convert.ToInt32(value);break;
                case "ISEDITWORKPLACE":if (value == null)isEditWorkPlace=null;else isEditWorkPlace=Convert.ToInt32(value);break;
                case "LANG":lang=(string)value;break;
                case "LNG_ID":if (value == null)lng_ID=null;else lng_ID=Convert.ToInt32(value);break;
                case "LOC_NAME":loc_Name=(string)value;break;
                case "LOCATION_ID":if (value == null)Location_ID=null;else Location_ID=Convert.ToInt32(value);break;
                case "NTW_ID":if (value == null)ntw_ID=null;else ntw_ID=Convert.ToInt32(value);break;
                case "PBX_NETWORKNAME":pbx_networkName=(string)value;break;
                case "PROFILETYPE":if (value == null)ProfileType=null;else ProfileType=Convert.ToInt32(value);break;
                case "SUBSCOUNT":if (value == null)SubsCount=null;else SubsCount=Convert.ToInt32(value);break;
                case "TNH_LASTFM":tnh_LastFM=(string)value;break;
                case "TNST_EXTERNALID":if (value == null)tnst_ExternalID=null;else tnst_ExternalID=Convert.ToInt32(value);break;
                case "TNST_ID":if (value == null)tnst_ID=null;else tnst_ID=Convert.ToInt32(value);break;
                case "TNT_ACCOUNTMANDATORY":if (value == null)tnt_AccountMandatory=null;else tnt_AccountMandatory=Convert.ToInt32(value);break;
                case "TNT_ID":if (value == null)tnt_ID=null;else tnt_ID=Convert.ToInt32(value);break;
                case "TREENODETYPE":TreeNodeType=(string)value;break;
                case "TRF_ID":if (value == null)trf_ID=null;else trf_ID=Convert.ToInt32(value);break;
                case "CACHECONTROLDATE":if (value == null)CacheControlDate=null;else CacheControlDate=Convert.ToDateTime(value);break;
                case "ISREFUSALCHANGENAME":if (value == null)isRefusalChangeName=null;else isRefusalChangeName=Convert.ToInt32(value);break;
                }
            }
		}
		#endregion
	}
#endregion
#region [Subscribers/Recharge]

	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Subscribers_Recharge_Request_ACTION",Namespace = "")]
	public class Subscribers_Recharge_Request_ACTION : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// Явное указание суммы подписки - для переопределения цены пакета в случае использования FMC подписок (сумма списания на основании суммы платежа)
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("AMOUNT")]
        [DataMember(Name="AMOUNT",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Decimal? AMOUNT  { get; set; } = 0;
              /// <summary>
        /// Тип начислений (зарезервировано)
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ChargeCode")]
        [DataMember(Name="ChargeCode",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ChargeCode  { get; set; }
              /// <summary>
        /// Дата окончания действия
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("DateEnd")]
        [DataMember(Name="DateEnd",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? DateEnd  { get; set; }
              /// <summary>
        /// Дата начала действия
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("DateStart")]
        [DataMember(Name="DateStart",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? DateStart  { get; set; }
              /// <summary>
        /// дата активации
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("EffectiveDate")]
        [DataMember(Name="EffectiveDate",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? EffectiveDate  { get; set; }
              /// <summary>
        /// режим расчета суммы АП к начислению
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("EmulateMode")]
        [DataMember(Name="EmulateMode",EmitDefaultValue = false)]
		/*norestr*/
[DocIgnore]

	public global::System.Int32? EmulateMode  { get; set; } = 0;
              /// <summary>
        /// Имя сущности для которой выполняется операция
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("EntityName")]
        [DataMember(Name="EntityName",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String EntityName { get; set; } = "<empty>";
              /// <summary>
        /// Формат вывода ошибки
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : xml</para>
///<para>Max length : 25</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ErrFormat")]
        [DataMember(Name="ErrFormat",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ErrFormat     {
		get { return Format ?? "xml"; }
		set { this.Format = value; }
	}
              /// <summary>
        /// Идентификатор Extentions (Номера MSISDN)
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ExtentionID")]
        [DataMember(Name="ExtentionID",EmitDefaultValue = false)]
		/*norestr*/
[DocIgnore]

	public global::System.Int32? ExtentionID  { get; set; }
              /// <summary>
        /// Идентификатор группы устройств
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ID_GroupATS")]
        [DataMember(Name="ID_GroupATS",EmitDefaultValue = false)]
		/*norestr*/
[DocIgnore]

	public global::System.Int32? ID_GroupATS  { get; set; }
              /// <summary>
        /// Признак передачи внешнего значения ID
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 1</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("IDType")]
        [DataMember(Name="IDType",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? IDType  { get; set; } = 1;
              /// <summary>
        /// Признак провести пересчет в оффлайн режиме
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 1</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("IsOnline")]
        [DataMember(Name="IsOnline",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? IsOnline  { get; set; } = 1;
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 1</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("IsReCharge")]
        [DataMember(Name="IsReCharge",EmitDefaultValue = false)]
		/*norestr*/
[DocIgnore]

	public global::System.Int32? IsReCharge  { get; set; } = 1;
              /// <summary>
        /// Указание языка для набора multi-language данных 
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("lang")]
        [DataMember(Name="lang",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
			[JsonIgnore]
	public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
              /// <summary>
        /// Режим подключения Пакетов и услуг
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Mode")]
        [DataMember(Name="Mode",EmitDefaultValue = false)]
		/*norestr*/
[DocIgnore]

	public global::System.Int32? Mode  { get; set; } = 0;
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedBy")]
        [DataMember(Name="ModifiedBy",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedBy  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedFrom")]
        [DataMember(Name="ModifiedFrom",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedFrom  { get; set; }
              /// <summary>
        /// Идентификатор устройства
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("NumberATS")]
        [DataMember(Name="NumberATS",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? NumberATS  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ParentID")]
        [DataMember(Name="ParentID",EmitDefaultValue = false)]
		[JsonRestrictedByValue("<empty>")]

			[Required]
	public global::System.Int32? ParentID 	{
		get 
		{ 
			if(emptyId.Equals(this.ParentId))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.ParentId, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.ParentId = value.ToString(); }
	}
              /// <summary>
        /// Идентификатор технической услуги ""выписка счета
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ServiceID")]
        [DataMember(Name="ServiceID",EmitDefaultValue = false)]
		/*norestr*/
[DocIgnore]

	public global::System.Int32? ServiceID  { get; set; }
              /// <summary>
        /// Идентификатор сессии: код системы(3 знака), код операции(2 знака) и идентификатор сессии(15 знаков). Используется функция fn_GetUniqueID
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Srs_SessionID")]
        [DataMember(Name="Srs_SessionID",EmitDefaultValue = false)]
		/*norestr*/
[DocIgnore]

	public global::System.String Srs_SessionID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Wev_CurrrentState")]
        [DataMember(Name="Wev_CurrrentState",EmitDefaultValue = false)]
		/*norestr*/
[DocIgnore]

	public global::System.String Wev_CurrrentState  { get; set; }
              /// <summary>
        /// Идентификатор процесса расчета
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("WorkEventID")]
        [DataMember(Name="WorkEventID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? WorkEventID  { get; set; }
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "AMOUNT": return AMOUNT;
				    case "CHARGECODE": return ChargeCode;
				    case "DATEEND": return DateEnd;
				    case "DATESTART": return DateStart;
				    case "EFFECTIVEDATE": return EffectiveDate;
				    case "EMULATEMODE": return EmulateMode;
				    case "ENTITYNAME": return EntityName;
				    case "ERRFORMAT": return ErrFormat;
				    case "EXTENTIONID": return ExtentionID;
				    case "ID_GROUPATS": return ID_GroupATS;
				    case "IDTYPE": return IDType;
				    case "ISONLINE": return IsOnline;
				    case "ISRECHARGE": return IsReCharge;
				    case "LANG": return lang;
				    case "MODE": return Mode;
				    case "MODIFIEDBY": return ModifiedBy;
				    case "MODIFIEDFROM": return ModifiedFrom;
				    case "NUMBERATS": return NumberATS;
				    case "PARENTID": return ParentID;
				    case "SERVICEID": return ServiceID;
				    case "SRS_SESSIONID": return Srs_SessionID;
				    case "WEV_CURRRENTSTATE": return Wev_CurrrentState;
				    case "WORKEVENTID": return WorkEventID;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "AMOUNT":if (value == null)AMOUNT=null;else AMOUNT=Convert.ToDecimal(value);break;
                case "CHARGECODE":ChargeCode=(string)value;break;
                case "DATEEND":if (value == null)DateEnd=null;else DateEnd=Convert.ToDateTime(value);break;
                case "DATESTART":if (value == null)DateStart=null;else DateStart=Convert.ToDateTime(value);break;
                case "EFFECTIVEDATE":if (value == null)EffectiveDate=null;else EffectiveDate=Convert.ToDateTime(value);break;
                case "EMULATEMODE":if (value == null)EmulateMode=null;else EmulateMode=Convert.ToInt32(value);break;
                case "ENTITYNAME":EntityName=(string)value;break;
                case "ERRFORMAT":ErrFormat=(string)value;break;
                case "EXTENTIONID":if (value == null)ExtentionID=null;else ExtentionID=Convert.ToInt32(value);break;
                case "ID_GROUPATS":if (value == null)ID_GroupATS=null;else ID_GroupATS=Convert.ToInt32(value);break;
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                case "ISONLINE":if (value == null)IsOnline=null;else IsOnline=Convert.ToInt32(value);break;
                case "ISRECHARGE":if (value == null)IsReCharge=null;else IsReCharge=Convert.ToInt32(value);break;
                case "LANG":lang=(string)value;break;
                case "MODE":if (value == null)Mode=null;else Mode=Convert.ToInt32(value);break;
                case "MODIFIEDBY":ModifiedBy=(string)value;break;
                case "MODIFIEDFROM":ModifiedFrom=(string)value;break;
                case "NUMBERATS":if (value == null)NumberATS=null;else NumberATS=Convert.ToInt32(value);break;
                case "PARENTID":if (value == null)ParentID=null;else ParentID=Convert.ToInt32(value);break;
                case "SERVICEID":if (value == null)ServiceID=null;else ServiceID=Convert.ToInt32(value);break;
                case "SRS_SESSIONID":Srs_SessionID=(string)value;break;
                case "WEV_CURRRENTSTATE":Wev_CurrrentState=(string)value;break;
                case "WORKEVENTID":if (value == null)WorkEventID=null;else WorkEventID=Convert.ToInt32(value);break;
                }
            }
		}
		#endregion
	}
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Subscribers_Recharge_Response_ACTION",Namespace = "")]
	public class Subscribers_Recharge_Response_ACTION: BaseEntity, IModifiedTag
	{
         #region [Properties]
			/// <summary>
			/// No description
			/// <para/>
			/// Amount
			/// </summary>
			///<remarks>
			///No description
			///</remarks>
			[JsonProperty("Amount")]
			[DataMember(Name="Amount", EmitDefaultValue = false)]
			/*norestr*/

            public global::System.Decimal? Amount  { get; set; } = 0;
//Base Attrribute '' skipped
			/// <summary>
			/// Идентификатор события
			/// <para/>
			/// Wev_ID
			/// </summary>
			///<remarks>
			///Идентификатор события
			///</remarks>
			[JsonProperty("WorkEventID")]
			[DataMember(Name="WorkEventID", EmitDefaultValue = false)]
			/*norestr*/

            public global::System.Int32? WorkEventID  { get; set; }
         #endregion
        [JsonIgnore]
	    public DateTime? If_Modified_Since { get {return null;}}
        #region [IDateModified]
        [JsonIgnore]
	    public DateTime? LastModified { get { return If_Modified_Since;}}
        #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                }
            }
		}
		#endregion
    }
#endregion
#region [Subscribers/SetLabels]

	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Subscribers_SetLabels_Request_ACTION",Namespace = "")]
	public class Subscribers_SetLabels_Request_ACTION : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// Дата изменений
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("EffectiveDate")]
        [DataMember(Name="EffectiveDate",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? EffectiveDate  { get; set; }
              /// <summary>
        /// Название сущности для которой выполняется операция
	    ///<list type='bullet'>
///<item>
///	<description>Допустимые значения Associations</description>
///</item>
///<item>
///	<description>Customers</description>
///</item>
///<item>
///	<description>Subscribers</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("EntityName")]
        [DataMember(Name="EntityName",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String EntityName { get; set; } = "<empty>";
              /// <summary>
        /// Формат вывода ошибки
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 'json'</para>
///<para>Max length : 25</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ErrFormat")]
        [DataMember(Name="ErrFormat",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ErrFormat     {
		get { return Format ?? "json"; }
		set { this.Format = value; }
	}
              /// <summary>
        /// Признак передачи внешнего значения ID
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("IDType")]
        [DataMember(Name="IDType",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? IDType  { get; set; }
              /// <summary>
        /// Код метки
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("LabelCode")]
        [DataMember(Name="LabelCode",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String LabelCode  { get; set; }
              /// <summary>
        /// Указание языка для набора multi-language данных 
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 'uk'</para>
///<para>Max length : 3</para>
///<para>Mandatory : Yes</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("lang")]
        [DataMember(Name="lang",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
			[JsonIgnore]
	public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
              /// <summary>
        /// Зарезервировано
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("LinkedServer")]
        [DataMember(Name="LinkedServer",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String LinkedServer  { get; set; }
              /// <summary>
        /// Пользователь данного изменения
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedBy")]
        [DataMember(Name="ModifiedBy",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedBy  { get; set; }
              /// <summary>
        /// Источник данного изменения
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedFrom")]
        [DataMember(Name="ModifiedFrom",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedFrom  { get; set; }
              /// <summary>
        /// Комментарий изменения
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Remark")]
        [DataMember(Name="Remark",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Remark  { get; set; }
              /// <summary>
        /// SELECT запрос на отбор идентификаторов узлов дерева - должен учитыавать значение IDType
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("SourceQuery")]
        [DataMember(Name="SourceQuery",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String SourceQuery  { get; set; }
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "EFFECTIVEDATE": return EffectiveDate;
				    case "ENTITYNAME": return EntityName;
				    case "ERRFORMAT": return ErrFormat;
				    case "IDTYPE": return IDType;
				    case "LABELCODE": return LabelCode;
				    case "LANG": return lang;
				    case "LINKEDSERVER": return LinkedServer;
				    case "MODIFIEDBY": return ModifiedBy;
				    case "MODIFIEDFROM": return ModifiedFrom;
				    case "REMARK": return Remark;
				    case "SOURCEQUERY": return SourceQuery;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "EFFECTIVEDATE":if (value == null)EffectiveDate=null;else EffectiveDate=Convert.ToDateTime(value);break;
                case "ENTITYNAME":EntityName=(string)value;break;
                case "ERRFORMAT":ErrFormat=(string)value;break;
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                case "LABELCODE":LabelCode=(string)value;break;
                case "LANG":lang=(string)value;break;
                case "LINKEDSERVER":LinkedServer=(string)value;break;
                case "MODIFIEDBY":ModifiedBy=(string)value;break;
                case "MODIFIEDFROM":ModifiedFrom=(string)value;break;
                case "REMARK":Remark=(string)value;break;
                case "SOURCEQUERY":SourceQuery=(string)value;break;
                }
            }
		}
		#endregion
	}
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Subscribers_SetLabels_Response_ACTION",Namespace = "")]
	public class Subscribers_SetLabels_Response_ACTION: BaseEntity, IModifiedTag
	{
         #region [Properties]
			/// <summary>
			/// Признак передачи внешнего значения ID
			/// <para/>
			/// IsExternalID
			/// </summary>
			///<remarks>
			///Признак передачи внешнего значения ID
			///</remarks>
			[JsonProperty("IDType")]
			[DataMember(Name="IDType", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
            public global::System.Int32? IDType  { get; set; }
			/// <summary>
			/// Указание языка для набора multi-language данных 
			/// <para/>
			/// Lang
			/// </summary>
			///<remarks>
			///Указание языка для набора multi-language данных 
			///</remarks>
			[JsonProperty("lang")]
			[DataMember(Name="lang", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
			[JsonIgnore]
            public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
         #endregion
        [JsonIgnore]
	    public DateTime? If_Modified_Since { get {return null;}}
        #region [IDateModified]
        [JsonIgnore]
	    public DateTime? LastModified { get { return If_Modified_Since;}}
        #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                }
            }
		}
		#endregion
    }
#endregion
#region [Tasks]
  
    
    ///<remarks>PUT &lt;host&gt;[:&lt;port&gt;]/api/v1/bss/tasks/[id]
///</remarks>
    ///---

	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Tasks_Request_SET",Namespace = "")]
	public class Tasks_Request_SET : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// Дата и время выполнения задачи
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("DateStart")]
        [DataMember(Name="DateStart",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? DateStart  { get; set; }
              /// <summary>
        /// Начало периода, для отбора данных для задачи
	    ///<list type='bullet'>
///<item>
///	<description>зарезервировано</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("PeriodBegin")]
        [DataMember(Name="PeriodBegin",EmitDefaultValue = false)]
		/*norestr*/
[DocIgnore]

	public global::System.DateTime? PeriodBegin  { get; set; }
              /// <summary>
        /// Окончание периода, для отбора данных для задачи
	    ///<list type='bullet'>
///<item>
///	<description>зарезервировано</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("PeriodEnd")]
        [DataMember(Name="PeriodEnd",EmitDefaultValue = false)]
		/*norestr*/
[DocIgnore]

	public global::System.DateTime? PeriodEnd  { get; set; }
              /// <summary>
        /// Идентификатор группы устройств (однородных услуг)
	    ///<list type='bullet'>
///<item>
///	<description>зарезервировано</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("DeviceGroupID")]
        [DataMember(Name="DeviceGroupID",EmitDefaultValue = false)]
		/*norestr*/
[DocIgnore]

	public global::System.Int32? DeviceGroupID  { get; set; }
              /// <summary>
        /// ID группы подзадач (для выполнения пакета действий)
	    ///<list type='bullet'>
///<item>
///	<description>зарезервировано</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ListGroupID")]
        [DataMember(Name="ListGroupID",EmitDefaultValue = false)]
		/*norestr*/
[DocIgnore]

	public global::System.Int32? ListGroupID  { get; set; }
              /// <summary>
        /// Дополнительные аттрибуты для задачи - используется для передачи значений параметров в провижининг
	    ///<list type='bullet'>
///<item>
///	<term>JSON </term>
///	<description> -структура (теги и значения долждны быть согласованы provisioning)</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("JsonData")]
        [DataMember(Name="JsonData",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String JsonData  { get; set; }
              /// <summary>
        /// Формат данных аттрибутов задачи
	    ///<list type='bullet'>
///<item>
///	<description>'json'</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 'json'</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("DataFormat")]
        [DataMember(Name="DataFormat",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String DataFormat  { get; set; } = "json";
              /// <summary>
        /// Идентификатор статуса задачи
	    ///<list type='bullet'>
///<item>
///	<term>4 </term>
///	<description> - Повторить заявку</description>
///</item>
///<item>
///	<term>3 </term>
///	<description> - Прекратить выполнение</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("StatusID")]
        [DataMember(Name="StatusID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? StatusID  { get; set; }
              /// <summary>
        /// Комментарий изменения к задаче
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Message")]
        [DataMember(Name="Message",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String Message  { get; set; }
              /// <summary>
        /// Пользователь данного изменения
	    ///<list type='bullet'>
///<item>
///	<term>Username </term>
///	<description> - пользователь из контекста</description>
///</item>
///<item>
///	<term>NULL </term>
///	<description> -если неизвестен</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedBy")]
        [DataMember(Name="ModifiedBy",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedBy  { get; set; }
              /// <summary>
        /// Источник данного изменения
	    ///<list type='bullet'>
///<item>
///	<term>IP </term>
///	<description> -адрес/имя компьютера</description>
///</item>
///<item>
///	<term>NULL </term>
///	<description> - если неизвестен</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedFrom")]
        [DataMember(Name="ModifiedFrom",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedFrom  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Header
        /// </remarks>
        [JsonProperty("cacheStatus")]
        [DataMember(Name="cacheStatus",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String cacheStatus  { get; set; }
              /// <summary>
        /// Идентификатор задачи
	    ///<list type='bullet'>
///<item>
///	<description>Необходим только для правки задачи</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("ID")]
        [DataMember(Name="ID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? ID 	{
		get 
		{ 
			if(emptyId.Equals(this.Id))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.Id, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.Id = value.ToString(); }
	}
              /// <summary>
        /// Формат вывода ошибки
	    ///<list type='bullet'>
///<item>
///	<description>'json'</description>
///</item>
///<item>
///	<description>'xml'</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 'json'</para>
///<para>Max length : 25</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ErrFormat")]
        [DataMember(Name="ErrFormat",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ErrFormat     {
		get { return Format ?? "json"; }
		set { this.Format = value; }
	}
    //Base Attrribute '' skipped
          /// <summary>
        /// Имя хоста, с которого запущена сессия активного процесса (sysprocesses)
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("HostName")]
        [DataMember(Name="HostName",EmitDefaultValue = false)]
		/*norestr*/
[DocIgnore]

	public global::System.String HostName  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Tsk_IsReady")]
        [DataMember(Name="Tsk_IsReady",EmitDefaultValue = false)]
		/*norestr*/
[DocIgnore]

	public global::System.Int32? Tsk_IsReady  { get; set; }
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "DATESTART": return DateStart;
				    case "PERIODBEGIN": return PeriodBegin;
				    case "PERIODEND": return PeriodEnd;
				    case "DEVICEGROUPID": return DeviceGroupID;
				    case "LISTGROUPID": return ListGroupID;
				    case "JSONDATA": return JsonData;
				    case "DATAFORMAT": return DataFormat;
				    case "STATUSID": return StatusID;
				    case "MESSAGE": return Message;
				    case "MODIFIEDBY": return ModifiedBy;
				    case "MODIFIEDFROM": return ModifiedFrom;
				    case "CACHESTATUS": return cacheStatus;
				    case "ID": return ID;
				    case "ERRFORMAT": return ErrFormat;
				    case "LANG": return Lang;
				    case "HOSTNAME": return HostName;
				    case "TSK_ISREADY": return Tsk_IsReady;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "DATESTART":if (value == null)DateStart=null;else DateStart=Convert.ToDateTime(value);break;
                case "PERIODBEGIN":if (value == null)PeriodBegin=null;else PeriodBegin=Convert.ToDateTime(value);break;
                case "PERIODEND":if (value == null)PeriodEnd=null;else PeriodEnd=Convert.ToDateTime(value);break;
                case "DEVICEGROUPID":if (value == null)DeviceGroupID=null;else DeviceGroupID=Convert.ToInt32(value);break;
                case "LISTGROUPID":if (value == null)ListGroupID=null;else ListGroupID=Convert.ToInt32(value);break;
                case "JSONDATA":JsonData=(string)value;break;
                case "DATAFORMAT":DataFormat=(string)value;break;
                case "STATUSID":if (value == null)StatusID=null;else StatusID=Convert.ToInt32(value);break;
                case "MESSAGE":Message=(string)value;break;
                case "MODIFIEDBY":ModifiedBy=(string)value;break;
                case "MODIFIEDFROM":ModifiedFrom=(string)value;break;
                case "CACHESTATUS":cacheStatus=(string)value;break;
                case "ID":if (value == null)ID=null;else ID=Convert.ToInt32(value);break;
                case "ERRFORMAT":ErrFormat=(string)value;break;
                case "LANG":Lang=(string)value;break;
                case "HOSTNAME":HostName=(string)value;break;
                case "TSK_ISREADY":if (value == null)Tsk_IsReady=null;else Tsk_IsReady=Convert.ToInt32(value);break;
                }
            }
		}
		#endregion
	}
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="Tasks_Response_SET",Namespace = "")]
	public class Tasks_Response_SET: BaseEntity, IModifiedTag
	{
         #region [Properties]
			/// <summary>
			/// Начало периода
			/// <para/>
			/// Tsk_PeriodBegin
			/// </summary>
			///<remarks>
			///Начало периода
			///</remarks>
			[JsonProperty("PeriodBegin")]
			[DataMember(Name="PeriodBegin", EmitDefaultValue = false)]
			/*norestr*/
[DocIgnore]

            public global::System.DateTime? PeriodBegin  { get; set; }
			/// <summary>
			/// Окончание периода
			/// <para/>
			/// Tsk_PeriodEnd
			/// </summary>
			///<remarks>
			///Окончание периода
			///</remarks>
			[JsonProperty("PeriodEnd")]
			[DataMember(Name="PeriodEnd", EmitDefaultValue = false)]
			/*norestr*/
[DocIgnore]

            public global::System.DateTime? PeriodEnd  { get; set; }
			/// <summary>
			/// Идентификатор задачи
			/// <para/>
			/// Tsk_ID
			/// </summary>
			///<remarks>
			///Идентификатор задачи
			///</remarks>
			[JsonProperty("ID")]
			[DataMember(Name="ID", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
            public global::System.Int32? ID 	{
		get 
		{ 
			if(emptyId.Equals(this.Id))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.Id, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.Id = value.ToString(); }
	}
//Base Attrribute '' skipped
         #endregion
        [JsonIgnore]
	    public DateTime? If_Modified_Since { get {return null;}}
        #region [IDateModified]
        [JsonIgnore]
	    public DateTime? LastModified { get { return If_Modified_Since;}}
        #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "PERIODBEGIN": return PeriodBegin;
				    case "PERIODEND": return PeriodEnd;
				    case "ID": return ID;
				    case "LANG": return Lang;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "PERIODBEGIN":if (value == null)PeriodBegin=null;else PeriodBegin=Convert.ToDateTime(value);break;
                case "PERIODEND":if (value == null)PeriodEnd=null;else PeriodEnd=Convert.ToDateTime(value);break;
                case "ID":if (value == null)ID=null;else ID=Convert.ToInt32(value);break;
                case "LANG":Lang=(string)value;break;
                }
            }
		}
		#endregion
    }
#endregion
#region [TemplateSubscriptions]
  
    
    ///<remarks>GET &lt;host&gt;[:&lt;port&gt;]/api/v1/bss/TemplateSubscriptions
///</remarks>
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="TemplateSubscriptions_Request_GET",Namespace = "")]
	public class TemplateSubscriptions_Request_GET : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("TreeNodeID")]
        [DataMember(Name="TreeNodeID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? TreeNodeID  { get; set; }
              /// <summary>
        /// Идентификатор Agreements
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ParentID")]
        [DataMember(Name="ParentID",EmitDefaultValue = false)]
		[JsonRestrictedByValue("<empty>")]

	public global::System.Int32? ParentID 	{
		get 
		{ 
			if(emptyId.Equals(this.ParentId))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.ParentId, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.ParentId = value.ToString(); }
	}
              /// <summary>
        /// дата активации
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("EffectiveDate")]
        [DataMember(Name="EffectiveDate",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? EffectiveDate  { get; set; }
              /// <summary>
        /// Формат вывода ошибки
	    ///<list type='bullet'>
///<item>
///	<description>'json'</description>
///</item>
///<item>
///	<description>'xml'</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : xml</para>
///<para>Max length : 25</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ErrFormat")]
        [DataMember(Name="ErrFormat",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ErrFormat     {
		get { return Format ?? "xml"; }
		set { this.Format = value; }
	}
              /// <summary>
        /// Идентификатор Extentions (Номера MSISDN)
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ExtentionID")]
        [DataMember(Name="ExtentionID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? ExtentionID  { get; set; }
              /// <summary>
        /// Признак передачи внешнего значения ID
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - внешний ID (для BIS всегда устанавливаем в 1)</description>
///</item>
///<item>
///	<term>0 </term>
///	<description> - внутренний ID</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 1</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("IDType")]
        [DataMember(Name="IDType",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? IDType  { get; set; } = 1;
              /// <summary>
        /// Указание языка для набора multi-language данных 
	    ///<list type='bullet'>
///<item>
///	<term>'uk' </term>
///	<description> -украинский</description>
///</item>
///<item>
///	<term>'ru' </term>
///	<description> -руский </description>
///</item>
///<item>
///	<term>'en' </term>
///	<description> -английский</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("lang")]
        [DataMember(Name="lang",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
			[JsonIgnore]
	public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 1</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("PageNumber")]
        [DataMember(Name="PageNumber",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? PageNumber  { get; set; } = 1;
              /// <summary>
        /// Кол-во записей на странице (server paging)
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 100</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("PageSize")]
        [DataMember(Name="PageSize",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? PageSize  { get; set; } = 100;
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ShowBasicTP")]
        [DataMember(Name="ShowBasicTP",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? ShowBasicTP  { get; set; } = 0;
              /// <summary>
        /// Наименование тарифного плана
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("TariffName")]
        [DataMember(Name="TariffName",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String TariffName  { get; set; }
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "TREENODEID": return TreeNodeID;
				    case "PARENTID": return ParentID;
				    case "EFFECTIVEDATE": return EffectiveDate;
				    case "ERRFORMAT": return ErrFormat;
				    case "EXTENTIONID": return ExtentionID;
				    case "IDTYPE": return IDType;
				    case "LANG": return lang;
				    case "PAGENUMBER": return PageNumber;
				    case "PAGESIZE": return PageSize;
				    case "SHOWBASICTP": return ShowBasicTP;
				    case "TARIFFNAME": return TariffName;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "TREENODEID":if (value == null)TreeNodeID=null;else TreeNodeID=Convert.ToInt32(value);break;
                case "PARENTID":if (value == null)ParentID=null;else ParentID=Convert.ToInt32(value);break;
                case "EFFECTIVEDATE":if (value == null)EffectiveDate=null;else EffectiveDate=Convert.ToDateTime(value);break;
                case "ERRFORMAT":ErrFormat=(string)value;break;
                case "EXTENTIONID":if (value == null)ExtentionID=null;else ExtentionID=Convert.ToInt32(value);break;
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                case "LANG":lang=(string)value;break;
                case "PAGENUMBER":if (value == null)PageNumber=null;else PageNumber=Convert.ToInt32(value);break;
                case "PAGESIZE":if (value == null)PageSize=null;else PageSize=Convert.ToInt32(value);break;
                case "SHOWBASICTP":if (value == null)ShowBasicTP=null;else ShowBasicTP=Convert.ToInt32(value);break;
                case "TARIFFNAME":TariffName=(string)value;break;
                }
            }
		}
		#endregion
	}
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="TemplateSubscriptions_Response_GET",Namespace = "")]
	public class TemplateSubscriptions_Response_GET: BaseEntity, IModifiedTag
	{
         #region [Properties]
         #endregion
        [JsonIgnore]
	    public DateTime? If_Modified_Since { get {return null;}}
        #region [IDateModified]
        [JsonIgnore]
	    public DateTime? LastModified { get { return If_Modified_Since;}}
        #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                }
            }
		}
		#endregion
    }
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="TemplateSubscriptions_Response_GET_OUTPUT",Namespace = "")]
	public class TemplateSubscriptions_Response_GET_OUTPUT : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("SubscriberID")]
        [DataMember(Name="SubscriberID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? SubscriberID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("AgreementID")]
        [DataMember(Name="AgreementID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int64? AgreementID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ExtentionID")]
        [DataMember(Name="ExtentionID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? ExtentionID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("TarifPlanName")]
        [DataMember(Name="TarifPlanName",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String TarifPlanName  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("PolicyID")]
        [DataMember(Name="PolicyID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? PolicyID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("PolicyName")]
        [DataMember(Name="PolicyName",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String PolicyName  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("RepresentationID")]
        [DataMember(Name="RepresentationID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? RepresentationID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("DateEnd")]
        [DataMember(Name="DateEnd",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.DateTime? DateEnd  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("DateStart")]
        [DataMember(Name="DateStart",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.DateTime? DateStart  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ID")]
        [DataMember(Name="ID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? ID 	{
		get 
		{ 
			if(emptyId.Equals(this.Id))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.Id, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.Id = value.ToString(); }
	}
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("TariffDescription")]
        [DataMember(Name="TariffDescription",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String TariffDescription  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("TariffName")]
        [DataMember(Name="TariffName",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String TariffName  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("PriceRatio")]
        [DataMember(Name="PriceRatio",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Decimal? PriceRatio  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Total")]
        [DataMember(Name="Total",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? Total  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("PacketExternalID")]
        [DataMember(Name="PacketExternalID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? PacketExternalID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("PacketParentID")]
        [DataMember(Name="PacketParentID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? PacketParentID  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("grt_ExternalId")]
        [DataMember(Name="grt_ExternalId",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? grt_ExternalId  { get; set; }
              /// <summary>
        /// Идентификатор группы тарифных планов
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("grt_ID")]
        [DataMember(Name="grt_ID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? grt_ID  { get; set; }
              /// <summary>
        /// Идентификатор тарифного плана/template. Связь с TariffPlan
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("IdTariffPlan")]
        [DataMember(Name="IdTariffPlan",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? IdTariffPlan  { get; set; }
              /// <summary>
        /// Наименование группы тарифных планов (локальное)
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("tpgnd_Name")]
        [DataMember(Name="tpgnd_Name",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String tpgnd_Name  { get; set; }
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "SUBSCRIBERID": return SubscriberID;
				    case "AGREEMENTID": return AgreementID;
				    case "EXTENTIONID": return ExtentionID;
				    case "TARIFPLANNAME": return TarifPlanName;
				    case "POLICYID": return PolicyID;
				    case "POLICYNAME": return PolicyName;
				    case "REPRESENTATIONID": return RepresentationID;
				    case "DATEEND": return DateEnd;
				    case "DATESTART": return DateStart;
				    case "ID": return ID;
				    case "TARIFFDESCRIPTION": return TariffDescription;
				    case "TARIFFNAME": return TariffName;
				    case "PRICERATIO": return PriceRatio;
				    case "TOTAL": return Total;
				    case "PACKETEXTERNALID": return PacketExternalID;
				    case "PACKETPARENTID": return PacketParentID;
				    case "GRT_EXTERNALID": return grt_ExternalId;
				    case "GRT_ID": return grt_ID;
				    case "IDTARIFFPLAN": return IdTariffPlan;
				    case "TPGND_NAME": return tpgnd_Name;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "SUBSCRIBERID":if (value == null)SubscriberID=null;else SubscriberID=Convert.ToInt32(value);break;
                case "AGREEMENTID":if (value == null)AgreementID=null;else AgreementID=Convert.ToInt64(value);break;
                case "EXTENTIONID":if (value == null)ExtentionID=null;else ExtentionID=Convert.ToInt32(value);break;
                case "TARIFPLANNAME":TarifPlanName=(string)value;break;
                case "POLICYID":if (value == null)PolicyID=null;else PolicyID=Convert.ToInt32(value);break;
                case "POLICYNAME":PolicyName=(string)value;break;
                case "REPRESENTATIONID":if (value == null)RepresentationID=null;else RepresentationID=Convert.ToInt32(value);break;
                case "DATEEND":if (value == null)DateEnd=null;else DateEnd=Convert.ToDateTime(value);break;
                case "DATESTART":if (value == null)DateStart=null;else DateStart=Convert.ToDateTime(value);break;
                case "ID":if (value == null)ID=null;else ID=Convert.ToInt32(value);break;
                case "TARIFFDESCRIPTION":TariffDescription=(string)value;break;
                case "TARIFFNAME":TariffName=(string)value;break;
                case "PRICERATIO":if (value == null)PriceRatio=null;else PriceRatio=Convert.ToDecimal(value);break;
                case "TOTAL":if (value == null)Total=null;else Total=Convert.ToInt32(value);break;
                case "PACKETEXTERNALID":if (value == null)PacketExternalID=null;else PacketExternalID=Convert.ToInt32(value);break;
                case "PACKETPARENTID":if (value == null)PacketParentID=null;else PacketParentID=Convert.ToInt32(value);break;
                case "GRT_EXTERNALID":if (value == null)grt_ExternalId=null;else grt_ExternalId=Convert.ToInt32(value);break;
                case "GRT_ID":if (value == null)grt_ID=null;else grt_ID=Convert.ToInt32(value);break;
                case "IDTARIFFPLAN":if (value == null)IdTariffPlan=null;else IdTariffPlan=Convert.ToInt32(value);break;
                case "TPGND_NAME":tpgnd_Name=(string)value;break;
                }
            }
		}
		#endregion
	}
  
    
    ///<remarks>POST &lt;host&gt;[:&lt;port&gt;]/api/v1/bss/agreements/[parentid]/templatesubscriptions
///</remarks>
    ///Agreements
    [EntitySubentity("Agreements")]

	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="TemplateSubscriptions_Request_SET",Namespace = "")]
	public class TemplateSubscriptions_Request_SET : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// дата активации
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("EffectiveDate")]
        [DataMember(Name="EffectiveDate",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? EffectiveDate  { get; set; }
              /// <summary>
        /// Дополнительные параметры для provisioning (для каждой услуги отдельно)
	    ///<list type='bullet'>
///<item>
///	<description>json</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("TasksJsonData")]
        [DataMember(Name="TasksJsonData",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String TasksJsonData  { get; set; }
              /// <summary>
        /// Пользователь данного изменения
	    ///<list type='bullet'>
///<item>
///	<term>Username </term>
///	<description> - пользователь из контекста</description>
///</item>
///<item>
///	<term>NULL </term>
///	<description> -если неизвестен</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedBy")]
        [DataMember(Name="ModifiedBy",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedBy  { get; set; }
              /// <summary>
        /// Источник данного изменения
	    ///<list type='bullet'>
///<item>
///	<term>IP </term>
///	<description> -адрес/имя компьютера</description>
///</item>
///<item>
///	<term>NULL </term>
///	<description> - если неизвестен</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedFrom")]
        [DataMember(Name="ModifiedFrom",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedFrom  { get; set; }
              /// <summary>
        /// Идентификатор Тарифного Пакета
	    ///<list type='bullet'>
///<item>
///	<description>значения PACK ID</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("TemplateID")]
        [DataMember(Name="TemplateID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? TemplateID  { get; set; }
              /// <summary>
        /// Признак передачи внешнего значения ID
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - внешний ID (для BIS всегда устанавливаем в 1)</description>
///</item>
///<item>
///	<term>0 </term>
///	<description> - внутренний ID</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 1</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("IDType")]
        [DataMember(Name="IDType",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? IDType  { get; set; } = 1;
              /// <summary>
        /// Дата окончания действия Тарифного Пакета
	    ///<list type='bullet'>
///<item>
///	<term>бессрочно </term>
///	<description> - 31.12.2999 23:59:59</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("DateEnd")]
        [DataMember(Name="DateEnd",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? DateEnd  { get; set; }
              /// <summary>
        /// Дата начала действия Тарифного Пакета
	    ///<list type='bullet'>
///<item>
///	<description>после даты казываем время в формате 0:00:00</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("DateStart")]
        [DataMember(Name="DateStart",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? DateStart  { get; set; }
              /// <summary>
        /// Признак проверить наличие полной суммы АП для списания при подключении пакета
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - да</description>
///</item>
///<item>
///	<term>0 </term>
///	<description> - нет</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("CheckBallance")]
        [DataMember(Name="CheckBallance",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? CheckBallance  { get; set; } = 0;
              /// <summary>
        /// Комментарий изменения
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Remark")]
        [DataMember(Name="Remark",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Remark  { get; set; }
              /// <summary>
        /// Зарезервировано для Response
	    ///<list type='bullet'>
///<item>
///	<description>зарезервировано</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Entities")]
        [DataMember(Name="Entities",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Entities  { get; set; }
              /// <summary>
        /// Признак первичной активации или изменения существующей подписки
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - первая активация</description>
///</item>
///<item>
///	<term>0 </term>
///	<description> - изменение подписки</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("TariffBegin")]
        [DataMember(Name="TariffBegin",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? TariffBegin  { get; set; }
              /// <summary>
        /// Идентификатор Agreements
	    ///<list type='bullet'>
///<item>
///	<description>Значения AgreementID (нет аналога в БИС)</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("ParentID")]
        [DataMember(Name="ParentID",EmitDefaultValue = false)]
		[JsonRestrictedByValue("<empty>")]

[SecondaryKey("Agreements_Request_SET","ID")]/*SET*/
	public global::System.Int32? ParentID 	{
		get 
		{ 
			if(emptyId.Equals(this.ParentId))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.ParentId, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.ParentId = value.ToString(); }
	}
              /// <summary>
        /// Уникальный Идентификатор подписки на Тарифный Пакет
	    ///<list type='bullet'>
///<item>
///	<description>Используется только для редактирования конкретной записи</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("ID")]
        [DataMember(Name="ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? ID 	{
		get 
		{ 
			if(emptyId.Equals(this.Id))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.Id, out result))
				return result; 
			else
            {
return 0;
            }
		}
		set { this.Id = value.ToString(); }
	}
    //Base Attrribute '' skipped
          /// <summary>
        /// Формат вывода ошибки
	    ///<list type='bullet'>
///<item>
///	<description>'json'</description>
///</item>
///<item>
///	<description>'xml'</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : xml</para>
///<para>Max length : 25</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ErrFormat")]
        [DataMember(Name="ErrFormat",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ErrFormat     {
		get { return Format ?? "xml"; }
		set { this.Format = value; }
	}
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ActivateServices")]
        [DataMember(Name="ActivateServices",EmitDefaultValue = false)]
		/*norestr*/
[DocIgnore]

	public global::System.String ActivateServices  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Agr_ID_Old")]
        [DataMember(Name="Agr_ID_Old",EmitDefaultValue = false)]
		/*norestr*/
[DocIgnore]

	public global::System.Int32? Agr_ID_Old  { get; set; }
              /// <summary>
        /// Зарезервировано
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ConfirmationMessage")]
        [DataMember(Name="ConfirmationMessage",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ConfirmationMessage  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Rtb_ID_Old")]
        [DataMember(Name="Rtb_ID_Old",EmitDefaultValue = false)]
		/*norestr*/
[DocIgnore]

	public global::System.Int32? Rtb_ID_Old  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ServiceMode")]
        [DataMember(Name="ServiceMode",EmitDefaultValue = false)]
		/*norestr*/
[DocIgnore]

	public global::System.String ServiceMode  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Services")]
        [DataMember(Name="Services",EmitDefaultValue = false)]
		/*norestr*/
[DocIgnore]

	public global::System.String Services  { get; set; }
              /// <summary>
        /// No description
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Tp_ID_New")]
        [DataMember(Name="Tp_ID_New",EmitDefaultValue = false)]
		/*norestr*/
[DocIgnore]

	public global::System.Int32? Tp_ID_New  { get; set; }
              /// <summary>
        /// Признак подтверждения операции со стороны пользователя
	    ///<list type='bullet'>
///<item>
///	<description></description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 1</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("UserAcceptance")]
        [DataMember(Name="UserAcceptance",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? UserAcceptance  { get; set; } = 1;
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "EFFECTIVEDATE": return EffectiveDate;
				    case "TASKSJSONDATA": return TasksJsonData;
				    case "MODIFIEDBY": return ModifiedBy;
				    case "MODIFIEDFROM": return ModifiedFrom;
				    case "TEMPLATEID": return TemplateID;
				    case "IDTYPE": return IDType;
				    case "DATEEND": return DateEnd;
				    case "DATESTART": return DateStart;
				    case "CHECKBALLANCE": return CheckBallance;
				    case "REMARK": return Remark;
				    case "ENTITIES": return Entities;
				    case "TARIFFBEGIN": return TariffBegin;
				    case "PARENTID": return ParentID;
				    case "ID": return ID;
				    case "LANG": return Lang;
				    case "ERRFORMAT": return ErrFormat;
				    case "ACTIVATESERVICES": return ActivateServices;
				    case "AGR_ID_OLD": return Agr_ID_Old;
				    case "CONFIRMATIONMESSAGE": return ConfirmationMessage;
				    case "RTB_ID_OLD": return Rtb_ID_Old;
				    case "SERVICEMODE": return ServiceMode;
				    case "SERVICES": return Services;
				    case "TP_ID_NEW": return Tp_ID_New;
				    case "USERACCEPTANCE": return UserAcceptance;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "EFFECTIVEDATE":if (value == null)EffectiveDate=null;else EffectiveDate=Convert.ToDateTime(value);break;
                case "TASKSJSONDATA":TasksJsonData=(string)value;break;
                case "MODIFIEDBY":ModifiedBy=(string)value;break;
                case "MODIFIEDFROM":ModifiedFrom=(string)value;break;
                case "TEMPLATEID":if (value == null)TemplateID=null;else TemplateID=Convert.ToInt32(value);break;
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                case "DATEEND":if (value == null)DateEnd=null;else DateEnd=Convert.ToDateTime(value);break;
                case "DATESTART":if (value == null)DateStart=null;else DateStart=Convert.ToDateTime(value);break;
                case "CHECKBALLANCE":if (value == null)CheckBallance=null;else CheckBallance=Convert.ToInt32(value);break;
                case "REMARK":Remark=(string)value;break;
                case "ENTITIES":Entities=(string)value;break;
                case "TARIFFBEGIN":if (value == null)TariffBegin=null;else TariffBegin=Convert.ToInt32(value);break;
                case "PARENTID":if (value == null)ParentID=null;else ParentID=Convert.ToInt32(value);break;
                case "ID":if (value == null)ID=null;else ID=Convert.ToInt32(value);break;
                case "LANG":Lang=(string)value;break;
                case "ERRFORMAT":ErrFormat=(string)value;break;
                case "ACTIVATESERVICES":ActivateServices=(string)value;break;
                case "AGR_ID_OLD":if (value == null)Agr_ID_Old=null;else Agr_ID_Old=Convert.ToInt32(value);break;
                case "CONFIRMATIONMESSAGE":ConfirmationMessage=(string)value;break;
                case "RTB_ID_OLD":if (value == null)Rtb_ID_Old=null;else Rtb_ID_Old=Convert.ToInt32(value);break;
                case "SERVICEMODE":ServiceMode=(string)value;break;
                case "SERVICES":Services=(string)value;break;
                case "TP_ID_NEW":if (value == null)Tp_ID_New=null;else Tp_ID_New=Convert.ToInt32(value);break;
                case "USERACCEPTANCE":if (value == null)UserAcceptance=null;else UserAcceptance=Convert.ToInt32(value);break;
                }
            }
		}
		#endregion
	}
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="TemplateSubscriptions_Response_SET",Namespace = "")]
	public class TemplateSubscriptions_Response_SET: BaseEntity, IModifiedTag
	{
         #region [Properties]
			/// <summary>
			/// Уникальный Идентификатор подписки на Тарифный Пакет
			/// <para/>
			/// Rtb_ID
			/// </summary>
			///<remarks>
			///Уникальный Идентификатор подписки на Тарифный Пакет
			///</remarks>
			[JsonProperty("ID")]
			[DataMember(Name="ID", EmitDefaultValue = false)]
			/*norestr*/

            public global::System.Int32? ID 	{
		get 
		{ 
			if(emptyId.Equals(this.Id))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.Id, out result))
				return result; 
			else
            {
return 0;
            }
		}
		set { this.Id = value.ToString(); }
	}
			/// <summary>
			/// Признак передачи внешнего значения ID
			/// <para/>
			/// IsExternalID
			/// </summary>
			///<remarks>
			///Признак передачи внешнего значения ID
			///</remarks>
			[JsonProperty("IDType")]
			[DataMember(Name="IDType", EmitDefaultValue = false)]
			/*norestr*/

            public global::System.Int32? IDType  { get; set; } = 1;
//Base Attrribute '' skipped
			/// <summary>
			/// Список сущностей, созданных в результате выполнения операции
			/// <para/>
			/// Entities
			/// </summary>
			///<remarks>
			///Список сущностей, созданных в результате выполнения операции
			///</remarks>
			[JsonProperty("Entities")]
			[DataMember(Name="Entities", EmitDefaultValue = false)]
			/*norestr*/

            public global::System.String Entities  { get; set; }
			/// <summary>
			/// No description
			/// <para/>
			/// ConfMessage
			/// </summary>
			///<remarks>
			///No description
			///</remarks>
			[JsonProperty("ConfirmationMessage")]
			[DataMember(Name="ConfirmationMessage", EmitDefaultValue = false)]
			/*norestr*/

            public global::System.String ConfirmationMessage  { get; set; }
         #endregion
        [JsonIgnore]
	    public DateTime? If_Modified_Since { get {return null;}}
        #region [IDateModified]
        [JsonIgnore]
	    public DateTime? LastModified { get { return If_Modified_Since;}}
        #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "ID": return ID;
				    case "IDTYPE": return IDType;
				    case "LANG": return Lang;
				    case "ENTITIES": return Entities;
				    case "CONFIRMATIONMESSAGE": return ConfirmationMessage;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "ID":if (value == null)ID=null;else ID=Convert.ToInt32(value);break;
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                case "LANG":Lang=(string)value;break;
                case "ENTITIES":Entities=(string)value;break;
                case "CONFIRMATIONMESSAGE":ConfirmationMessage=(string)value;break;
                }
            }
		}
		#endregion
    }
#endregion
#region [TreeNodeHistory]
  
    
    ///<remarks>GET &lt;host&gt;[:&lt;port&gt;]/api/v1/bss/TreeNodeHistory
///</remarks>
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="TreeNodeHistory_Request_GET",Namespace = "")]
	public class TreeNodeHistory_Request_GET : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// Идентификатор вышестоящего узла дерева
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("ParentID")]
        [DataMember(Name="ParentID",EmitDefaultValue = false)]
		[JsonRestrictedByValue("<empty>")]

			[Required]
	public global::System.Int32? ParentID 	{
		get 
		{ 
			if(emptyId.Equals(this.ParentId))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.ParentId, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.ParentId = value.ToString(); }
	}
              /// <summary>
        /// No description
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : Customers</para>
///<para>Max length : 50</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("EntityName")]
        [DataMember(Name="EntityName",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String EntityName { get; set; } = "<empty>";
              /// <summary>
        /// Дата применения изменений
	    ///<list type='bullet'>
///<item>
///	<description>Зарезервировано</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("EffectiveDate")]
        [DataMember(Name="EffectiveDate",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.DateTime? EffectiveDate  { get; set; }
              /// <summary>
        /// Формат вывода ошибки
	    ///<list type='bullet'>
///<item>
///	<description>'json'</description>
///</item>
///<item>
///	<description>'xml'</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : xml</para>
///<para>Max length : 25</para>
///<para>Mandatory : Yes</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ErrFormat")]
        [DataMember(Name="ErrFormat",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String ErrFormat     {
		get { return Format ?? "xml"; }
		set { this.Format = value; }
	}
              /// <summary>
        /// Признак передачи внешнего значения ID
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - внешний ID (для BIS всегда устанавливаем в 1)</description>
///</item>
///<item>
///	<term>0 </term>
///	<description> - внутренний ID</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 1</para>
///<para>Mandatory : Yes</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("IDType")]
        [DataMember(Name="IDType",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? IDType  { get; set; } = 1;
              /// <summary>
        /// Указание языка для набора multi-language данных 
	    ///<list type='bullet'>
///<item>
///	<term>'uk' </term>
///	<description> -украинский</description>
///</item>
///<item>
///	<term>'ru' </term>
///	<description> -руский </description>
///</item>
///<item>
///	<term>'en' </term>
///	<description> -английский</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 'uk'</para>
///<para>Max length : 3</para>
///<para>Mandatory : Yes</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("lang")]
        [DataMember(Name="lang",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
			[JsonIgnore]
	public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
              /// <summary>
        /// Номер страницы (server paging)
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 1</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("pageIndex")]
        [DataMember(Name="pageIndex",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? PageIndex  { get; set; } = 1;
              /// <summary>
        /// Кол-во записей на странице (server paging)
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 50</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("PageSize")]
        [DataMember(Name="PageSize",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? PageSize  { get; set; } = 50;
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "PARENTID": return ParentID;
				    case "ENTITYNAME": return EntityName;
				    case "EFFECTIVEDATE": return EffectiveDate;
				    case "ERRFORMAT": return ErrFormat;
				    case "IDTYPE": return IDType;
				    case "LANG": return lang;
				    case "PAGEINDEX": return PageIndex;
				    case "PAGESIZE": return PageSize;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "PARENTID":if (value == null)ParentID=null;else ParentID=Convert.ToInt32(value);break;
                case "ENTITYNAME":EntityName=(string)value;break;
                case "EFFECTIVEDATE":if (value == null)EffectiveDate=null;else EffectiveDate=Convert.ToDateTime(value);break;
                case "ERRFORMAT":ErrFormat=(string)value;break;
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                case "LANG":lang=(string)value;break;
                case "PAGEINDEX":if (value == null)PageIndex=null;else PageIndex=Convert.ToInt32(value);break;
                case "PAGESIZE":if (value == null)PageSize=null;else PageSize=Convert.ToInt32(value);break;
                }
            }
		}
		#endregion
	}
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="TreeNodeHistory_Response_GET",Namespace = "")]
	public class TreeNodeHistory_Response_GET: BaseEntity, IModifiedTag
	{
         #region [Properties]
			/// <summary>
			/// Признак передачи внешнего значения ID
			/// <para/>
			/// IsExternalID
			/// </summary>
			///<remarks>
			///Признак передачи внешнего значения ID
			///</remarks>
			[JsonProperty("IDType")]
			[DataMember(Name="IDType", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
            public global::System.Int32? IDType  { get; set; } = 1;
			/// <summary>
			/// Указание языка для набора multi-language данных 
			/// <para/>
			/// Lang
			/// </summary>
			///<remarks>
			///Указание языка для набора multi-language данных 
			///</remarks>
			[JsonProperty("lang")]
			[DataMember(Name="lang", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
			[JsonIgnore]
            public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
         #endregion
        [JsonIgnore]
	    public DateTime? If_Modified_Since { get {return null;}}
        #region [IDateModified]
        [JsonIgnore]
	    public DateTime? LastModified { get { return If_Modified_Since;}}
        #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "IDTYPE": return IDType;
				    case "LANG": return lang;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                case "LANG":lang=(string)value;break;
                }
            }
		}
		#endregion
    }
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="TreeNodeHistory_Response_GET_OUTPUT",Namespace = "")]
	public class TreeNodeHistory_Response_GET_OUTPUT : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// Внешний ID узла дерева
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("TreeNodeExternalID")]
        [DataMember(Name="TreeNodeExternalID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? TreeNodeExternalID  { get; set; }
              /// <summary>
        /// Внешний идентификатор вышестоящего узла дерева
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("TreeNodeParentExternalID")]
        [DataMember(Name="TreeNodeParentExternalID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? TreeNodeParentExternalID  { get; set; }
              /// <summary>
        /// Идентификатор лицевого счета (соответствует CustomerID)
	    ///<list type='bullet'>
///<item>
///	<description>CLNT_ID из справочника CLIENT_HISTORIES</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ID")]
        [DataMember(Name="ID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? ID 	{
		get 
		{ 
			if(emptyId.Equals(this.Id))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.Id, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.Id = value.ToString(); }
	}
              /// <summary>
        /// ID узла дерева
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("TreeNodeID")]
        [DataMember(Name="TreeNodeID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? TreeNodeID  { get; set; }
              /// <summary>
        /// Идентификатор вышестоящего узла дерева
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("TreeNodeParentID")]
        [DataMember(Name="TreeNodeParentID",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? TreeNodeParentID  { get; set; }
              /// <summary>
        /// Источник данного изменения
	    ///<list type='bullet'>
///<item>
///	<term>IP </term>
///	<description> -адрес/имя компьютера</description>
///</item>
///<item>
///	<term>NULL </term>
///	<description> - если неизвестен</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedFrom")]
        [DataMember(Name="ModifiedFrom",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String ModifiedFrom  { get; set; }
              /// <summary>
        /// Дата изменения записи
	    ///<list type='bullet'>
///<item>
///	<description>зарезервировано</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedDate")]
        [DataMember(Name="ModifiedDate",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.DateTime? ModifiedDate  { get; set; }
              /// <summary>
        /// Дата начала действия записи
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("DateStart")]
        [DataMember(Name="DateStart",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.DateTime? DateStart  { get; set; }
              /// <summary>
        /// Дата окончания действия записи
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("DateEnd")]
        [DataMember(Name="DateEnd",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.DateTime? DateEnd  { get; set; }
              /// <summary>
        /// Комментарий изменения
	    ///<list type='bullet'>
///<item>
///	<description>Заполняем причину изменений для истории</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Remark")]
        [DataMember(Name="Remark",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String Remark  { get; set; }
              /// <summary>
        /// Пользователь данного изменения
	    ///<list type='bullet'>
///<item>
///	<term>Username </term>
///	<description> - пользователь из контекста</description>
///</item>
///<item>
///	<term>NULL </term>
///	<description> -если неизвестен</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedBy")]
        [DataMember(Name="ModifiedBy",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.String ModifiedBy  { get; set; }
              /// <summary>
        /// Признак передачи внешнего значения ID
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - внешний ID (для BIS всегда устанавливаем в 1)</description>
///</item>
///<item>
///	<term>0 </term>
///	<description> - внутренний ID</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 1</para>
///<para>Mandatory : Yes</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("IDType")]
        [DataMember(Name="IDType",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
	public global::System.Int32? IDType  { get; set; } = 1;
              /// <summary>
        /// Указание языка для набора multi-language данных 
	    ///<list type='bullet'>
///<item>
///	<term>'uk' </term>
///	<description> -украинский</description>
///</item>
///<item>
///	<term>'ru' </term>
///	<description> -руский </description>
///</item>
///<item>
///	<term>'en' </term>
///	<description> -английский</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 'uk'</para>
///<para>Max length : 3</para>
///<para>Mandatory : Yes</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("lang")]
        [DataMember(Name="lang",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
			[JsonIgnore]
	public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "TREENODEEXTERNALID": return TreeNodeExternalID;
				    case "TREENODEPARENTEXTERNALID": return TreeNodeParentExternalID;
				    case "ID": return ID;
				    case "TREENODEID": return TreeNodeID;
				    case "TREENODEPARENTID": return TreeNodeParentID;
				    case "MODIFIEDFROM": return ModifiedFrom;
				    case "MODIFIEDDATE": return ModifiedDate;
				    case "DATESTART": return DateStart;
				    case "DATEEND": return DateEnd;
				    case "REMARK": return Remark;
				    case "MODIFIEDBY": return ModifiedBy;
				    case "IDTYPE": return IDType;
				    case "LANG": return lang;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "TREENODEEXTERNALID":if (value == null)TreeNodeExternalID=null;else TreeNodeExternalID=Convert.ToInt32(value);break;
                case "TREENODEPARENTEXTERNALID":if (value == null)TreeNodeParentExternalID=null;else TreeNodeParentExternalID=Convert.ToInt32(value);break;
                case "ID":if (value == null)ID=null;else ID=Convert.ToInt32(value);break;
                case "TREENODEID":if (value == null)TreeNodeID=null;else TreeNodeID=Convert.ToInt32(value);break;
                case "TREENODEPARENTID":if (value == null)TreeNodeParentID=null;else TreeNodeParentID=Convert.ToInt32(value);break;
                case "MODIFIEDFROM":ModifiedFrom=(string)value;break;
                case "MODIFIEDDATE":if (value == null)ModifiedDate=null;else ModifiedDate=Convert.ToDateTime(value);break;
                case "DATESTART":if (value == null)DateStart=null;else DateStart=Convert.ToDateTime(value);break;
                case "DATEEND":if (value == null)DateEnd=null;else DateEnd=Convert.ToDateTime(value);break;
                case "REMARK":Remark=(string)value;break;
                case "MODIFIEDBY":ModifiedBy=(string)value;break;
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                case "LANG":lang=(string)value;break;
                }
            }
		}
		#endregion
	}
#endregion
#region [TreeNodeProperties]
  
    
    ///<remarks>POST &lt;host&gt;[:&lt;port&gt;]/api/v1/bss/customers/[parentid]/treenodeproperties
///POST &lt;host&gt;[:&lt;port&gt;]/api/v1/bss/associations/[parentid]/treenodeproperties
///POST &lt;host&gt;[:&lt;port&gt;]/api/v1/bss/subscribers/[parentid]/treenodeproperties
///</remarks>
    ///Associations,Customers,Subscribers
    [EntitySubentity("Associations")]
    [EntitySubentity("Customers")]
    [EntitySubentity("Subscribers")]

	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="TreeNodeProperties_Request_SET",Namespace = "")]
	public class TreeNodeProperties_Request_SET : BaseEntity, IPropertyIndexer
	{
         #region [Properties]
          /// <summary>
        /// Признак удаления дополнительного атрибута
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - удалить</description>
///</item>
///<item>
///	<term>0 </term>
///	<description> - не удалять</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Annul")]
        [DataMember(Name="Annul",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? Annul  { get; set; } = 0;
              /// <summary>
        /// Пользователь данного изменения
	    ///<list type='bullet'>
///<item>
///	<term>Username </term>
///	<description> - пользователь из контекста</description>
///</item>
///<item>
///	<term>NULL </term>
///	<description> -если неизвестен</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedBy")]
        [DataMember(Name="ModifiedBy",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedBy  { get; set; }
              /// <summary>
        /// Источник данного изменения
	    ///<list type='bullet'>
///<item>
///	<term>IP </term>
///	<description> -адрес/имя компьютера</description>
///</item>
///<item>
///	<term>NULL </term>
///	<description> - если неизвестен</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ModifiedFrom")]
        [DataMember(Name="ModifiedFrom",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ModifiedFrom  { get; set; }
              /// <summary>
        /// Идентификатор дополнительного атрибута
	    ///<list type='bullet'>
///<item>
///	<description>DICT_ID из справочника DICTIONARIES</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("PropertyID")]
        [DataMember(Name="PropertyID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? PropertyID  { get; set; }
              /// <summary>
        /// Идентификатор Значения Справочника для дополнительного атрибута
	    ///<list type='bullet'>
///<item>
///	<description>DIVL_ID из справочника DICT_VALUES</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("PropertyValueID")]
        [DataMember(Name="PropertyValueID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? PropertyValueID  { get; set; }
              /// <summary>
        /// Комментарий
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Remark")]
        [DataMember(Name="Remark",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Remark  { get; set; }
              /// <summary>
        /// Внешний идентификатор дополнительного атрибута
	    ///<list type='bullet'>
///<item>
///	<description>CLDC_ID из справочника CLIENT_DICTIONARIES</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("ExternalID")]
        [DataMember(Name="ExternalID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? ExternalID  { get; set; }
              /// <summary>
        /// Расширенное значение атрибута (дата, число или текст - не справочник) 
	    ///<list type='bullet'>///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("Value")]
        [DataMember(Name="Value",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String Value  { get; set; }
              /// <summary>
        /// Признак передачи внешнего значения ID
	    ///<list type='bullet'>
///<item>
///	<term>1 </term>
///	<description> - внешний ID (для BIS всегда устанавливаем в 1)</description>
///</item>
///<item>
///	<term>0 </term>
///	<description> - внутренний ID</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 1</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Body
        /// </remarks>
        [JsonProperty("IDType")]
        [DataMember(Name="IDType",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? IDType  { get; set; } = 1;
              /// <summary>
        /// Код внешней системы - инициатора запроса
	    ///<list type='bullet'>
///<item>
///	<description>зарезервировано</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Header
        /// </remarks>
        [JsonProperty("System")]
        [DataMember(Name="System",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String System  { get; set; }
              /// <summary>
        /// Название сущности REST, для которой выполняется POST операция
	    ///<list type='bullet'>
///<item>
///	<description>зарезервировано</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("EntityName")]
        [DataMember(Name="EntityName",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String EntityName { get; set; } = "<empty>";
              /// <summary>
        /// Идентификатор записи на ЛС для правки дополнительного атрибута
	    ///<list type='bullet'>
///<item>
///	<description>CLDC_ID из справочника CLIENT_DICTIONARIES</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 0</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("ID")]
        [DataMember(Name="ID",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.Int32? ID 	{
		get 
		{ 
			if(emptyId.Equals(this.Id))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.Id, out result))
				return result; 
			else
            {
return 0;
            }
		}
		set { this.Id = value.ToString(); }
	}
              /// <summary>
        /// Идентификатор лицевого счета (соответствует CustomerID)
	    ///<list type='bullet'>
///<item>
///	<description>CLNT_ID из справочника CLIENT_HISTORIES</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// 
        /// </value>
        /// <remarks>
        /// Place : Path
        /// </remarks>
        [JsonProperty("ParentID")]
        [DataMember(Name="ParentID",EmitDefaultValue = false)]
		[JsonRestrictedByValue("<empty>")]

[SecondaryKey("Associations_Request_SET","ID")]/*SET*/
[SecondaryKey("Subscribers_Request_SET","ID")]/*SET*/
[SecondaryKey("Customers_Request_SET","ID")]/*SET*/
	public global::System.Int32? ParentID 	{
		get 
		{ 
			if(emptyId.Equals(this.ParentId))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.ParentId, out result))
				return result; 
			else
            {
return null;
            }
		}
		set { this.ParentId = value.ToString(); }
	}
              /// <summary>
        /// Формат вывода ошибки
	    ///<list type='bullet'>
///<item>
///	<description>'json'</description>
///</item>
///<item>
///	<description>'xml'</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : xml</para>
///<para>Max length : 25</para>
///<para>Mandatory : No</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("ErrFormat")]
        [DataMember(Name="ErrFormat",EmitDefaultValue = false)]
		/*norestr*/

	public global::System.String ErrFormat     {
		get { return Format ?? "xml"; }
		set { this.Format = value; }
	}
              /// <summary>
        /// Указание языка для набора multi-language данных 
	    ///<list type='bullet'>
///<item>
///	<term>'uk' </term>
///	<description> -украинский</description>
///</item>
///<item>
///	<term>'ru' </term>
///	<description> -руский </description>
///</item>
///<item>
///	<term>'en' </term>
///	<description> -английский</description>
///</item>
///</list>
        /// </summary>
        /// <value>
        /// <para>Default : 'uk'</para>
///<para>Max length : 3</para>
///<para>Mandatory : Yes</para>
        /// </value>
        /// <remarks>
        /// Place : QueryParam
        /// </remarks>
        [JsonProperty("lang")]
        [DataMember(Name="lang",EmitDefaultValue = false)]
		/*norestr*/

			[Required]
			[JsonIgnore]
	public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
             #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "ANNUL": return Annul;
				    case "MODIFIEDBY": return ModifiedBy;
				    case "MODIFIEDFROM": return ModifiedFrom;
				    case "PROPERTYID": return PropertyID;
				    case "PROPERTYVALUEID": return PropertyValueID;
				    case "REMARK": return Remark;
				    case "EXTERNALID": return ExternalID;
				    case "VALUE": return Value;
				    case "IDTYPE": return IDType;
				    case "SYSTEM": return System;
				    case "ENTITYNAME": return EntityName;
				    case "ID": return ID;
				    case "PARENTID": return ParentID;
				    case "ERRFORMAT": return ErrFormat;
				    case "LANG": return lang;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "ANNUL":if (value == null)Annul=null;else Annul=Convert.ToInt32(value);break;
                case "MODIFIEDBY":ModifiedBy=(string)value;break;
                case "MODIFIEDFROM":ModifiedFrom=(string)value;break;
                case "PROPERTYID":if (value == null)PropertyID=null;else PropertyID=Convert.ToInt32(value);break;
                case "PROPERTYVALUEID":if (value == null)PropertyValueID=null;else PropertyValueID=Convert.ToInt32(value);break;
                case "REMARK":Remark=(string)value;break;
                case "EXTERNALID":if (value == null)ExternalID=null;else ExternalID=Convert.ToInt32(value);break;
                case "VALUE":Value=(string)value;break;
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                case "SYSTEM":System=(string)value;break;
                case "ENTITYNAME":EntityName=(string)value;break;
                case "ID":if (value == null)ID=null;else ID=Convert.ToInt32(value);break;
                case "PARENTID":if (value == null)ParentID=null;else ParentID=Convert.ToInt32(value);break;
                case "ERRFORMAT":ErrFormat=(string)value;break;
                case "LANG":lang=(string)value;break;
                }
            }
		}
		#endregion
	}
	[JsonObject(ItemNullValueHandling=NullValueHandling.Ignore)]
	[DataContract(Name ="TreeNodeProperties_Response_SET",Namespace = "")]
	public class TreeNodeProperties_Response_SET: BaseEntity, IModifiedTag
	{
         #region [Properties]
			/// <summary>
			/// Признак передачи внешнего значения ID
			/// <para/>
			/// IsExternalID
			/// </summary>
			///<remarks>
			///Признак передачи внешнего значения ID
			///</remarks>
			[JsonProperty("IDType")]
			[DataMember(Name="IDType", EmitDefaultValue = false)]
			/*norestr*/

            public global::System.Int32? IDType  { get; set; } = 1;
			/// <summary>
			/// Указание языка для набора multi-language данных 
			/// <para/>
			/// Lang
			/// </summary>
			///<remarks>
			///Указание языка для набора multi-language данных 
			///</remarks>
			[JsonProperty("lang")]
			[DataMember(Name="lang", EmitDefaultValue = false)]
			/*norestr*/

			[Required]
			[JsonIgnore]
            public global::System.String lang     {
		get { return Lang ?? "uk"; }
		set { this.Lang = value; }
	}
			/// <summary>
			/// Идентификатор записи на ЛС для правки дополнительного атрибута
			/// <para/>
			/// Tnpb_ID
			/// </summary>
			///<remarks>
			///Идентификатор записи на ЛС для правки дополнительного атрибута
			///</remarks>
			[JsonProperty("ID")]
			[DataMember(Name="ID", EmitDefaultValue = false)]
			/*norestr*/

            public global::System.Int32? ID 	{
		get 
		{ 
			if(emptyId.Equals(this.Id))
			{
return 0;
			}
			global::System.Int32 result = default(global::System.Int32);
			if(global::System.Int32.TryParse(this.Id, out result))
				return result; 
			else
            {
return 0;
            }
		}
		set { this.Id = value.ToString(); }
	}
         #endregion
        [JsonIgnore]
	    public DateTime? If_Modified_Since { get {return null;}}
        #region [IDateModified]
        [JsonIgnore]
	    public DateTime? LastModified { get { return If_Modified_Since;}}
        #endregion
		#region [IPropertyIndexer implementation]
		[JsonIgnore]
		public object this[string index] 
		{
			get
			{
				switch (index.ToUpper())
				{
				    case "IDTYPE": return IDType;
				    case "LANG": return lang;
				    case "ID": return ID;
					default: return  null;
				}
			}
			set
			{
				switch (index.ToUpper())
				//switch (index)
				{
                case "IDTYPE":if (value == null)IDType=null;else IDType=Convert.ToInt32(value);break;
                case "LANG":lang=(string)value;break;
                case "ID":if (value == null)ID=null;else ID=Convert.ToInt32(value);break;
                }
            }
		}
		#endregion
    }
#endregion
}
